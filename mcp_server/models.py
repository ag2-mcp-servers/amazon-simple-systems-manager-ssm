# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:57:12+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, SecretStr, conint, constr


class Account(RootModel[str]):
    root: str


class AccountId(RootModel[constr(pattern=r'\(\?i\)all\|[0-9]\{12\}')]):
    root: constr(pattern=r'\(\?i\)all\|[0-9]\{12\}')


class AccountIdList(RootModel[List[AccountId]]):
    root: List[AccountId] = Field(..., max_length=20)


class Accounts(RootModel[List[Account]]):
    root: List[Account] = Field(..., max_length=50, min_length=1)


class ActivationCode(RootModel[constr(min_length=20, max_length=250)]):
    root: constr(min_length=20, max_length=250)


class ActivationDescription(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class ActivationId(
    RootModel[
        constr(
            pattern=r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
        )
    ]
):
    root: constr(
        pattern=r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
    )


class AddTagsToResourceResult(BaseModel):
    pass


class AgentErrorCode(RootModel[constr(max_length=10)]):
    root: constr(max_length=10)


class AggregatorSchemaOnly(RootModel[bool]):
    root: bool


class AlarmName(
    RootModel[constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=255)]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=255)


class AllowedPattern(RootModel[constr(min_length=0, max_length=1024)]):
    root: constr(min_length=0, max_length=1024)


class AlreadyExistsException(RootModel[Any]):
    root: Any


class ApplyOnlyAtCronInterval(RootModel[bool]):
    root: bool


class ApproveAfterDays(RootModel[conint(ge=0, le=360)]):
    root: conint(ge=0, le=360)


class AssociatedInstances(RootModel[Any]):
    root: Any


class AssociationAlreadyExists(RootModel[Any]):
    root: Any


class AssociationComplianceSeverity(Enum):
    CRITICAL = 'CRITICAL'
    HIGH = 'HIGH'
    MEDIUM = 'MEDIUM'
    LOW = 'LOW'
    UNSPECIFIED = 'UNSPECIFIED'


class AssociationDoesNotExist(RootModel[Any]):
    root: Any


class AssociationExecutionDoesNotExist(RootModel[Any]):
    root: Any


class AssociationExecutionFilterKey(Enum):
    ExecutionId = 'ExecutionId'
    Status = 'Status'
    CreatedTime = 'CreatedTime'


class AssociationExecutionFilterValue(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class AssociationExecutionId(
    RootModel[
        constr(
            pattern=r'[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}'
        )
    ]
):
    root: constr(
        pattern=r'[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}'
    )


class AssociationExecutionTargetsFilterKey(Enum):
    Status = 'Status'
    ResourceId = 'ResourceId'
    ResourceType = 'ResourceType'


class AssociationExecutionTargetsFilterValue(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class AssociationFilterKey(Enum):
    InstanceId = 'InstanceId'
    Name = 'Name'
    AssociationId = 'AssociationId'
    AssociationStatusName = 'AssociationStatusName'
    LastExecutedBefore = 'LastExecutedBefore'
    LastExecutedAfter = 'LastExecutedAfter'
    AssociationName = 'AssociationName'
    ResourceGroupName = 'ResourceGroupName'


class AssociationFilterOperatorType(Enum):
    EQUAL = 'EQUAL'
    LESS_THAN = 'LESS_THAN'
    GREATER_THAN = 'GREATER_THAN'


class AssociationFilterValue(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class AssociationId(
    RootModel[
        constr(
            pattern=r'[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}'
        )
    ]
):
    root: constr(
        pattern=r'[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}'
    )


class AssociationIdList(RootModel[List[AssociationId]]):
    root: List[AssociationId] = Field(..., max_length=10, min_length=1)


class AssociationLimitExceeded(RootModel[Any]):
    root: Any


class AssociationName(RootModel[constr(pattern=r'^[a-zA-Z0-9_\-.]{3,128}$')]):
    root: constr(pattern=r'^[a-zA-Z0-9_\-.]{3,128}$')


class AssociationResourceId(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class AssociationResourceType(RootModel[constr(min_length=1, max_length=50)]):
    root: constr(min_length=1, max_length=50)


class AssociationStatusName(Enum):
    Pending = 'Pending'
    Success = 'Success'
    Failed = 'Failed'


class AssociationSyncCompliance(Enum):
    AUTO = 'AUTO'
    MANUAL = 'MANUAL'


class AssociationVersion(RootModel[constr(pattern=r'([$]LATEST)|([1-9][0-9]*)')]):
    root: constr(pattern=r'([$]LATEST)|([1-9][0-9]*)')


class AssociationVersionLimitExceeded(RootModel[Any]):
    root: Any


class AttachmentHash(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class AttachmentHashType(Enum):
    Sha256 = 'Sha256'


class AttachmentIdentifier(RootModel[constr(pattern=r'^[a-zA-Z0-9_\-.]{3,128}$')]):
    root: constr(pattern=r'^[a-zA-Z0-9_\-.]{3,128}$')


class AttachmentName(RootModel[constr(pattern=r'^[a-zA-Z0-9_\-.]{3,128}$')]):
    root: constr(pattern=r'^[a-zA-Z0-9_\-.]{3,128}$')


class AttachmentUrl(RootModel[str]):
    root: str


class AttachmentsSourceKey(Enum):
    SourceUrl = 'SourceUrl'
    S3FileUrl = 'S3FileUrl'
    AttachmentReference = 'AttachmentReference'


class AttachmentsSourceValue(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class AttachmentsSourceValues(RootModel[List[AttachmentsSourceValue]]):
    root: List[AttachmentsSourceValue] = Field(..., max_length=1, min_length=1)


class AttributeName(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class AttributeValue(RootModel[constr(min_length=0, max_length=4096)]):
    root: constr(min_length=0, max_length=4096)


class AutomationActionName(RootModel[constr(pattern=r'^aws:[a-zA-Z]{3,25}$')]):
    root: constr(pattern=r'^aws:[a-zA-Z]{3,25}$')


class AutomationDefinitionNotApprovedException(RootModel[Any]):
    root: Any


class AutomationDefinitionNotFoundException(RootModel[Any]):
    root: Any


class AutomationDefinitionVersionNotFoundException(RootModel[Any]):
    root: Any


class AutomationExecutionFilterKey(Enum):
    DocumentNamePrefix = 'DocumentNamePrefix'
    ExecutionStatus = 'ExecutionStatus'
    ExecutionId = 'ExecutionId'
    ParentExecutionId = 'ParentExecutionId'
    CurrentAction = 'CurrentAction'
    StartTimeBefore = 'StartTimeBefore'
    StartTimeAfter = 'StartTimeAfter'
    AutomationType = 'AutomationType'
    TagKey = 'TagKey'
    TargetResourceGroup = 'TargetResourceGroup'
    AutomationSubtype = 'AutomationSubtype'
    OpsItemId = 'OpsItemId'


class AutomationExecutionFilterValue(RootModel[constr(min_length=1, max_length=150)]):
    root: constr(min_length=1, max_length=150)


class AutomationExecutionFilterValueList(
    RootModel[List[AutomationExecutionFilterValue]]
):
    root: List[AutomationExecutionFilterValue] = Field(..., max_length=10, min_length=1)


class AutomationExecutionId(RootModel[constr(min_length=36, max_length=36)]):
    root: constr(min_length=36, max_length=36)


class AutomationExecutionLimitExceededException(RootModel[Any]):
    root: Any


class AutomationExecutionNotFoundException(RootModel[Any]):
    root: Any


class AutomationExecutionStatus(Enum):
    Pending = 'Pending'
    InProgress = 'InProgress'
    Waiting = 'Waiting'
    Success = 'Success'
    TimedOut = 'TimedOut'
    Cancelling = 'Cancelling'
    Cancelled = 'Cancelled'
    Failed = 'Failed'
    PendingApproval = 'PendingApproval'
    Approved = 'Approved'
    Rejected = 'Rejected'
    Scheduled = 'Scheduled'
    RunbookInProgress = 'RunbookInProgress'
    PendingChangeCalendarOverride = 'PendingChangeCalendarOverride'
    ChangeCalendarOverrideApproved = 'ChangeCalendarOverrideApproved'
    ChangeCalendarOverrideRejected = 'ChangeCalendarOverrideRejected'
    CompletedWithSuccess = 'CompletedWithSuccess'
    CompletedWithFailure = 'CompletedWithFailure'


class AutomationParameterKey(RootModel[constr(min_length=1, max_length=50)]):
    root: constr(min_length=1, max_length=50)


class AutomationParameterValue(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class AutomationParameterValueList(RootModel[List[AutomationParameterValue]]):
    root: List[AutomationParameterValue] = Field(..., max_length=50, min_length=0)


class AutomationStepNotFoundException(RootModel[Any]):
    root: Any


class AutomationSubtype(Enum):
    ChangeRequest = 'ChangeRequest'


class AutomationTargetParameterName(RootModel[constr(min_length=1, max_length=50)]):
    root: constr(min_length=1, max_length=50)


class AutomationType(Enum):
    CrossAccount = 'CrossAccount'
    Local = 'Local'


class BaselineDescription(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class BaselineId(
    RootModel[
        constr(pattern=r'^[a-zA-Z0-9_\-:/]{20,128}$', min_length=20, max_length=128)
    ]
):
    root: constr(pattern=r'^[a-zA-Z0-9_\-:/]{20,128}$', min_length=20, max_length=128)


class BaselineName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_\-.]{3,128}$', min_length=3, max_length=128)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_\-.]{3,128}$', min_length=3, max_length=128)


class BatchErrorMessage(RootModel[str]):
    root: str


class Boolean(RootModel[bool]):
    root: bool


class CalendarNameOrARN(RootModel[str]):
    root: str


class CalendarNameOrARNList(RootModel[List[CalendarNameOrARN]]):
    root: List[CalendarNameOrARN]


class CalendarState(Enum):
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'


class CancelCommandResult(BaseModel):
    pass


class Category(RootModel[constr(max_length=128)]):
    root: constr(max_length=128)


class CategoryEnumList(RootModel[List[Category]]):
    root: List[Category] = Field(..., max_length=3, min_length=0)


class CategoryList(RootModel[List[Category]]):
    root: List[Category] = Field(..., max_length=3, min_length=0)


class ChangeDetailsValue(RootModel[constr(min_length=1, max_length=32768)]):
    root: constr(min_length=1, max_length=32768)


class ChangeRequestName(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class ClientToken(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class CloudWatchLogGroupName(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class CloudWatchOutputEnabled(RootModel[bool]):
    root: bool


class CommandFilterKey(Enum):
    InvokedAfter = 'InvokedAfter'
    InvokedBefore = 'InvokedBefore'
    Status = 'Status'
    ExecutionStage = 'ExecutionStage'
    DocumentName = 'DocumentName'


class CommandFilterValue(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class CommandId(RootModel[constr(min_length=36, max_length=36)]):
    root: constr(min_length=36, max_length=36)


class CommandInvocationStatus(Enum):
    Pending = 'Pending'
    InProgress = 'InProgress'
    Delayed = 'Delayed'
    Success = 'Success'
    Cancelled = 'Cancelled'
    TimedOut = 'TimedOut'
    Failed = 'Failed'
    Cancelling = 'Cancelling'


class CommandMaxResults(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class CommandPluginName(RootModel[constr(min_length=4)]):
    root: constr(min_length=4)


class CommandPluginOutput(RootModel[constr(max_length=2500)]):
    root: constr(max_length=2500)


class CommandPluginStatus(Enum):
    Pending = 'Pending'
    InProgress = 'InProgress'
    Success = 'Success'
    TimedOut = 'TimedOut'
    Cancelled = 'Cancelled'
    Failed = 'Failed'


class CommandStatus(Enum):
    Pending = 'Pending'
    InProgress = 'InProgress'
    Success = 'Success'
    Cancelled = 'Cancelled'
    Failed = 'Failed'
    TimedOut = 'TimedOut'
    Cancelling = 'Cancelling'


class Comment(RootModel[constr(max_length=100)]):
    root: constr(max_length=100)


class CompletedCount(RootModel[int]):
    root: int


class ComplianceExecutionId(RootModel[constr(max_length=100)]):
    root: constr(max_length=100)


class ComplianceExecutionType(RootModel[constr(max_length=50)]):
    root: constr(max_length=50)


class ComplianceFilterValue(RootModel[str]):
    root: str


class ComplianceItemContentHash(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class ComplianceItemDetails(RootModel[Optional[Dict[str, AttributeValue]]]):
    root: Optional[Dict[str, AttributeValue]] = None


class ComplianceItemId(RootModel[str]):
    root: str


class ComplianceItemTitle(RootModel[constr(max_length=500)]):
    root: constr(max_length=500)


class ComplianceQueryOperatorType(Enum):
    EQUAL = 'EQUAL'
    NOT_EQUAL = 'NOT_EQUAL'
    BEGIN_WITH = 'BEGIN_WITH'
    LESS_THAN = 'LESS_THAN'
    GREATER_THAN = 'GREATER_THAN'


class ComplianceResourceId(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class ComplianceResourceIdList(RootModel[List[ComplianceResourceId]]):
    root: List[ComplianceResourceId] = Field(..., min_length=1)


class ComplianceResourceType(RootModel[constr(min_length=1, max_length=50)]):
    root: constr(min_length=1, max_length=50)


class ComplianceResourceTypeList(RootModel[List[ComplianceResourceType]]):
    root: List[ComplianceResourceType] = Field(..., min_length=1)


class ComplianceSeverity(Enum):
    CRITICAL = 'CRITICAL'
    HIGH = 'HIGH'
    MEDIUM = 'MEDIUM'
    LOW = 'LOW'
    INFORMATIONAL = 'INFORMATIONAL'
    UNSPECIFIED = 'UNSPECIFIED'


class ComplianceStatus(Enum):
    COMPLIANT = 'COMPLIANT'
    NON_COMPLIANT = 'NON_COMPLIANT'


class ComplianceStringFilterKey(RootModel[constr(min_length=1, max_length=200)]):
    root: constr(min_length=1, max_length=200)


class ComplianceStringFilterValueList(RootModel[List[ComplianceFilterValue]]):
    root: List[ComplianceFilterValue] = Field(..., max_length=20, min_length=1)


class ComplianceSummaryCount(RootModel[int]):
    root: int


class ComplianceTypeCountLimitExceededException(RootModel[Any]):
    root: Any


class ComplianceTypeName(
    RootModel[
        constr(
            pattern=r'[A-Za-z0-9_\-]\w+|Custom:[a-zA-Z0-9_\-]\w+',
            min_length=1,
            max_length=100,
        )
    ]
):
    root: constr(
        pattern=r'[A-Za-z0-9_\-]\w+|Custom:[a-zA-Z0-9_\-]\w+',
        min_length=1,
        max_length=100,
    )


class ComplianceUploadType(Enum):
    COMPLETE = 'COMPLETE'
    PARTIAL = 'PARTIAL'


class ComputerName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class ConnectionStatus(Enum):
    Connected = 'Connected'
    NotConnected = 'NotConnected'


class ContentLength(RootModel[int]):
    root: int


class CreateActivationResult(BaseModel):
    ActivationCode_1: Optional[ActivationCode] = Field(None, alias='ActivationCode')
    ActivationId_1: Optional[ActivationId] = Field(None, alias='ActivationId')


class CreatePatchBaselineResult(BaseModel):
    BaselineId_1: Optional[BaselineId] = Field(None, alias='BaselineId')


class CreateResourceDataSyncResult(BaseModel):
    pass


class CreatedDate(RootModel[datetime]):
    root: datetime


class CustomSchemaCountLimitExceededException(RootModel[Any]):
    root: Any


class DateTime(RootModel[datetime]):
    root: datetime


class DefaultBaseline(RootModel[bool]):
    root: bool


class DefaultInstanceName(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256
    )


class DeleteActivationRequest(BaseModel):
    ActivationId_1: ActivationId = Field(..., alias='ActivationId')


class DeleteActivationResult(BaseModel):
    pass


class DeleteAssociationResult(BaseModel):
    pass


class DeleteDocumentResult(BaseModel):
    pass


class DeleteOpsMetadataResult(BaseModel):
    pass


class DeleteParameterResult(BaseModel):
    pass


class DeletePatchBaselineRequest(BaseModel):
    BaselineId_1: BaselineId = Field(..., alias='BaselineId')


class DeletePatchBaselineResult(BaseModel):
    BaselineId_1: Optional[BaselineId] = Field(None, alias='BaselineId')


class DeleteResourceDataSyncResult(BaseModel):
    pass


class DeleteResourcePolicyResponse(BaseModel):
    pass


class DeliveryTimedOutCount(RootModel[int]):
    root: int


class DeregisterManagedInstanceResult(BaseModel):
    pass


class DescribeActivationsFilterKeys(Enum):
    ActivationIds = 'ActivationIds'
    DefaultInstanceName = 'DefaultInstanceName'
    IamRole = 'IamRole'


class DescriptionInDocument(RootModel[str]):
    root: str


class DisassociateOpsItemRelatedItemResponse(BaseModel):
    pass


class DocumentARN(RootModel[constr(pattern=r'^[a-zA-Z0-9_\-.:/]{3,128}$')]):
    root: constr(pattern=r'^[a-zA-Z0-9_\-.:/]{3,128}$')


class DocumentAlreadyExists(RootModel[Any]):
    root: Any


class DocumentAuthor(RootModel[str]):
    root: str


class DocumentContent(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class DocumentDisplayName(
    RootModel[constr(pattern=r'^[\w\.\-\:\/ ]*$', max_length=1024)]
):
    root: constr(pattern=r'^[\w\.\-\:\/ ]*$', max_length=1024)


class DocumentFilterKey(Enum):
    Name = 'Name'
    Owner = 'Owner'
    PlatformTypes = 'PlatformTypes'
    DocumentType = 'DocumentType'


class DocumentFilterValue(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class DocumentFormat(Enum):
    YAML = 'YAML'
    JSON = 'JSON'
    TEXT = 'TEXT'


class DocumentHash(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class DocumentHashType(Enum):
    Sha256 = 'Sha256'
    Sha1 = 'Sha1'


class DocumentKeyValuesFilterKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class DocumentKeyValuesFilterValue(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class DocumentKeyValuesFilterValues(RootModel[List[DocumentKeyValuesFilterValue]]):
    root: List[DocumentKeyValuesFilterValue]


class DocumentLimitExceeded(RootModel[Any]):
    root: Any


class DocumentMetadataEnum(Enum):
    DocumentReviews = 'DocumentReviews'


class DocumentName(RootModel[constr(pattern=r'^[a-zA-Z0-9_\-.]{3,128}$')]):
    root: constr(pattern=r'^[a-zA-Z0-9_\-.]{3,128}$')


class DocumentOwner(RootModel[str]):
    root: str


class DocumentParameterDefaultValue(RootModel[str]):
    root: str


class DocumentParameterDescrption(RootModel[str]):
    root: str


class DocumentParameterName(RootModel[str]):
    root: str


class DocumentParameterType(Enum):
    String = 'String'
    StringList = 'StringList'


class DocumentPermissionLimit(RootModel[Any]):
    root: Any


class DocumentPermissionMaxResults(RootModel[conint(ge=1, le=200)]):
    root: conint(ge=1, le=200)


class DocumentPermissionType(Enum):
    Share = 'Share'


class DocumentReviewAction(Enum):
    SendForReview = 'SendForReview'
    UpdateReview = 'UpdateReview'
    Approve = 'Approve'
    Reject = 'Reject'


class DocumentReviewComment(
    RootModel[constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=1024)]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=1024)


class DocumentReviewCommentType(Enum):
    Comment = 'Comment'


class DocumentSchemaVersion(RootModel[constr(pattern=r'([0-9]+)\.([0-9]+)')]):
    root: constr(pattern=r'([0-9]+)\.([0-9]+)')


class DocumentSha1(RootModel[str]):
    root: str


class DocumentStatus(Enum):
    Creating = 'Creating'
    Active = 'Active'
    Updating = 'Updating'
    Deleting = 'Deleting'
    Failed = 'Failed'


class DocumentStatusInformation(RootModel[str]):
    root: str


class DocumentType(Enum):
    Command = 'Command'
    Policy = 'Policy'
    Automation = 'Automation'
    Session = 'Session'
    Package = 'Package'
    ApplicationConfiguration = 'ApplicationConfiguration'
    ApplicationConfigurationSchema = 'ApplicationConfigurationSchema'
    DeploymentStrategy = 'DeploymentStrategy'
    ChangeCalendar = 'ChangeCalendar'
    Automation_ChangeTemplate = 'Automation.ChangeTemplate'
    ProblemAnalysis = 'ProblemAnalysis'
    ProblemAnalysisTemplate = 'ProblemAnalysisTemplate'
    CloudFormation = 'CloudFormation'
    ConformancePackTemplate = 'ConformancePackTemplate'
    QuickSetup = 'QuickSetup'


class DocumentVersion(
    RootModel[constr(pattern=r'([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)')]
):
    root: constr(pattern=r'([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)')


class DocumentVersionLimitExceeded(RootModel[Any]):
    root: Any


class DocumentVersionName(RootModel[constr(pattern=r'^[a-zA-Z0-9_\-.]{1,128}$')]):
    root: constr(pattern=r'^[a-zA-Z0-9_\-.]{1,128}$')


class DocumentVersionNumber(RootModel[constr(pattern=r'(^[1-9][0-9]*$)')]):
    root: constr(pattern=r'(^[1-9][0-9]*$)')


class DoesNotExistException(RootModel[Any]):
    root: Any


class DryRun(RootModel[bool]):
    root: bool


class DuplicateDocumentContent(RootModel[Any]):
    root: Any


class DuplicateDocumentVersionName(RootModel[Any]):
    root: Any


class DuplicateInstanceId(RootModel[Any]):
    root: Any


class EffectiveInstanceAssociationMaxResults(RootModel[conint(ge=1, le=5)]):
    root: conint(ge=1, le=5)


class ErrorCount(RootModel[int]):
    root: int


class ExecutionMode(Enum):
    Auto = 'Auto'
    Interactive = 'Interactive'


class ExecutionRoleName(
    RootModel[constr(pattern=r'[\w+=,.@/-]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[\w+=,.@/-]+', min_length=1, max_length=64)


class ExpirationDate(RootModel[datetime]):
    root: datetime


class ExternalAlarmState(Enum):
    UNKNOWN = 'UNKNOWN'
    ALARM = 'ALARM'


class Fault(Enum):
    Client = 'Client'
    Server = 'Server'
    Unknown = 'Unknown'


class FeatureNotAvailableException(RootModel[Any]):
    root: Any


class GetAutomationExecutionRequest(BaseModel):
    AutomationExecutionId_1: AutomationExecutionId = Field(
        ..., alias='AutomationExecutionId'
    )


class GetDocumentRequest(BaseModel):
    DocumentFormat_1: Optional[DocumentFormat] = Field(None, alias='DocumentFormat')
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    Name: DocumentARN
    VersionName: Optional[DocumentVersionName] = None


class GetInventorySchemaMaxResults(RootModel[conint(ge=50, le=200)]):
    root: conint(ge=50, le=200)


class GetOpsMetadataMaxResults(RootModel[conint(ge=1, le=10)]):
    root: conint(ge=1, le=10)


class GetParametersByPathMaxResults(RootModel[conint(ge=1, le=10)]):
    root: conint(ge=1, le=10)


class GetPatchBaselineRequest(BaseModel):
    BaselineId_1: BaselineId = Field(..., alias='BaselineId')


class HierarchyLevelLimitExceededException(RootModel[Any]):
    root: Any


class HierarchyTypeMismatchException(RootModel[Any]):
    root: Any


class IPAddress(RootModel[constr(min_length=1, max_length=46)]):
    root: constr(min_length=1, max_length=46)


class ISO8601String(RootModel[str]):
    root: str


class IamRole(RootModel[constr(max_length=64)]):
    root: constr(max_length=64)


class IdempotencyToken(
    RootModel[
        constr(
            pattern=r'[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}',
            min_length=36,
            max_length=36,
        )
    ]
):
    root: constr(
        pattern=r'[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}',
        min_length=36,
        max_length=36,
    )


class IdempotentParameterMismatch(RootModel[Any]):
    root: Any


class IncompatiblePolicyException(RootModel[Any]):
    root: Any


class InstallOverrideList(
    RootModel[
        constr(
            pattern=r'^https://.+$|^s3://([^/]+)/(.*?([^/]+))$',
            min_length=1,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'^https://.+$|^s3://([^/]+)/(.*?([^/]+))$',
        min_length=1,
        max_length=256,
    )


class InstanceAssociationExecutionSummary(
    RootModel[constr(min_length=1, max_length=512)]
):
    root: constr(min_length=1, max_length=512)


class InstanceCount(RootModel[int]):
    root: int


class InstanceId(RootModel[constr(pattern=r'(^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)')]):
    root: constr(pattern=r'(^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)')


class InstanceIdList(RootModel[List[InstanceId]]):
    root: List[InstanceId] = Field(..., max_length=50, min_length=0)


class InstanceInformationFilterKey(Enum):
    InstanceIds = 'InstanceIds'
    AgentVersion = 'AgentVersion'
    PingStatus = 'PingStatus'
    PlatformTypes = 'PlatformTypes'
    ActivationIds = 'ActivationIds'
    IamRole = 'IamRole'
    ResourceType = 'ResourceType'
    AssociationStatus = 'AssociationStatus'


class InstanceInformationFilterValue(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class InstanceInformationFilterValueSet(
    RootModel[List[InstanceInformationFilterValue]]
):
    root: List[InstanceInformationFilterValue] = Field(
        ..., max_length=100, min_length=1
    )


class InstanceInformationStringFilterKey(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class InstancePatchStateFilterKey(RootModel[constr(min_length=1, max_length=200)]):
    root: constr(min_length=1, max_length=200)


class InstancePatchStateFilterValue(RootModel[str]):
    root: str


class InstancePatchStateFilterValues(RootModel[List[InstancePatchStateFilterValue]]):
    root: List[InstancePatchStateFilterValue] = Field(..., max_length=1, min_length=1)


class InstancePatchStateOperatorType(Enum):
    Equal = 'Equal'
    NotEqual = 'NotEqual'
    LessThan = 'LessThan'
    GreaterThan = 'GreaterThan'


class InstanceTagName(RootModel[constr(max_length=255)]):
    root: constr(max_length=255)


class InstancesCount(RootModel[int]):
    root: int


class Integer(RootModel[int]):
    root: int


class InternalServerError(RootModel[Any]):
    root: Any


class InvalidActivation(RootModel[Any]):
    root: Any


class InvalidActivationId(RootModel[Any]):
    root: Any


class InvalidAggregatorException(RootModel[Any]):
    root: Any


class InvalidAllowedPatternException(RootModel[Any]):
    root: Any


class InvalidAssociation(RootModel[Any]):
    root: Any


class InvalidAssociationVersion(RootModel[Any]):
    root: Any


class InvalidAutomationExecutionParametersException(RootModel[Any]):
    root: Any


class InvalidAutomationSignalException(RootModel[Any]):
    root: Any


class InvalidAutomationStatusUpdateException(RootModel[Any]):
    root: Any


class InvalidCommandId(RootModel[Any]):
    root: Any


class InvalidDeleteInventoryParametersException(RootModel[Any]):
    root: Any


class InvalidDeletionIdException(RootModel[Any]):
    root: Any


class InvalidDocument(RootModel[Any]):
    root: Any


class InvalidDocumentContent(RootModel[Any]):
    root: Any


class InvalidDocumentOperation(RootModel[Any]):
    root: Any


class InvalidDocumentSchemaVersion(RootModel[Any]):
    root: Any


class InvalidDocumentType(RootModel[Any]):
    root: Any


class InvalidDocumentVersion(RootModel[Any]):
    root: Any


class InvalidFilter(RootModel[Any]):
    root: Any


class InvalidFilterKey(RootModel[Any]):
    root: Any


class InvalidFilterOption(RootModel[Any]):
    root: Any


class InvalidFilterValue(RootModel[Any]):
    root: Any


class InvalidInstanceId(RootModel[Any]):
    root: Any


class InvalidInstanceInformationFilterValue(RootModel[Any]):
    root: Any


class InvalidInventoryGroupException(RootModel[Any]):
    root: Any


class InvalidInventoryItemContextException(RootModel[Any]):
    root: Any


class InvalidInventoryRequestException(RootModel[Any]):
    root: Any


class InvalidItemContentException(RootModel[Any]):
    root: Any


class InvalidKeyId(RootModel[Any]):
    root: Any


class InvalidNextToken(RootModel[Any]):
    root: Any


class InvalidNotificationConfig(RootModel[Any]):
    root: Any


class InvalidOptionException(RootModel[Any]):
    root: Any


class InvalidOutputFolder(RootModel[Any]):
    root: Any


class InvalidOutputLocation(RootModel[Any]):
    root: Any


class InvalidParameters(RootModel[Any]):
    root: Any


class InvalidPermissionType(RootModel[Any]):
    root: Any


class InvalidPluginName(RootModel[Any]):
    root: Any


class InvalidPolicyAttributeException(RootModel[Any]):
    root: Any


class InvalidPolicyTypeException(RootModel[Any]):
    root: Any


class InvalidResourceId(RootModel[Any]):
    root: Any


class InvalidResourceType(RootModel[Any]):
    root: Any


class InvalidResultAttributeException(RootModel[Any]):
    root: Any


class InvalidRole(RootModel[Any]):
    root: Any


class InvalidSchedule(RootModel[Any]):
    root: Any


class InvalidTag(RootModel[Any]):
    root: Any


class InvalidTarget(RootModel[Any]):
    root: Any


class InvalidTargetMaps(RootModel[Any]):
    root: Any


class InvalidTypeNameException(RootModel[Any]):
    root: Any


class InvalidUpdate(RootModel[Any]):
    root: Any


class InventoryAggregatorExpression(RootModel[constr(min_length=1, max_length=1000)]):
    root: constr(min_length=1, max_length=1000)


class InventoryAttributeDataType(Enum):
    string = 'string'
    number = 'number'


class InventoryDeletionLastStatusMessage(RootModel[str]):
    root: str


class InventoryDeletionLastStatusUpdateTime(RootModel[datetime]):
    root: datetime


class InventoryDeletionStartTime(RootModel[datetime]):
    root: datetime


class InventoryDeletionStatus(Enum):
    InProgress = 'InProgress'
    Complete = 'Complete'


class InventoryFilterKey(RootModel[constr(min_length=1, max_length=200)]):
    root: constr(min_length=1, max_length=200)


class InventoryFilterValue(RootModel[str]):
    root: str


class InventoryFilterValueList(RootModel[List[InventoryFilterValue]]):
    root: List[InventoryFilterValue] = Field(..., max_length=40, min_length=1)


class InventoryGroupName(RootModel[constr(min_length=1, max_length=200)]):
    root: constr(min_length=1, max_length=200)


class InventoryItemAttributeName(RootModel[str]):
    root: str


class InventoryItemCaptureTime(
    RootModel[
        constr(
            pattern=r'^(20)[0-9][0-9]-(0[1-9]|1[012])-([12][0-9]|3[01]|0[1-9])(T)(2[0-3]|[0-1][0-9])(:[0-5][0-9])(:[0-5][0-9])(Z)$'
        )
    ]
):
    root: constr(
        pattern=r'^(20)[0-9][0-9]-(0[1-9]|1[012])-([12][0-9]|3[01]|0[1-9])(T)(2[0-3]|[0-1][0-9])(:[0-5][0-9])(:[0-5][0-9])(Z)$'
    )


class InventoryItemContentContext(RootModel[Optional[Dict[str, AttributeValue]]]):
    root: Optional[Dict[str, AttributeValue]] = None


class InventoryItemContentHash(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class InventoryItemEntry(RootModel[Optional[Dict[str, AttributeValue]]]):
    root: Optional[Dict[str, AttributeValue]] = None


class InventoryItemEntryList(RootModel[List[InventoryItemEntry]]):
    root: List[InventoryItemEntry] = Field(..., max_length=10000, min_length=0)


class InventoryItemSchemaVersion(
    RootModel[constr(pattern=r'^([0-9]{1,6})(\.[0-9]{1,6})$')]
):
    root: constr(pattern=r'^([0-9]{1,6})(\.[0-9]{1,6})$')


class InventoryItemTypeName(
    RootModel[constr(pattern=r'^(AWS|Custom):.*$', min_length=1, max_length=100)]
):
    root: constr(pattern=r'^(AWS|Custom):.*$', min_length=1, max_length=100)


class InventoryItemTypeNameFilter(RootModel[constr(min_length=0, max_length=100)]):
    root: constr(min_length=0, max_length=100)


class InventoryQueryOperatorType(Enum):
    Equal = 'Equal'
    NotEqual = 'NotEqual'
    BeginWith = 'BeginWith'
    LessThan = 'LessThan'
    GreaterThan = 'GreaterThan'
    Exists = 'Exists'


class InventoryResultEntityId(RootModel[str]):
    root: str


class InventoryResultItem(BaseModel):
    CaptureTime: Optional[InventoryItemCaptureTime] = None
    Content: InventoryItemEntryList
    ContentHash: Optional[InventoryItemContentHash] = None
    SchemaVersion: InventoryItemSchemaVersion
    TypeName: InventoryItemTypeName


class InventoryResultItemKey(RootModel[str]):
    root: str


class InventoryResultItemMap(RootModel[Optional[Dict[str, InventoryResultItem]]]):
    root: Optional[Dict[str, InventoryResultItem]] = None


class InventorySchemaDeleteOption(Enum):
    DisableSchema = 'DisableSchema'
    DeleteSchema = 'DeleteSchema'


class InventoryTypeDisplayName(RootModel[str]):
    root: str


class InvocationDoesNotExist(RootModel[Any]):
    root: Any


class InvocationTraceOutput(RootModel[constr(max_length=2500)]):
    root: constr(max_length=2500)


class IsSubTypeSchema(RootModel[bool]):
    root: bool


class ItemContentMismatchException(RootModel[Any]):
    root: Any


class ItemSizeLimitExceededException(RootModel[Any]):
    root: Any


class LastResourceDataSyncMessage(RootModel[str]):
    root: str


class LastResourceDataSyncStatus(Enum):
    Successful = 'Successful'
    Failed = 'Failed'
    InProgress = 'InProgress'


class LastResourceDataSyncTime(RootModel[datetime]):
    root: datetime


class LastSuccessfulResourceDataSyncTime(RootModel[datetime]):
    root: datetime


class ListOpsMetadataMaxResults(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class Long(RootModel[int]):
    root: int


class MaintenanceWindowAllowUnassociatedTargets(RootModel[bool]):
    root: bool


class MaintenanceWindowCutoff(RootModel[conint(ge=0, le=23)]):
    root: conint(ge=0, le=23)


class MaintenanceWindowDescription(RootModel[SecretStr]):
    root: SecretStr


class MaintenanceWindowDurationHours(RootModel[conint(ge=1, le=24)]):
    root: conint(ge=1, le=24)


class MaintenanceWindowEnabled(RootModel[bool]):
    root: bool


class MaintenanceWindowExecutionId(
    RootModel[
        constr(
            pattern=r'^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$',
            min_length=36,
            max_length=36,
        )
    ]
):
    root: constr(
        pattern=r'^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$',
        min_length=36,
        max_length=36,
    )


class MaintenanceWindowExecutionStatus(Enum):
    PENDING = 'PENDING'
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'
    TIMED_OUT = 'TIMED_OUT'
    CANCELLING = 'CANCELLING'
    CANCELLED = 'CANCELLED'
    SKIPPED_OVERLAPPING = 'SKIPPED_OVERLAPPING'


class MaintenanceWindowExecutionStatusDetails(
    RootModel[constr(min_length=0, max_length=250)]
):
    root: constr(min_length=0, max_length=250)


class MaintenanceWindowExecutionTaskExecutionId(RootModel[str]):
    root: str


class MaintenanceWindowExecutionTaskId(
    RootModel[
        constr(
            pattern=r'^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$',
            min_length=36,
            max_length=36,
        )
    ]
):
    root: constr(
        pattern=r'^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$',
        min_length=36,
        max_length=36,
    )


class MaintenanceWindowExecutionTaskIdList(
    RootModel[List[MaintenanceWindowExecutionTaskId]]
):
    root: List[MaintenanceWindowExecutionTaskId]


class MaintenanceWindowExecutionTaskInvocationId(
    RootModel[
        constr(
            pattern=r'^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$',
            min_length=36,
            max_length=36,
        )
    ]
):
    root: constr(
        pattern=r'^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$',
        min_length=36,
        max_length=36,
    )


class MaintenanceWindowExecutionTaskInvocationParameters(RootModel[SecretStr]):
    root: SecretStr


class MaintenanceWindowFilterKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class MaintenanceWindowFilterValue(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class MaintenanceWindowFilterValues(RootModel[List[MaintenanceWindowFilterValue]]):
    root: List[MaintenanceWindowFilterValue]


class MaintenanceWindowId(
    RootModel[constr(pattern=r'^mw-[0-9a-f]{17}$', min_length=20, max_length=20)]
):
    root: constr(pattern=r'^mw-[0-9a-f]{17}$', min_length=20, max_length=20)


class MaintenanceWindowLambdaClientContext(
    RootModel[constr(min_length=1, max_length=8000)]
):
    root: constr(min_length=1, max_length=8000)


class MaintenanceWindowLambdaPayload(RootModel[SecretStr]):
    root: SecretStr


class MaintenanceWindowLambdaQualifier(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class MaintenanceWindowMaxResults(RootModel[conint(ge=10, le=100)]):
    root: conint(ge=10, le=100)


class MaintenanceWindowName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_\-.]{3,128}$', min_length=3, max_length=128)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_\-.]{3,128}$', min_length=3, max_length=128)


class MaintenanceWindowOffset(RootModel[conint(ge=1, le=6)]):
    root: conint(ge=1, le=6)


class MaintenanceWindowResourceType(Enum):
    INSTANCE = 'INSTANCE'
    RESOURCE_GROUP = 'RESOURCE_GROUP'


class MaintenanceWindowSchedule(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class MaintenanceWindowSearchMaxResults(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class MaintenanceWindowStepFunctionsInput(RootModel[SecretStr]):
    root: SecretStr


class MaintenanceWindowStepFunctionsName(
    RootModel[constr(min_length=1, max_length=80)]
):
    root: constr(min_length=1, max_length=80)


class MaintenanceWindowStepFunctionsParameters(BaseModel):
    Input: Optional[MaintenanceWindowStepFunctionsInput] = None
    Name: Optional[MaintenanceWindowStepFunctionsName] = None


class MaintenanceWindowStringDateTime(RootModel[str]):
    root: str


class MaintenanceWindowTargetId(
    RootModel[
        constr(
            pattern=r'^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$',
            min_length=36,
            max_length=36,
        )
    ]
):
    root: constr(
        pattern=r'^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$',
        min_length=36,
        max_length=36,
    )


class MaintenanceWindowTaskArn(RootModel[constr(min_length=1, max_length=1600)]):
    root: constr(min_length=1, max_length=1600)


class MaintenanceWindowTaskCutoffBehavior(Enum):
    CONTINUE_TASK = 'CONTINUE_TASK'
    CANCEL_TASK = 'CANCEL_TASK'


class MaintenanceWindowTaskId(
    RootModel[
        constr(
            pattern=r'^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$',
            min_length=36,
            max_length=36,
        )
    ]
):
    root: constr(
        pattern=r'^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$',
        min_length=36,
        max_length=36,
    )


class MaintenanceWindowTaskParameterName(
    RootModel[constr(min_length=1, max_length=255)]
):
    root: constr(min_length=1, max_length=255)


class MaintenanceWindowTaskParameterValue(RootModel[SecretStr]):
    root: SecretStr


class MaintenanceWindowTaskParameterValueList(
    RootModel[List[MaintenanceWindowTaskParameterValue]]
):
    root: List[MaintenanceWindowTaskParameterValue]


class MaintenanceWindowTaskPriority(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class MaintenanceWindowTaskTargetId(RootModel[constr(max_length=36)]):
    root: constr(max_length=36)


class MaintenanceWindowTaskType(Enum):
    RUN_COMMAND = 'RUN_COMMAND'
    AUTOMATION = 'AUTOMATION'
    STEP_FUNCTIONS = 'STEP_FUNCTIONS'
    LAMBDA = 'LAMBDA'


class MaintenanceWindowTimezone(RootModel[str]):
    root: str


class ManagedInstanceId(
    RootModel[
        constr(
            pattern=r'(^mi-[0-9a-f]{17}$)|(^eks_c:[0-9A-Za-z][A-Za-z0-9\-_]{0,99}_\w{17}$)',
            min_length=20,
            max_length=124,
        )
    ]
):
    root: constr(
        pattern=r'(^mi-[0-9a-f]{17}$)|(^eks_c:[0-9A-Za-z][A-Za-z0-9\-_]{0,99}_\w{17}$)',
        min_length=20,
        max_length=124,
    )


class MaxConcurrency(
    RootModel[
        constr(
            pattern=r'^([1-9][0-9]*|[1-9][0-9]%|[1-9]%|100%)$',
            min_length=1,
            max_length=7,
        )
    ]
):
    root: constr(
        pattern=r'^([1-9][0-9]*|[1-9][0-9]%|[1-9]%|100%)$', min_length=1, max_length=7
    )


class MaxDocumentSizeExceeded(RootModel[Any]):
    root: Any


class MaxErrors(
    RootModel[
        constr(
            pattern=r'^([1-9][0-9]*|[0]|[1-9][0-9]%|[0-9]%|100%)$',
            min_length=1,
            max_length=7,
        )
    ]
):
    root: constr(
        pattern=r'^([1-9][0-9]*|[0]|[1-9][0-9]%|[0-9]%|100%)$',
        min_length=1,
        max_length=7,
    )


class MaxResults(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class MaxResultsEC2Compatible(RootModel[conint(ge=5, le=50)]):
    root: conint(ge=5, le=50)


class MaxSessionDuration(
    RootModel[
        constr(
            pattern=r'^([1-9]|[1-9][0-9]|[1-9][0-9][0-9]|1[0-4][0-3][0-9]|1440)$',
            min_length=1,
            max_length=4,
        )
    ]
):
    root: constr(
        pattern=r'^([1-9]|[1-9][0-9]|[1-9][0-9][0-9]|1[0-4][0-3][0-9]|1440)$',
        min_length=1,
        max_length=4,
    )


class MetadataKey(
    RootModel[constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=256)]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=256)


class MetadataKeysToDeleteList(RootModel[List[MetadataKey]]):
    root: List[MetadataKey] = Field(..., max_length=10, min_length=1)


class MetadataValueString(RootModel[constr(min_length=1, max_length=4096)]):
    root: constr(min_length=1, max_length=4096)


class ModifyDocumentPermissionResponse(BaseModel):
    pass


class NextToken(RootModel[str]):
    root: str


class NotificationArn(RootModel[str]):
    root: str


class NotificationEvent(Enum):
    All = 'All'
    InProgress = 'InProgress'
    Success = 'Success'
    TimedOut = 'TimedOut'
    Cancelled = 'Cancelled'
    Failed = 'Failed'


class NotificationEventList(RootModel[List[NotificationEvent]]):
    root: List[NotificationEvent]


class NotificationType(Enum):
    Command = 'Command'
    Invocation = 'Invocation'


class OperatingSystem(Enum):
    WINDOWS = 'WINDOWS'
    AMAZON_LINUX = 'AMAZON_LINUX'
    AMAZON_LINUX_2 = 'AMAZON_LINUX_2'
    AMAZON_LINUX_2022 = 'AMAZON_LINUX_2022'
    UBUNTU = 'UBUNTU'
    REDHAT_ENTERPRISE_LINUX = 'REDHAT_ENTERPRISE_LINUX'
    SUSE = 'SUSE'
    CENTOS = 'CENTOS'
    ORACLE_LINUX = 'ORACLE_LINUX'
    DEBIAN = 'DEBIAN'
    MACOS = 'MACOS'
    RASPBIAN = 'RASPBIAN'
    ROCKY_LINUX = 'ROCKY_LINUX'
    ALMA_LINUX = 'ALMA_LINUX'
    AMAZON_LINUX_2023 = 'AMAZON_LINUX_2023'


class OpsAggregatorType(
    RootModel[constr(pattern=r'^(range|count|sum)', min_length=1, max_length=20)]
):
    root: constr(pattern=r'^(range|count|sum)', min_length=1, max_length=20)


class OpsAggregatorValue(RootModel[constr(min_length=0, max_length=2048)]):
    root: constr(min_length=0, max_length=2048)


class OpsAggregatorValueKey(RootModel[constr(min_length=1, max_length=32)]):
    root: constr(min_length=1, max_length=32)


class OpsAggregatorValueMap(RootModel[Optional[Dict[str, OpsAggregatorValue]]]):
    root: Optional[Dict[str, OpsAggregatorValue]] = None


class OpsDataAttributeName(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class OpsDataTypeName(
    RootModel[constr(pattern=r'^(AWS|Custom):.*$', min_length=1, max_length=100)]
):
    root: constr(pattern=r'^(AWS|Custom):.*$', min_length=1, max_length=100)


class OpsEntityId(RootModel[str]):
    root: str


class OpsEntityItemCaptureTime(
    RootModel[
        constr(
            pattern=r'^(20)[0-9][0-9]-(0[1-9]|1[012])-([12][0-9]|3[01]|0[1-9])(T)(2[0-3]|[0-1][0-9])(:[0-5][0-9])(:[0-5][0-9])(Z)$'
        )
    ]
):
    root: constr(
        pattern=r'^(20)[0-9][0-9]-(0[1-9]|1[012])-([12][0-9]|3[01]|0[1-9])(T)(2[0-3]|[0-1][0-9])(:[0-5][0-9])(:[0-5][0-9])(Z)$'
    )


class OpsEntityItemEntry(RootModel[Optional[Dict[str, AttributeValue]]]):
    root: Optional[Dict[str, AttributeValue]] = None


class OpsEntityItemEntryList(RootModel[List[OpsEntityItemEntry]]):
    root: List[OpsEntityItemEntry] = Field(..., max_length=10000, min_length=0)


class OpsEntityItemKey(RootModel[str]):
    root: str


class OpsFilterKey(RootModel[constr(min_length=1, max_length=200)]):
    root: constr(min_length=1, max_length=200)


class OpsFilterOperatorType(Enum):
    Equal = 'Equal'
    NotEqual = 'NotEqual'
    BeginWith = 'BeginWith'
    LessThan = 'LessThan'
    GreaterThan = 'GreaterThan'
    Exists = 'Exists'


class OpsFilterValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class OpsFilterValueList(RootModel[List[OpsFilterValue]]):
    root: List[OpsFilterValue] = Field(..., max_length=40, min_length=1)


class OpsItemAccessDeniedException(RootModel[Any]):
    root: Any


class OpsItemAccountId(RootModel[constr(pattern=r'^[0-9]{12}$')]):
    root: constr(pattern=r'^[0-9]{12}$')


class OpsItemAlreadyExistsException(RootModel[Any]):
    root: Any


class OpsItemArn(
    RootModel[
        constr(
            pattern=r'arn:(aws[a-zA-Z-]*)?:ssm:[a-z0-9-\.]{0,63}:[0-9]{12}:opsitem.*',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:(aws[a-zA-Z-]*)?:ssm:[a-z0-9-\.]{0,63}:[0-9]{12}:opsitem.*',
        min_length=20,
        max_length=2048,
    )


class OpsItemCategory(
    RootModel[constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=64)]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=64)


class OpsItemDataKey(
    RootModel[constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=128)]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=128)


class OpsItemDataType(Enum):
    SearchableString = 'SearchableString'
    String = 'String'


class OpsItemDataValueString(RootModel[constr(pattern=r'[\s\S]*\S[\s\S]*')]):
    root: constr(pattern=r'[\s\S]*\S[\s\S]*')


class OpsItemDescription(
    RootModel[constr(pattern=r'[\s\S]*\S[\s\S]*', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'[\s\S]*\S[\s\S]*', min_length=1, max_length=2048)


class OpsItemEventFilterKey(Enum):
    OpsItemId = 'OpsItemId'


class OpsItemEventFilterOperator(Enum):
    Equal = 'Equal'


class OpsItemEventFilterValue(
    RootModel[constr(pattern=r'^(oi)-[0-9a-f]{12}$', min_length=1, max_length=15)]
):
    root: constr(pattern=r'^(oi)-[0-9a-f]{12}$', min_length=1, max_length=15)


class OpsItemEventFilterValues(RootModel[List[OpsItemEventFilterValue]]):
    root: List[OpsItemEventFilterValue]


class OpsItemEventMaxResults(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class OpsItemFilterKey(Enum):
    Status = 'Status'
    CreatedBy = 'CreatedBy'
    Source = 'Source'
    Priority = 'Priority'
    Title = 'Title'
    OpsItemId = 'OpsItemId'
    CreatedTime = 'CreatedTime'
    LastModifiedTime = 'LastModifiedTime'
    ActualStartTime = 'ActualStartTime'
    ActualEndTime = 'ActualEndTime'
    PlannedStartTime = 'PlannedStartTime'
    PlannedEndTime = 'PlannedEndTime'
    OperationalData = 'OperationalData'
    OperationalDataKey = 'OperationalDataKey'
    OperationalDataValue = 'OperationalDataValue'
    ResourceId = 'ResourceId'
    AutomationId = 'AutomationId'
    Category = 'Category'
    Severity = 'Severity'
    OpsItemType = 'OpsItemType'
    ChangeRequestByRequesterArn = 'ChangeRequestByRequesterArn'
    ChangeRequestByRequesterName = 'ChangeRequestByRequesterName'
    ChangeRequestByApproverArn = 'ChangeRequestByApproverArn'
    ChangeRequestByApproverName = 'ChangeRequestByApproverName'
    ChangeRequestByTemplate = 'ChangeRequestByTemplate'
    ChangeRequestByTargetsResourceGroup = 'ChangeRequestByTargetsResourceGroup'
    InsightByType = 'InsightByType'
    AccountId = 'AccountId'


class OpsItemFilterOperator(Enum):
    Equal = 'Equal'
    Contains = 'Contains'
    GreaterThan = 'GreaterThan'
    LessThan = 'LessThan'


class OpsItemFilterValue(RootModel[str]):
    root: str


class OpsItemFilterValues(RootModel[List[OpsItemFilterValue]]):
    root: List[OpsItemFilterValue]


class OpsItemId(RootModel[constr(pattern=r'^(oi)-[0-9a-f]{12}$')]):
    root: constr(pattern=r'^(oi)-[0-9a-f]{12}$')


class OpsItemInvalidParameterException(RootModel[Any]):
    root: Any


class OpsItemLimitExceededException(RootModel[Any]):
    root: Any


class OpsItemMaxResults(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class OpsItemNotFoundException(RootModel[Any]):
    root: Any


class OpsItemPriority(RootModel[conint(ge=1, le=5)]):
    root: conint(ge=1, le=5)


class OpsItemRelatedItemAlreadyExistsException(RootModel[Any]):
    root: Any


class OpsItemRelatedItemAssociationId(RootModel[str]):
    root: str


class OpsItemRelatedItemAssociationNotFoundException(RootModel[Any]):
    root: Any


class OpsItemRelatedItemAssociationResourceType(RootModel[str]):
    root: str


class OpsItemRelatedItemAssociationResourceUri(RootModel[str]):
    root: str


class OpsItemRelatedItemAssociationType(RootModel[str]):
    root: str


class OpsItemRelatedItemsFilterKey(Enum):
    ResourceType = 'ResourceType'
    AssociationId = 'AssociationId'
    ResourceUri = 'ResourceUri'


class OpsItemRelatedItemsFilterOperator(Enum):
    Equal = 'Equal'


class OpsItemRelatedItemsFilterValue(RootModel[str]):
    root: str


class OpsItemRelatedItemsFilterValues(RootModel[List[OpsItemRelatedItemsFilterValue]]):
    root: List[OpsItemRelatedItemsFilterValue]


class OpsItemRelatedItemsMaxResults(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class OpsItemSeverity(
    RootModel[constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=64)]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=64)


class OpsItemSource(
    RootModel[constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=128)]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=128)


class OpsItemStatus(Enum):
    Open = 'Open'
    InProgress = 'InProgress'
    Resolved = 'Resolved'
    Pending = 'Pending'
    TimedOut = 'TimedOut'
    Cancelling = 'Cancelling'
    Cancelled = 'Cancelled'
    Failed = 'Failed'
    CompletedWithSuccess = 'CompletedWithSuccess'
    CompletedWithFailure = 'CompletedWithFailure'
    Scheduled = 'Scheduled'
    RunbookInProgress = 'RunbookInProgress'
    PendingChangeCalendarOverride = 'PendingChangeCalendarOverride'
    ChangeCalendarOverrideApproved = 'ChangeCalendarOverrideApproved'
    ChangeCalendarOverrideRejected = 'ChangeCalendarOverrideRejected'
    PendingApproval = 'PendingApproval'
    Approved = 'Approved'
    Rejected = 'Rejected'
    Closed = 'Closed'


class OpsItemTitle(
    RootModel[constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=1024)]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=1024)


class OpsItemType(RootModel[str]):
    root: str


class OpsMetadataAlreadyExistsException(RootModel[Any]):
    root: Any


class OpsMetadataArn(
    RootModel[
        constr(
            pattern=r'arn:(aws[a-zA-Z-]*)?:ssm:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:opsmetadata\/([a-zA-Z0-9-_\.\/]*)',
            min_length=1,
            max_length=1011,
        )
    ]
):
    root: constr(
        pattern=r'arn:(aws[a-zA-Z-]*)?:ssm:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:opsmetadata\/([a-zA-Z0-9-_\.\/]*)',
        min_length=1,
        max_length=1011,
    )


class OpsMetadataFilterKey(
    RootModel[constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=128)]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=128)


class OpsMetadataFilterValue(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class OpsMetadataFilterValueList(RootModel[List[OpsMetadataFilterValue]]):
    root: List[OpsMetadataFilterValue] = Field(..., max_length=10, min_length=1)


class OpsMetadataInvalidArgumentException(RootModel[Any]):
    root: Any


class OpsMetadataKeyLimitExceededException(RootModel[Any]):
    root: Any


class OpsMetadataLimitExceededException(RootModel[Any]):
    root: Any


class OpsMetadataNotFoundException(RootModel[Any]):
    root: Any


class OpsMetadataResourceId(
    RootModel[constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=1024)]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=1024)


class OpsMetadataTooManyUpdatesException(RootModel[Any]):
    root: Any


class OpsResultAttribute(BaseModel):
    TypeName: OpsDataTypeName


class OpsResultAttributeList(RootModel[List[OpsResultAttribute]]):
    root: List[OpsResultAttribute] = Field(..., min_length=1)


class OutputSourceId(RootModel[constr(min_length=36, max_length=36)]):
    root: constr(min_length=36, max_length=36)


class OutputSourceType(RootModel[str]):
    root: str


class OwnerInformation(RootModel[SecretStr]):
    root: SecretStr


class PSParameterName(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class PSParameterSelector(RootModel[constr(min_length=0, max_length=128)]):
    root: constr(min_length=0, max_length=128)


class PSParameterValue(RootModel[SecretStr]):
    root: SecretStr


class PSParameterVersion(RootModel[int]):
    root: int


class ParameterAlreadyExists(RootModel[Any]):
    root: Any


class ParameterDataType(RootModel[constr(min_length=0, max_length=128)]):
    root: constr(min_length=0, max_length=128)


class ParameterDescription(RootModel[constr(min_length=0, max_length=1024)]):
    root: constr(min_length=0, max_length=1024)


class ParameterKeyId(
    RootModel[constr(pattern=r'^([a-zA-Z0-9:/_-]+)$', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^([a-zA-Z0-9:/_-]+)$', min_length=1, max_length=256)


class ParameterLabel(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class ParameterLabelList(RootModel[List[ParameterLabel]]):
    root: List[ParameterLabel] = Field(..., max_length=10, min_length=1)


class ParameterLimitExceeded(RootModel[Any]):
    root: Any


class ParameterMaxVersionLimitExceeded(RootModel[Any]):
    root: Any


class ParameterName(RootModel[str]):
    root: str


class ParameterNameList(RootModel[List[PSParameterName]]):
    root: List[PSParameterName] = Field(..., max_length=10, min_length=1)


class ParameterNotFound(RootModel[Any]):
    root: Any


class ParameterPatternMismatchException(RootModel[Any]):
    root: Any


class ParameterPolicies(RootModel[constr(min_length=1, max_length=4096)]):
    root: constr(min_length=1, max_length=4096)


class ParameterStringFilterKey(
    RootModel[
        constr(
            pattern=r'tag:.+|Name|Type|KeyId|Path|Label|Tier|DataType',
            min_length=1,
            max_length=132,
        )
    ]
):
    root: constr(
        pattern=r'tag:.+|Name|Type|KeyId|Path|Label|Tier|DataType',
        min_length=1,
        max_length=132,
    )


class ParameterStringFilterValue(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class ParameterStringFilterValueList(RootModel[List[ParameterStringFilterValue]]):
    root: List[ParameterStringFilterValue] = Field(..., max_length=50, min_length=1)


class ParameterStringQueryOption(RootModel[constr(min_length=1, max_length=10)]):
    root: constr(min_length=1, max_length=10)


class ParameterTier(Enum):
    Standard = 'Standard'
    Advanced = 'Advanced'
    Intelligent_Tiering = 'Intelligent-Tiering'


class ParameterType(Enum):
    String = 'String'
    StringList = 'StringList'
    SecureString = 'SecureString'


class ParameterValue(RootModel[str]):
    root: str


class ParameterValueList(RootModel[List[ParameterValue]]):
    root: List[ParameterValue]


class ParameterVersionLabelLimitExceeded(RootModel[Any]):
    root: Any


class ParameterVersionNotFound(RootModel[Any]):
    root: Any


class Parameters(RootModel[Optional[Dict[str, ParameterValueList]]]):
    root: Optional[Dict[str, ParameterValueList]] = None


class ParametersFilterKey(Enum):
    Name = 'Name'
    Type = 'Type'
    KeyId = 'KeyId'


class ParametersFilterValue(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class ParametersFilterValueList(RootModel[List[ParametersFilterValue]]):
    root: List[ParametersFilterValue] = Field(..., max_length=50, min_length=1)


class PatchAction(Enum):
    ALLOW_AS_DEPENDENCY = 'ALLOW_AS_DEPENDENCY'
    BLOCK = 'BLOCK'


class PatchAdvisoryId(RootModel[str]):
    root: str


class PatchAdvisoryIdList(RootModel[List[PatchAdvisoryId]]):
    root: List[PatchAdvisoryId]


class PatchArch(RootModel[str]):
    root: str


class PatchBaselineIdentity(BaseModel):
    BaselineDescription_1: Optional[BaselineDescription] = Field(
        None, alias='BaselineDescription'
    )
    BaselineId_1: Optional[BaselineId] = Field(None, alias='BaselineId')
    BaselineName_1: Optional[BaselineName] = Field(None, alias='BaselineName')
    DefaultBaseline_1: Optional[DefaultBaseline] = Field(None, alias='DefaultBaseline')
    OperatingSystem_1: Optional[OperatingSystem] = Field(None, alias='OperatingSystem')


class PatchBaselineIdentityList(RootModel[List[PatchBaselineIdentity]]):
    root: List[PatchBaselineIdentity]


class PatchBaselineMaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class PatchBugzillaId(RootModel[str]):
    root: str


class PatchBugzillaIdList(RootModel[List[PatchBugzillaId]]):
    root: List[PatchBugzillaId]


class PatchCVEId(RootModel[str]):
    root: str


class PatchCVEIdList(RootModel[List[PatchCVEId]]):
    root: List[PatchCVEId]


class PatchCVEIds(RootModel[str]):
    root: str


class PatchClassification(RootModel[str]):
    root: str


class PatchComplianceDataState(Enum):
    INSTALLED = 'INSTALLED'
    INSTALLED_OTHER = 'INSTALLED_OTHER'
    INSTALLED_PENDING_REBOOT = 'INSTALLED_PENDING_REBOOT'
    INSTALLED_REJECTED = 'INSTALLED_REJECTED'
    MISSING = 'MISSING'
    NOT_APPLICABLE = 'NOT_APPLICABLE'
    FAILED = 'FAILED'


class PatchComplianceLevel(Enum):
    CRITICAL = 'CRITICAL'
    HIGH = 'HIGH'
    MEDIUM = 'MEDIUM'
    LOW = 'LOW'
    INFORMATIONAL = 'INFORMATIONAL'
    UNSPECIFIED = 'UNSPECIFIED'


class PatchComplianceMaxResults(RootModel[conint(ge=10, le=100)]):
    root: conint(ge=10, le=100)


class PatchContentUrl(RootModel[str]):
    root: str


class PatchCriticalNonCompliantCount(RootModel[int]):
    root: int


class PatchDeploymentStatus(Enum):
    APPROVED = 'APPROVED'
    PENDING_APPROVAL = 'PENDING_APPROVAL'
    EXPLICIT_APPROVED = 'EXPLICIT_APPROVED'
    EXPLICIT_REJECTED = 'EXPLICIT_REJECTED'


class PatchDescription(RootModel[str]):
    root: str


class PatchEpoch(RootModel[int]):
    root: int


class PatchFailedCount(RootModel[int]):
    root: int


class PatchFilterKey(Enum):
    ARCH = 'ARCH'
    ADVISORY_ID = 'ADVISORY_ID'
    BUGZILLA_ID = 'BUGZILLA_ID'
    PATCH_SET = 'PATCH_SET'
    PRODUCT = 'PRODUCT'
    PRODUCT_FAMILY = 'PRODUCT_FAMILY'
    CLASSIFICATION = 'CLASSIFICATION'
    CVE_ID = 'CVE_ID'
    EPOCH = 'EPOCH'
    MSRC_SEVERITY = 'MSRC_SEVERITY'
    NAME = 'NAME'
    PATCH_ID = 'PATCH_ID'
    SECTION = 'SECTION'
    PRIORITY = 'PRIORITY'
    REPOSITORY = 'REPOSITORY'
    RELEASE = 'RELEASE'
    SEVERITY = 'SEVERITY'
    SECURITY = 'SECURITY'
    VERSION = 'VERSION'


class PatchFilterValue(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class PatchFilterValueList(RootModel[List[PatchFilterValue]]):
    root: List[PatchFilterValue] = Field(..., max_length=20, min_length=1)


class PatchGroup(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=256
    )


class PatchGroupList(RootModel[List[PatchGroup]]):
    root: List[PatchGroup]


class PatchGroupPatchBaselineMapping(BaseModel):
    BaselineIdentity: Optional[PatchBaselineIdentity] = None
    PatchGroup_1: Optional[PatchGroup] = Field(None, alias='PatchGroup')


class PatchGroupPatchBaselineMappingList(
    RootModel[List[PatchGroupPatchBaselineMapping]]
):
    root: List[PatchGroupPatchBaselineMapping]


class PatchId(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class PatchIdList(RootModel[List[PatchId]]):
    root: List[PatchId] = Field(..., max_length=50, min_length=0)


class PatchInstalledCount(RootModel[int]):
    root: int


class PatchInstalledOtherCount(RootModel[int]):
    root: int


class PatchInstalledPendingRebootCount(RootModel[int]):
    root: int


class PatchInstalledRejectedCount(RootModel[int]):
    root: int


class PatchKbNumber(RootModel[str]):
    root: str


class PatchLanguage(RootModel[str]):
    root: str


class PatchMissingCount(RootModel[int]):
    root: int


class PatchMsrcNumber(RootModel[str]):
    root: str


class PatchMsrcSeverity(RootModel[str]):
    root: str


class PatchName(RootModel[str]):
    root: str


class PatchNotApplicableCount(RootModel[int]):
    root: int


class PatchOperationType(Enum):
    Scan = 'Scan'
    Install = 'Install'


class PatchOrchestratorFilterKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class PatchOrchestratorFilterValue(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class PatchOrchestratorFilterValues(RootModel[List[PatchOrchestratorFilterValue]]):
    root: List[PatchOrchestratorFilterValue]


class PatchOtherNonCompliantCount(RootModel[int]):
    root: int


class PatchProduct(RootModel[str]):
    root: str


class PatchProductFamily(RootModel[str]):
    root: str


class PatchProperty(Enum):
    PRODUCT = 'PRODUCT'
    PRODUCT_FAMILY = 'PRODUCT_FAMILY'
    CLASSIFICATION = 'CLASSIFICATION'
    MSRC_SEVERITY = 'MSRC_SEVERITY'
    PRIORITY = 'PRIORITY'
    SEVERITY = 'SEVERITY'


class PatchPropertyEntry(RootModel[Optional[Dict[str, AttributeValue]]]):
    root: Optional[Dict[str, AttributeValue]] = None


class PatchRelease(RootModel[str]):
    root: str


class PatchRepository(RootModel[str]):
    root: str


class PatchSecurityNonCompliantCount(RootModel[int]):
    root: int


class PatchSet(Enum):
    OS = 'OS'
    APPLICATION = 'APPLICATION'


class PatchSeverity(RootModel[str]):
    root: str


class PatchSourceConfiguration(RootModel[SecretStr]):
    root: SecretStr


class PatchSourceName(RootModel[constr(pattern=r'^[a-zA-Z0-9_\-.]{3,50}$')]):
    root: constr(pattern=r'^[a-zA-Z0-9_\-.]{3,50}$')


class PatchSourceProduct(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class PatchSourceProductList(RootModel[List[PatchSourceProduct]]):
    root: List[PatchSourceProduct] = Field(..., max_length=20, min_length=1)


class PatchStatus(BaseModel):
    ApprovalDate: Optional[DateTime] = None
    ComplianceLevel: Optional[PatchComplianceLevel] = None
    DeploymentStatus: Optional[PatchDeploymentStatus] = None


class PatchStringDateTime(RootModel[constr(min_length=1, max_length=10)]):
    root: constr(min_length=1, max_length=10)


class PatchTitle(RootModel[str]):
    root: str


class PatchUnreportedNotApplicableCount(RootModel[int]):
    root: int


class PatchVendor(RootModel[str]):
    root: str


class PatchVersion(RootModel[str]):
    root: str


class PingStatus(Enum):
    Online = 'Online'
    ConnectionLost = 'ConnectionLost'
    Inactive = 'Inactive'


class PlatformType(Enum):
    Windows = 'Windows'
    Linux = 'Linux'
    MacOS = 'MacOS'


class PlatformTypeList(RootModel[List[PlatformType]]):
    root: List[PlatformType]


class PoliciesLimitExceededException(RootModel[Any]):
    root: Any


class Policy(RootModel[constr(pattern=r'\S+')]):
    root: constr(pattern=r'\S+')


class PolicyHash(RootModel[str]):
    root: str


class PolicyId(RootModel[str]):
    root: str


class Product(RootModel[str]):
    root: str


class ProgressCounters(BaseModel):
    CancelledSteps: Optional[Integer] = None
    FailedSteps: Optional[Integer] = None
    SuccessSteps: Optional[Integer] = None
    TimedOutSteps: Optional[Integer] = None
    TotalSteps: Optional[Integer] = None


class PutComplianceItemsResult(BaseModel):
    pass


class PutInventoryMessage(RootModel[str]):
    root: str


class PutInventoryResult(BaseModel):
    Message: Optional[PutInventoryMessage] = None


class PutParameterResult(BaseModel):
    Tier: Optional[ParameterTier] = None
    Version: Optional[PSParameterVersion] = None


class PutResourcePolicyResponse(BaseModel):
    PolicyHash_1: Optional[PolicyHash] = Field(None, alias='PolicyHash')
    PolicyId_1: Optional[PolicyId] = Field(None, alias='PolicyId')


class RebootOption(Enum):
    RebootIfNeeded = 'RebootIfNeeded'
    NoReboot = 'NoReboot'


class Region(RootModel[str]):
    root: str


class Regions(RootModel[List[Region]]):
    root: List[Region] = Field(..., max_length=50, min_length=1)


class RegisterDefaultPatchBaselineRequest(BaseModel):
    BaselineId_1: BaselineId = Field(..., alias='BaselineId')


class RegisterDefaultPatchBaselineResult(BaseModel):
    BaselineId_1: Optional[BaselineId] = Field(None, alias='BaselineId')


class RegisterPatchBaselineForPatchGroupRequest(BaseModel):
    BaselineId_1: BaselineId = Field(..., alias='BaselineId')
    PatchGroup_1: PatchGroup = Field(..., alias='PatchGroup')


class RegisterPatchBaselineForPatchGroupResult(BaseModel):
    BaselineId_1: Optional[BaselineId] = Field(None, alias='BaselineId')
    PatchGroup_1: Optional[PatchGroup] = Field(None, alias='PatchGroup')


class RegisterTargetWithMaintenanceWindowResult(BaseModel):
    WindowTargetId: Optional[MaintenanceWindowTargetId] = None


class RegisterTaskWithMaintenanceWindowResult(BaseModel):
    WindowTaskId: Optional[MaintenanceWindowTaskId] = None


class RegistrationLimit(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class RegistrationMetadataKey(
    RootModel[constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=128)]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=128)


class RegistrationMetadataValue(
    RootModel[constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=2048)]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=2048)


class RegistrationsCount(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class RemainingCount(RootModel[int]):
    root: int


class RemoveTagsFromResourceResult(BaseModel):
    pass


class RequireType(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_\-.]{1,128}$', max_length=128)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_\-.]{1,128}$', max_length=128)


class ResourceArnString(RootModel[constr(min_length=20, max_length=2048)]):
    root: constr(min_length=20, max_length=2048)


class ResourceCount(RootModel[int]):
    root: int


class ResourceCountByStatus(RootModel[str]):
    root: str


class ResourceDataSyncAWSKMSKeyARN(
    RootModel[constr(pattern=r'arn:.*', min_length=1, max_length=512)]
):
    root: constr(pattern=r'arn:.*', min_length=1, max_length=512)


class ResourceDataSyncAlreadyExistsException(RootModel[Any]):
    root: Any


class ResourceDataSyncConflictException(RootModel[Any]):
    root: Any


class ResourceDataSyncCountExceededException(RootModel[Any]):
    root: Any


class ResourceDataSyncCreatedTime(RootModel[datetime]):
    root: datetime


class ResourceDataSyncDestinationDataSharingType(
    RootModel[constr(min_length=1, max_length=64)]
):
    root: constr(min_length=1, max_length=64)


class ResourceDataSyncEnableAllOpsDataSources(RootModel[bool]):
    root: bool


class ResourceDataSyncIncludeFutureRegions(RootModel[bool]):
    root: bool


class ResourceDataSyncInvalidConfigurationException(RootModel[Any]):
    root: Any


class ResourceDataSyncLastModifiedTime(RootModel[datetime]):
    root: datetime


class ResourceDataSyncName(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class ResourceDataSyncNotFoundException(RootModel[Any]):
    root: Any


class ResourceDataSyncOrganizationSourceType(
    RootModel[constr(min_length=1, max_length=64)]
):
    root: constr(min_length=1, max_length=64)


class ResourceDataSyncOrganizationalUnitId(
    RootModel[
        constr(
            pattern=r'^ou-[0-9a-z]{4,32}-[a-z0-9]{8,32}$', min_length=1, max_length=128
        )
    ]
):
    root: constr(
        pattern=r'^ou-[0-9a-z]{4,32}-[a-z0-9]{8,32}$', min_length=1, max_length=128
    )


class ResourceDataSyncS3BucketName(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class ResourceDataSyncS3Format(Enum):
    JsonSerDe = 'JsonSerDe'


class ResourceDataSyncS3Prefix(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class ResourceDataSyncS3Region(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class ResourceDataSyncSourceRegion(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class ResourceDataSyncSourceRegionList(RootModel[List[ResourceDataSyncSourceRegion]]):
    root: List[ResourceDataSyncSourceRegion]


class ResourceDataSyncSourceType(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class ResourceDataSyncState(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class ResourceDataSyncType(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class ResourceId(RootModel[str]):
    root: str


class ResourceInUseException(RootModel[Any]):
    root: Any


class ResourceLimitExceededException(RootModel[Any]):
    root: Any


class ResourcePolicyConflictException(RootModel[Any]):
    root: Any


class ResourcePolicyInvalidParameterException(RootModel[Any]):
    root: Any


class ResourcePolicyLimitExceededException(RootModel[Any]):
    root: Any


class ResourcePolicyMaxResults(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class ResourceType(Enum):
    ManagedInstance = 'ManagedInstance'
    Document = 'Document'
    EC2Instance = 'EC2Instance'


class ResourceTypeForTagging(Enum):
    Document = 'Document'
    ManagedInstance = 'ManagedInstance'
    MaintenanceWindow = 'MaintenanceWindow'
    Parameter = 'Parameter'
    PatchBaseline = 'PatchBaseline'
    OpsItem = 'OpsItem'
    OpsMetadata = 'OpsMetadata'
    Automation = 'Automation'
    Association = 'Association'


class ResponseCode(RootModel[int]):
    root: int


class ResultAttribute(BaseModel):
    TypeName: InventoryItemTypeName


class ResultAttributeList(RootModel[List[ResultAttribute]]):
    root: List[ResultAttribute] = Field(..., max_length=1, min_length=1)


class ReviewStatus(Enum):
    APPROVED = 'APPROVED'
    NOT_REVIEWED = 'NOT_REVIEWED'
    PENDING = 'PENDING'
    REJECTED = 'REJECTED'


class Reviewer(RootModel[constr(pattern=r'^[a-zA-Z0-9_\-.]{1,128}$', max_length=50)]):
    root: constr(pattern=r'^[a-zA-Z0-9_\-.]{1,128}$', max_length=50)


class S3BucketName(RootModel[constr(min_length=3, max_length=63)]):
    root: constr(min_length=3, max_length=63)


class S3KeyPrefix(RootModel[constr(max_length=500)]):
    root: constr(max_length=500)


class S3Region(RootModel[constr(min_length=3, max_length=20)]):
    root: constr(min_length=3, max_length=20)


class ScheduleExpression(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class ScheduleOffset(RootModel[conint(ge=1, le=6)]):
    root: conint(ge=1, le=6)


class ScheduledWindowExecution(BaseModel):
    ExecutionTime: Optional[MaintenanceWindowStringDateTime] = None
    Name: Optional[MaintenanceWindowName] = None
    WindowId: Optional[MaintenanceWindowId] = None


class ScheduledWindowExecutionList(RootModel[List[ScheduledWindowExecution]]):
    root: List[ScheduledWindowExecution]


class SendAutomationSignalResult(BaseModel):
    pass


class ServiceRole(RootModel[str]):
    root: str


class ServiceSettingId(RootModel[constr(min_length=1, max_length=1000)]):
    root: constr(min_length=1, max_length=1000)


class ServiceSettingNotFound(RootModel[Any]):
    root: Any


class ServiceSettingValue(RootModel[constr(min_length=1, max_length=4096)]):
    root: constr(min_length=1, max_length=4096)


class SessionDetails(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class SessionFilterKey(Enum):
    InvokedAfter = 'InvokedAfter'
    InvokedBefore = 'InvokedBefore'
    Target = 'Target'
    Owner = 'Owner'
    Status = 'Status'
    SessionId = 'SessionId'


class SessionFilterValue(RootModel[constr(min_length=1, max_length=400)]):
    root: constr(min_length=1, max_length=400)


class SessionId(RootModel[constr(min_length=1, max_length=96)]):
    root: constr(min_length=1, max_length=96)


class SessionManagerCloudWatchOutputUrl(
    RootModel[constr(min_length=1, max_length=2083)]
):
    root: constr(min_length=1, max_length=2083)


class SessionManagerParameterName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class SessionManagerParameterValue(RootModel[constr(min_length=1, max_length=65535)]):
    root: constr(min_length=1, max_length=65535)


class SessionManagerParameterValueList(RootModel[List[SessionManagerParameterValue]]):
    root: List[SessionManagerParameterValue]


class SessionManagerParameters(
    RootModel[Optional[Dict[str, SessionManagerParameterValueList]]]
):
    root: Optional[Dict[str, SessionManagerParameterValueList]] = None


class SessionManagerS3OutputUrl(RootModel[constr(min_length=1, max_length=2083)]):
    root: constr(min_length=1, max_length=2083)


class SessionMaxResults(RootModel[conint(ge=1, le=200)]):
    root: conint(ge=1, le=200)


class SessionOwner(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class SessionReason(
    RootModel[constr(pattern=r'^.{1,256}$', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^.{1,256}$', min_length=1, max_length=256)


class SessionState(Enum):
    Active = 'Active'
    History = 'History'


class SessionStatus(Enum):
    Connected = 'Connected'
    Connecting = 'Connecting'
    Disconnected = 'Disconnected'
    Terminated = 'Terminated'
    Terminating = 'Terminating'
    Failed = 'Failed'


class SessionTarget(RootModel[constr(min_length=1, max_length=400)]):
    root: constr(min_length=1, max_length=400)


class SeveritySummary(BaseModel):
    CriticalCount: Optional[ComplianceSummaryCount] = None
    HighCount: Optional[ComplianceSummaryCount] = None
    InformationalCount: Optional[ComplianceSummaryCount] = None
    LowCount: Optional[ComplianceSummaryCount] = None
    MediumCount: Optional[ComplianceSummaryCount] = None
    UnspecifiedCount: Optional[ComplianceSummaryCount] = None


class SharedDocumentVersion(
    RootModel[constr(pattern=r'([$]LATEST|[$]DEFAULT|[$]ALL)', max_length=8)]
):
    root: constr(pattern=r'([$]LATEST|[$]DEFAULT|[$]ALL)', max_length=8) = Field(
        ...,
        description='The document version shared with other Amazon Web Services accounts. You can share <code>Latest</code>, <code>Default</code> or <code>All versions</code>.',
    )


class SignalType(Enum):
    Approve = 'Approve'
    Reject = 'Reject'
    StartStep = 'StartStep'
    StopStep = 'StopStep'
    Resume = 'Resume'


class SnapshotDownloadUrl(RootModel[str]):
    root: str


class SnapshotId(
    RootModel[
        constr(
            pattern=r'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
            min_length=36,
            max_length=36,
        )
    ]
):
    root: constr(
        pattern=r'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        min_length=36,
        max_length=36,
    )


class SourceId(
    RootModel[constr(pattern=r'^[a-zA-Z0-9:_-]*$', min_length=0, max_length=128)]
):
    root: constr(pattern=r'^[a-zA-Z0-9:_-]*$', min_length=0, max_length=128)


class SourceType(Enum):
    AWS__EC2__Instance = 'AWS::EC2::Instance'
    AWS__IoT__Thing = 'AWS::IoT::Thing'
    AWS__SSM__ManagedInstance = 'AWS::SSM::ManagedInstance'


class StandardErrorContent(RootModel[constr(max_length=8000)]):
    root: constr(max_length=8000)


class StandardOutputContent(RootModel[constr(max_length=24000)]):
    root: constr(max_length=24000)


class StartAssociationsOnceRequest(BaseModel):
    AssociationIds: AssociationIdList


class StartAssociationsOnceResult(BaseModel):
    pass


class StartAutomationExecutionResult(BaseModel):
    AutomationExecutionId_1: Optional[AutomationExecutionId] = Field(
        None, alias='AutomationExecutionId'
    )


class StartChangeRequestExecutionResult(BaseModel):
    AutomationExecutionId_1: Optional[AutomationExecutionId] = Field(
        None, alias='AutomationExecutionId'
    )


class StartSessionRequest(BaseModel):
    DocumentName: Optional[DocumentARN] = None
    Parameters: Optional[SessionManagerParameters] = None
    Reason: Optional[SessionReason] = None
    Target: SessionTarget


class StatusAdditionalInfo(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class StatusDetails(RootModel[constr(min_length=0, max_length=100)]):
    root: constr(min_length=0, max_length=100)


class StatusMessage(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class StatusName(RootModel[str]):
    root: str


class StatusUnchanged(RootModel[Any]):
    root: Any


class StepExecutionFilterKey(Enum):
    StartTimeBefore = 'StartTimeBefore'
    StartTimeAfter = 'StartTimeAfter'
    StepExecutionStatus = 'StepExecutionStatus'
    StepExecutionId = 'StepExecutionId'
    StepName = 'StepName'
    Action = 'Action'


class StepExecutionFilterValue(RootModel[constr(min_length=1, max_length=150)]):
    root: constr(min_length=1, max_length=150)


class StepExecutionFilterValueList(RootModel[List[StepExecutionFilterValue]]):
    root: List[StepExecutionFilterValue] = Field(..., max_length=10, min_length=1)


class StopAutomationExecutionResult(BaseModel):
    pass


class StopType(Enum):
    Complete = 'Complete'
    Cancel = 'Cancel'


class StreamUrl(RootModel[str]):
    root: str


class String(RootModel[str]):
    root: str


class StringDateTime(
    RootModel[
        constr(
            pattern=r'^([\-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)([\.,]\d(?!:))?)?(\17[0-5]\d([\.,]\d)?)?([zZ]|([\-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$'
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'^([\-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)([\.,]\d(?!:))?)?(\17[0-5]\d([\.,]\d)?)?([zZ]|([\-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$'
    )


class StringList(RootModel[List[String]]):
    root: List[String]


class SubTypeCountLimitExceededException(RootModel[Any]):
    root: Any


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class TagValue(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256
    )


class TargetCount(RootModel[int]):
    root: int


class TargetInUseException(RootModel[Any]):
    root: Any


class TargetKey(
    RootModel[
        constr(
            pattern=r'^[\p{L}\p{Z}\p{N}_.:/=\-@]*$|resource-groups:ResourceTypeFilters|resource-groups:Name',
            min_length=1,
            max_length=163,
        )
    ]
):
    root: constr(
        pattern=r'^[\p{L}\p{Z}\p{N}_.:/=\-@]*$|resource-groups:ResourceTypeFilters|resource-groups:Name',
        min_length=1,
        max_length=163,
    )


class TargetMapKey(RootModel[constr(min_length=1, max_length=50)]):
    root: constr(min_length=1, max_length=50)


class TargetMapValue(RootModel[constr(min_length=1, max_length=50)]):
    root: constr(min_length=1, max_length=50)


class TargetMapValueList(RootModel[List[TargetMapValue]]):
    root: List[TargetMapValue] = Field(..., max_length=25, min_length=0)


class TargetNotConnected(RootModel[Any]):
    root: Any


class TargetParameterList(RootModel[List[ParameterValue]]):
    root: List[ParameterValue]


class TargetType(RootModel[constr(pattern=r'^\/[\w\.\-\:\/]*$', max_length=200)]):
    root: constr(pattern=r'^\/[\w\.\-\:\/]*$', max_length=200)


class TargetValue(RootModel[str]):
    root: str


class TargetValues(RootModel[List[TargetValue]]):
    root: List[TargetValue] = Field(..., max_length=50, min_length=0)


class TerminateSessionRequest(BaseModel):
    SessionId_1: SessionId = Field(..., alias='SessionId')


class TerminateSessionResponse(BaseModel):
    SessionId_1: Optional[SessionId] = Field(None, alias='SessionId')


class TimeoutSeconds(RootModel[conint(ge=30, le=2592000)]):
    root: conint(ge=30, le=2592000)


class TokenValue(RootModel[constr(min_length=0, max_length=300)]):
    root: constr(min_length=0, max_length=300)


class TooManyTagsError(RootModel[Any]):
    root: Any


class TooManyUpdates(RootModel[Any]):
    root: Any


class TotalCount(RootModel[int]):
    root: int


class TotalSizeLimitExceededException(RootModel[Any]):
    root: Any


class UUID(
    RootModel[
        constr(pattern=r'[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}')
    ]
):
    root: constr(
        pattern=r'[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}'
    )


class UnlabelParameterVersionRequest(BaseModel):
    Labels: ParameterLabelList
    Name: PSParameterName
    ParameterVersion: PSParameterVersion


class UnlabelParameterVersionResult(BaseModel):
    InvalidLabels: Optional[ParameterLabelList] = None
    RemovedLabels: Optional[ParameterLabelList] = None


class UnsupportedCalendarException(RootModel[Any]):
    root: Any


class UnsupportedFeatureRequiredException(RootModel[Any]):
    root: Any


class UnsupportedInventoryItemContextException(RootModel[Any]):
    root: Any


class UnsupportedInventorySchemaVersionException(RootModel[Any]):
    root: Any


class UnsupportedOperatingSystem(RootModel[Any]):
    root: Any


class UnsupportedParameterType(RootModel[Any]):
    root: Any


class UnsupportedPlatformType(RootModel[Any]):
    root: Any


class UpdateDocumentDefaultVersionRequest(BaseModel):
    DocumentVersion: DocumentVersionNumber
    Name: DocumentName


class UpdateDocumentMetadataResponse(BaseModel):
    pass


class UpdateMaintenanceWindowRequest(BaseModel):
    AllowUnassociatedTargets: Optional[MaintenanceWindowAllowUnassociatedTargets] = None
    Cutoff: Optional[MaintenanceWindowCutoff] = None
    Description: Optional[MaintenanceWindowDescription] = None
    Duration: Optional[MaintenanceWindowDurationHours] = None
    Enabled: Optional[MaintenanceWindowEnabled] = None
    EndDate: Optional[MaintenanceWindowStringDateTime] = None
    Name: Optional[MaintenanceWindowName] = None
    Replace: Optional[Boolean] = None
    Schedule: Optional[MaintenanceWindowSchedule] = None
    ScheduleOffset: Optional[MaintenanceWindowOffset] = None
    ScheduleTimezone: Optional[MaintenanceWindowTimezone] = None
    StartDate: Optional[MaintenanceWindowStringDateTime] = None
    WindowId: MaintenanceWindowId


class UpdateMaintenanceWindowResult(BaseModel):
    AllowUnassociatedTargets: Optional[MaintenanceWindowAllowUnassociatedTargets] = None
    Cutoff: Optional[MaintenanceWindowCutoff] = None
    Description: Optional[MaintenanceWindowDescription] = None
    Duration: Optional[MaintenanceWindowDurationHours] = None
    Enabled: Optional[MaintenanceWindowEnabled] = None
    EndDate: Optional[MaintenanceWindowStringDateTime] = None
    Name: Optional[MaintenanceWindowName] = None
    Schedule: Optional[MaintenanceWindowSchedule] = None
    ScheduleOffset: Optional[MaintenanceWindowOffset] = None
    ScheduleTimezone: Optional[MaintenanceWindowTimezone] = None
    StartDate: Optional[MaintenanceWindowStringDateTime] = None
    WindowId: Optional[MaintenanceWindowId] = None


class UpdateManagedInstanceRoleRequest(BaseModel):
    IamRole_1: IamRole = Field(..., alias='IamRole')
    InstanceId: ManagedInstanceId


class UpdateManagedInstanceRoleResult(BaseModel):
    pass


class UpdateOpsItemResponse(BaseModel):
    pass


class UpdateOpsMetadataResult(BaseModel):
    OpsMetadataArn_1: Optional[OpsMetadataArn] = Field(None, alias='OpsMetadataArn')


class UpdateResourceDataSyncResult(BaseModel):
    pass


class UpdateServiceSettingRequest(BaseModel):
    SettingId: ServiceSettingId
    SettingValue: ServiceSettingValue


class UpdateServiceSettingResult(BaseModel):
    pass


class Url(RootModel[str]):
    root: str


class ValidNextStep(RootModel[constr(min_length=1, max_length=65535)]):
    root: constr(min_length=1, max_length=65535)


class ValidNextStepList(RootModel[List[ValidNextStep]]):
    root: List[ValidNextStep]


class Version(RootModel[constr(pattern=r'^[0-9]{1,6}(\.[0-9]{1,6}){2,3}$')]):
    root: constr(pattern=r'^[0-9]{1,6}(\.[0-9]{1,6}){2,3}$')


class XAmzTarget(Enum):
    AmazonSSM_AddTagsToResource = 'AmazonSSM.AddTagsToResource'


class XAmzTarget1(Enum):
    AmazonSSM_AssociateOpsItemRelatedItem = 'AmazonSSM.AssociateOpsItemRelatedItem'


class XAmzTarget2(Enum):
    AmazonSSM_CancelCommand = 'AmazonSSM.CancelCommand'


class XAmzTarget3(Enum):
    AmazonSSM_CancelMaintenanceWindowExecution = (
        'AmazonSSM.CancelMaintenanceWindowExecution'
    )


class XAmzTarget4(Enum):
    AmazonSSM_CreateActivation = 'AmazonSSM.CreateActivation'


class XAmzTarget5(Enum):
    AmazonSSM_CreateAssociation = 'AmazonSSM.CreateAssociation'


class XAmzTarget6(Enum):
    AmazonSSM_CreateAssociationBatch = 'AmazonSSM.CreateAssociationBatch'


class XAmzTarget7(Enum):
    AmazonSSM_CreateDocument = 'AmazonSSM.CreateDocument'


class XAmzTarget8(Enum):
    AmazonSSM_CreateMaintenanceWindow = 'AmazonSSM.CreateMaintenanceWindow'


class XAmzTarget9(Enum):
    AmazonSSM_CreateOpsItem = 'AmazonSSM.CreateOpsItem'


class XAmzTarget10(Enum):
    AmazonSSM_CreateOpsMetadata = 'AmazonSSM.CreateOpsMetadata'


class XAmzTarget11(Enum):
    AmazonSSM_CreatePatchBaseline = 'AmazonSSM.CreatePatchBaseline'


class XAmzTarget12(Enum):
    AmazonSSM_CreateResourceDataSync = 'AmazonSSM.CreateResourceDataSync'


class XAmzTarget13(Enum):
    AmazonSSM_DeleteActivation = 'AmazonSSM.DeleteActivation'


class XAmzTarget14(Enum):
    AmazonSSM_DeleteAssociation = 'AmazonSSM.DeleteAssociation'


class XAmzTarget15(Enum):
    AmazonSSM_DeleteDocument = 'AmazonSSM.DeleteDocument'


class XAmzTarget16(Enum):
    AmazonSSM_DeleteInventory = 'AmazonSSM.DeleteInventory'


class XAmzTarget17(Enum):
    AmazonSSM_DeleteMaintenanceWindow = 'AmazonSSM.DeleteMaintenanceWindow'


class XAmzTarget18(Enum):
    AmazonSSM_DeleteOpsMetadata = 'AmazonSSM.DeleteOpsMetadata'


class XAmzTarget19(Enum):
    AmazonSSM_DeleteParameter = 'AmazonSSM.DeleteParameter'


class XAmzTarget20(Enum):
    AmazonSSM_DeleteParameters = 'AmazonSSM.DeleteParameters'


class XAmzTarget21(Enum):
    AmazonSSM_DeletePatchBaseline = 'AmazonSSM.DeletePatchBaseline'


class XAmzTarget22(Enum):
    AmazonSSM_DeleteResourceDataSync = 'AmazonSSM.DeleteResourceDataSync'


class XAmzTarget23(Enum):
    AmazonSSM_DeleteResourcePolicy = 'AmazonSSM.DeleteResourcePolicy'


class XAmzTarget24(Enum):
    AmazonSSM_DeregisterManagedInstance = 'AmazonSSM.DeregisterManagedInstance'


class XAmzTarget25(Enum):
    AmazonSSM_DeregisterPatchBaselineForPatchGroup = (
        'AmazonSSM.DeregisterPatchBaselineForPatchGroup'
    )


class XAmzTarget26(Enum):
    AmazonSSM_DeregisterTargetFromMaintenanceWindow = (
        'AmazonSSM.DeregisterTargetFromMaintenanceWindow'
    )


class XAmzTarget27(Enum):
    AmazonSSM_DeregisterTaskFromMaintenanceWindow = (
        'AmazonSSM.DeregisterTaskFromMaintenanceWindow'
    )


class XAmzTarget28(Enum):
    AmazonSSM_DescribeActivations = 'AmazonSSM.DescribeActivations'


class XAmzTarget29(Enum):
    AmazonSSM_DescribeAssociation = 'AmazonSSM.DescribeAssociation'


class XAmzTarget30(Enum):
    AmazonSSM_DescribeAssociationExecutionTargets = (
        'AmazonSSM.DescribeAssociationExecutionTargets'
    )


class XAmzTarget31(Enum):
    AmazonSSM_DescribeAssociationExecutions = 'AmazonSSM.DescribeAssociationExecutions'


class XAmzTarget32(Enum):
    AmazonSSM_DescribeAutomationExecutions = 'AmazonSSM.DescribeAutomationExecutions'


class XAmzTarget33(Enum):
    AmazonSSM_DescribeAutomationStepExecutions = (
        'AmazonSSM.DescribeAutomationStepExecutions'
    )


class XAmzTarget34(Enum):
    AmazonSSM_DescribeAvailablePatches = 'AmazonSSM.DescribeAvailablePatches'


class XAmzTarget35(Enum):
    AmazonSSM_DescribeDocument = 'AmazonSSM.DescribeDocument'


class XAmzTarget36(Enum):
    AmazonSSM_DescribeDocumentPermission = 'AmazonSSM.DescribeDocumentPermission'


class XAmzTarget37(Enum):
    AmazonSSM_DescribeEffectiveInstanceAssociations = (
        'AmazonSSM.DescribeEffectiveInstanceAssociations'
    )


class XAmzTarget38(Enum):
    AmazonSSM_DescribeEffectivePatchesForPatchBaseline = (
        'AmazonSSM.DescribeEffectivePatchesForPatchBaseline'
    )


class XAmzTarget39(Enum):
    AmazonSSM_DescribeInstanceAssociationsStatus = (
        'AmazonSSM.DescribeInstanceAssociationsStatus'
    )


class XAmzTarget40(Enum):
    AmazonSSM_DescribeInstanceInformation = 'AmazonSSM.DescribeInstanceInformation'


class XAmzTarget41(Enum):
    AmazonSSM_DescribeInstancePatchStates = 'AmazonSSM.DescribeInstancePatchStates'


class XAmzTarget42(Enum):
    AmazonSSM_DescribeInstancePatchStatesForPatchGroup = (
        'AmazonSSM.DescribeInstancePatchStatesForPatchGroup'
    )


class XAmzTarget43(Enum):
    AmazonSSM_DescribeInstancePatches = 'AmazonSSM.DescribeInstancePatches'


class XAmzTarget44(Enum):
    AmazonSSM_DescribeInventoryDeletions = 'AmazonSSM.DescribeInventoryDeletions'


class XAmzTarget45(Enum):
    AmazonSSM_DescribeMaintenanceWindowExecutionTaskInvocations = (
        'AmazonSSM.DescribeMaintenanceWindowExecutionTaskInvocations'
    )


class XAmzTarget46(Enum):
    AmazonSSM_DescribeMaintenanceWindowExecutionTasks = (
        'AmazonSSM.DescribeMaintenanceWindowExecutionTasks'
    )


class XAmzTarget47(Enum):
    AmazonSSM_DescribeMaintenanceWindowExecutions = (
        'AmazonSSM.DescribeMaintenanceWindowExecutions'
    )


class XAmzTarget48(Enum):
    AmazonSSM_DescribeMaintenanceWindowSchedule = (
        'AmazonSSM.DescribeMaintenanceWindowSchedule'
    )


class XAmzTarget49(Enum):
    AmazonSSM_DescribeMaintenanceWindowTargets = (
        'AmazonSSM.DescribeMaintenanceWindowTargets'
    )


class XAmzTarget50(Enum):
    AmazonSSM_DescribeMaintenanceWindowTasks = (
        'AmazonSSM.DescribeMaintenanceWindowTasks'
    )


class XAmzTarget51(Enum):
    AmazonSSM_DescribeMaintenanceWindows = 'AmazonSSM.DescribeMaintenanceWindows'


class XAmzTarget52(Enum):
    AmazonSSM_DescribeMaintenanceWindowsForTarget = (
        'AmazonSSM.DescribeMaintenanceWindowsForTarget'
    )


class XAmzTarget53(Enum):
    AmazonSSM_DescribeOpsItems = 'AmazonSSM.DescribeOpsItems'


class XAmzTarget54(Enum):
    AmazonSSM_DescribeParameters = 'AmazonSSM.DescribeParameters'


class XAmzTarget55(Enum):
    AmazonSSM_DescribePatchBaselines = 'AmazonSSM.DescribePatchBaselines'


class XAmzTarget56(Enum):
    AmazonSSM_DescribePatchGroupState = 'AmazonSSM.DescribePatchGroupState'


class XAmzTarget57(Enum):
    AmazonSSM_DescribePatchGroups = 'AmazonSSM.DescribePatchGroups'


class XAmzTarget58(Enum):
    AmazonSSM_DescribePatchProperties = 'AmazonSSM.DescribePatchProperties'


class XAmzTarget59(Enum):
    AmazonSSM_DescribeSessions = 'AmazonSSM.DescribeSessions'


class XAmzTarget60(Enum):
    AmazonSSM_DisassociateOpsItemRelatedItem = (
        'AmazonSSM.DisassociateOpsItemRelatedItem'
    )


class XAmzTarget61(Enum):
    AmazonSSM_GetAutomationExecution = 'AmazonSSM.GetAutomationExecution'


class XAmzTarget62(Enum):
    AmazonSSM_GetCalendarState = 'AmazonSSM.GetCalendarState'


class XAmzTarget63(Enum):
    AmazonSSM_GetCommandInvocation = 'AmazonSSM.GetCommandInvocation'


class XAmzTarget64(Enum):
    AmazonSSM_GetConnectionStatus = 'AmazonSSM.GetConnectionStatus'


class XAmzTarget65(Enum):
    AmazonSSM_GetDefaultPatchBaseline = 'AmazonSSM.GetDefaultPatchBaseline'


class XAmzTarget66(Enum):
    AmazonSSM_GetDeployablePatchSnapshotForInstance = (
        'AmazonSSM.GetDeployablePatchSnapshotForInstance'
    )


class XAmzTarget67(Enum):
    AmazonSSM_GetDocument = 'AmazonSSM.GetDocument'


class XAmzTarget68(Enum):
    AmazonSSM_GetInventory = 'AmazonSSM.GetInventory'


class XAmzTarget69(Enum):
    AmazonSSM_GetInventorySchema = 'AmazonSSM.GetInventorySchema'


class XAmzTarget70(Enum):
    AmazonSSM_GetMaintenanceWindow = 'AmazonSSM.GetMaintenanceWindow'


class XAmzTarget71(Enum):
    AmazonSSM_GetMaintenanceWindowExecution = 'AmazonSSM.GetMaintenanceWindowExecution'


class XAmzTarget72(Enum):
    AmazonSSM_GetMaintenanceWindowExecutionTask = (
        'AmazonSSM.GetMaintenanceWindowExecutionTask'
    )


class XAmzTarget73(Enum):
    AmazonSSM_GetMaintenanceWindowExecutionTaskInvocation = (
        'AmazonSSM.GetMaintenanceWindowExecutionTaskInvocation'
    )


class XAmzTarget74(Enum):
    AmazonSSM_GetMaintenanceWindowTask = 'AmazonSSM.GetMaintenanceWindowTask'


class XAmzTarget75(Enum):
    AmazonSSM_GetOpsItem = 'AmazonSSM.GetOpsItem'


class XAmzTarget76(Enum):
    AmazonSSM_GetOpsMetadata = 'AmazonSSM.GetOpsMetadata'


class XAmzTarget77(Enum):
    AmazonSSM_GetOpsSummary = 'AmazonSSM.GetOpsSummary'


class XAmzTarget78(Enum):
    AmazonSSM_GetParameter = 'AmazonSSM.GetParameter'


class XAmzTarget79(Enum):
    AmazonSSM_GetParameterHistory = 'AmazonSSM.GetParameterHistory'


class XAmzTarget80(Enum):
    AmazonSSM_GetParameters = 'AmazonSSM.GetParameters'


class XAmzTarget81(Enum):
    AmazonSSM_GetParametersByPath = 'AmazonSSM.GetParametersByPath'


class XAmzTarget82(Enum):
    AmazonSSM_GetPatchBaseline = 'AmazonSSM.GetPatchBaseline'


class XAmzTarget83(Enum):
    AmazonSSM_GetPatchBaselineForPatchGroup = 'AmazonSSM.GetPatchBaselineForPatchGroup'


class XAmzTarget84(Enum):
    AmazonSSM_GetResourcePolicies = 'AmazonSSM.GetResourcePolicies'


class XAmzTarget85(Enum):
    AmazonSSM_GetServiceSetting = 'AmazonSSM.GetServiceSetting'


class XAmzTarget86(Enum):
    AmazonSSM_LabelParameterVersion = 'AmazonSSM.LabelParameterVersion'


class XAmzTarget87(Enum):
    AmazonSSM_ListAssociationVersions = 'AmazonSSM.ListAssociationVersions'


class XAmzTarget88(Enum):
    AmazonSSM_ListAssociations = 'AmazonSSM.ListAssociations'


class XAmzTarget89(Enum):
    AmazonSSM_ListCommandInvocations = 'AmazonSSM.ListCommandInvocations'


class XAmzTarget90(Enum):
    AmazonSSM_ListCommands = 'AmazonSSM.ListCommands'


class XAmzTarget91(Enum):
    AmazonSSM_ListComplianceItems = 'AmazonSSM.ListComplianceItems'


class XAmzTarget92(Enum):
    AmazonSSM_ListComplianceSummaries = 'AmazonSSM.ListComplianceSummaries'


class XAmzTarget93(Enum):
    AmazonSSM_ListDocumentMetadataHistory = 'AmazonSSM.ListDocumentMetadataHistory'


class XAmzTarget94(Enum):
    AmazonSSM_ListDocumentVersions = 'AmazonSSM.ListDocumentVersions'


class XAmzTarget95(Enum):
    AmazonSSM_ListDocuments = 'AmazonSSM.ListDocuments'


class XAmzTarget96(Enum):
    AmazonSSM_ListInventoryEntries = 'AmazonSSM.ListInventoryEntries'


class XAmzTarget97(Enum):
    AmazonSSM_ListOpsItemEvents = 'AmazonSSM.ListOpsItemEvents'


class XAmzTarget98(Enum):
    AmazonSSM_ListOpsItemRelatedItems = 'AmazonSSM.ListOpsItemRelatedItems'


class XAmzTarget99(Enum):
    AmazonSSM_ListOpsMetadata = 'AmazonSSM.ListOpsMetadata'


class XAmzTarget100(Enum):
    AmazonSSM_ListResourceComplianceSummaries = (
        'AmazonSSM.ListResourceComplianceSummaries'
    )


class XAmzTarget101(Enum):
    AmazonSSM_ListResourceDataSync = 'AmazonSSM.ListResourceDataSync'


class XAmzTarget102(Enum):
    AmazonSSM_ListTagsForResource = 'AmazonSSM.ListTagsForResource'


class XAmzTarget103(Enum):
    AmazonSSM_ModifyDocumentPermission = 'AmazonSSM.ModifyDocumentPermission'


class XAmzTarget104(Enum):
    AmazonSSM_PutComplianceItems = 'AmazonSSM.PutComplianceItems'


class XAmzTarget105(Enum):
    AmazonSSM_PutInventory = 'AmazonSSM.PutInventory'


class XAmzTarget106(Enum):
    AmazonSSM_PutParameter = 'AmazonSSM.PutParameter'


class XAmzTarget107(Enum):
    AmazonSSM_PutResourcePolicy = 'AmazonSSM.PutResourcePolicy'


class XAmzTarget108(Enum):
    AmazonSSM_RegisterDefaultPatchBaseline = 'AmazonSSM.RegisterDefaultPatchBaseline'


class XAmzTarget109(Enum):
    AmazonSSM_RegisterPatchBaselineForPatchGroup = (
        'AmazonSSM.RegisterPatchBaselineForPatchGroup'
    )


class XAmzTarget110(Enum):
    AmazonSSM_RegisterTargetWithMaintenanceWindow = (
        'AmazonSSM.RegisterTargetWithMaintenanceWindow'
    )


class XAmzTarget111(Enum):
    AmazonSSM_RegisterTaskWithMaintenanceWindow = (
        'AmazonSSM.RegisterTaskWithMaintenanceWindow'
    )


class XAmzTarget112(Enum):
    AmazonSSM_RemoveTagsFromResource = 'AmazonSSM.RemoveTagsFromResource'


class XAmzTarget113(Enum):
    AmazonSSM_ResetServiceSetting = 'AmazonSSM.ResetServiceSetting'


class XAmzTarget114(Enum):
    AmazonSSM_ResumeSession = 'AmazonSSM.ResumeSession'


class XAmzTarget115(Enum):
    AmazonSSM_SendAutomationSignal = 'AmazonSSM.SendAutomationSignal'


class XAmzTarget116(Enum):
    AmazonSSM_SendCommand = 'AmazonSSM.SendCommand'


class XAmzTarget117(Enum):
    AmazonSSM_StartAssociationsOnce = 'AmazonSSM.StartAssociationsOnce'


class XAmzTarget118(Enum):
    AmazonSSM_StartAutomationExecution = 'AmazonSSM.StartAutomationExecution'


class XAmzTarget119(Enum):
    AmazonSSM_StartChangeRequestExecution = 'AmazonSSM.StartChangeRequestExecution'


class XAmzTarget120(Enum):
    AmazonSSM_StartSession = 'AmazonSSM.StartSession'


class XAmzTarget121(Enum):
    AmazonSSM_StopAutomationExecution = 'AmazonSSM.StopAutomationExecution'


class XAmzTarget122(Enum):
    AmazonSSM_TerminateSession = 'AmazonSSM.TerminateSession'


class XAmzTarget123(Enum):
    AmazonSSM_UnlabelParameterVersion = 'AmazonSSM.UnlabelParameterVersion'


class XAmzTarget124(Enum):
    AmazonSSM_UpdateAssociation = 'AmazonSSM.UpdateAssociation'


class XAmzTarget125(Enum):
    AmazonSSM_UpdateAssociationStatus = 'AmazonSSM.UpdateAssociationStatus'


class XAmzTarget126(Enum):
    AmazonSSM_UpdateDocument = 'AmazonSSM.UpdateDocument'


class XAmzTarget127(Enum):
    AmazonSSM_UpdateDocumentDefaultVersion = 'AmazonSSM.UpdateDocumentDefaultVersion'


class XAmzTarget128(Enum):
    AmazonSSM_UpdateDocumentMetadata = 'AmazonSSM.UpdateDocumentMetadata'


class XAmzTarget129(Enum):
    AmazonSSM_UpdateMaintenanceWindow = 'AmazonSSM.UpdateMaintenanceWindow'


class XAmzTarget130(Enum):
    AmazonSSM_UpdateMaintenanceWindowTarget = 'AmazonSSM.UpdateMaintenanceWindowTarget'


class XAmzTarget131(Enum):
    AmazonSSM_UpdateMaintenanceWindowTask = 'AmazonSSM.UpdateMaintenanceWindowTask'


class XAmzTarget132(Enum):
    AmazonSSM_UpdateManagedInstanceRole = 'AmazonSSM.UpdateManagedInstanceRole'


class XAmzTarget133(Enum):
    AmazonSSM_UpdateOpsItem = 'AmazonSSM.UpdateOpsItem'


class XAmzTarget134(Enum):
    AmazonSSM_UpdateOpsMetadata = 'AmazonSSM.UpdateOpsMetadata'


class XAmzTarget135(Enum):
    AmazonSSM_UpdatePatchBaseline = 'AmazonSSM.UpdatePatchBaseline'


class XAmzTarget136(Enum):
    AmazonSSM_UpdateResourceDataSync = 'AmazonSSM.UpdateResourceDataSync'


class XAmzTarget137(Enum):
    AmazonSSM_UpdateServiceSetting = 'AmazonSSM.UpdateServiceSetting'


class AccountSharingInfo(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    SharedDocumentVersion_1: Optional[SharedDocumentVersion] = Field(
        None, alias='SharedDocumentVersion'
    )


class AccountSharingInfoList(RootModel[List[AccountSharingInfo]]):
    root: List[AccountSharingInfo] = Field(
        ...,
        description='A list of Amazon Web Services accounts where the current document is shared and the version shared with each account.',
    )


class Alarm(BaseModel):
    Name: AlarmName


class AlarmList(RootModel[List[Alarm]]):
    root: List[Alarm] = Field(..., max_length=1, min_length=1)


class AlarmStateInformation(BaseModel):
    Name: AlarmName
    State: ExternalAlarmState


class AlarmStateInformationList(RootModel[List[AlarmStateInformation]]):
    root: List[AlarmStateInformation] = Field(..., max_length=1, min_length=1)


class AssociateOpsItemRelatedItemRequest(BaseModel):
    AssociationType: OpsItemRelatedItemAssociationType
    OpsItemId_1: OpsItemId = Field(..., alias='OpsItemId')
    ResourceType: OpsItemRelatedItemAssociationResourceType
    ResourceUri: OpsItemRelatedItemAssociationResourceUri


class AssociateOpsItemRelatedItemResponse(BaseModel):
    AssociationId: Optional[OpsItemRelatedItemAssociationId] = None


class AssociationExecutionFilter(BaseModel):
    Key: AssociationExecutionFilterKey
    Type: AssociationFilterOperatorType
    Value: AssociationExecutionFilterValue


class AssociationExecutionFilterList(RootModel[List[AssociationExecutionFilter]]):
    root: List[AssociationExecutionFilter] = Field(..., min_length=1)


class AssociationExecutionTargetsFilter(BaseModel):
    Key: AssociationExecutionTargetsFilterKey
    Value: AssociationExecutionTargetsFilterValue


class AssociationExecutionTargetsFilterList(
    RootModel[List[AssociationExecutionTargetsFilter]]
):
    root: List[AssociationExecutionTargetsFilter] = Field(..., min_length=1)


class AssociationFilter(BaseModel):
    key: AssociationFilterKey
    value: AssociationFilterValue


class AssociationFilterList(RootModel[List[AssociationFilter]]):
    root: List[AssociationFilter] = Field(..., min_length=1)


class AssociationStatus(BaseModel):
    AdditionalInfo: Optional[StatusAdditionalInfo] = None
    Date: DateTime
    Message: StatusMessage
    Name: AssociationStatusName


class AssociationStatusAggregatedCount(RootModel[Optional[Dict[str, InstanceCount]]]):
    root: Optional[Dict[str, InstanceCount]] = None


class AttachmentContent(BaseModel):
    Hash: Optional[AttachmentHash] = None
    HashType: Optional[AttachmentHashType] = None
    Name: Optional[AttachmentName] = None
    Size: Optional[ContentLength] = None
    Url: Optional[AttachmentUrl] = None


class AttachmentContentList(RootModel[List[AttachmentContent]]):
    root: List[AttachmentContent]


class AttachmentInformation(BaseModel):
    Name: Optional[AttachmentName] = None


class AttachmentInformationList(RootModel[List[AttachmentInformation]]):
    root: List[AttachmentInformation]


class AttachmentsSource(BaseModel):
    Key: Optional[AttachmentsSourceKey] = None
    Name: Optional[AttachmentIdentifier] = None
    Values: Optional[AttachmentsSourceValues] = None


class AttachmentsSourceList(RootModel[List[AttachmentsSource]]):
    root: List[AttachmentsSource] = Field(..., max_length=20, min_length=0)


class AutomationExecutionFilter(BaseModel):
    Key: AutomationExecutionFilterKey
    Values: AutomationExecutionFilterValueList


class AutomationExecutionFilterList(RootModel[List[AutomationExecutionFilter]]):
    root: List[AutomationExecutionFilter] = Field(..., max_length=10, min_length=1)


class AutomationParameterMap(
    RootModel[Optional[Dict[str, AutomationParameterValueList]]]
):
    root: Optional[Dict[str, AutomationParameterValueList]] = None


class CancelCommandRequest(BaseModel):
    CommandId_1: CommandId = Field(..., alias='CommandId')
    InstanceIds: Optional[InstanceIdList] = None


class CancelMaintenanceWindowExecutionRequest(BaseModel):
    WindowExecutionId: MaintenanceWindowExecutionId


class CancelMaintenanceWindowExecutionResult(BaseModel):
    WindowExecutionId: Optional[MaintenanceWindowExecutionId] = None


class CloudWatchOutputConfig(BaseModel):
    CloudWatchLogGroupName_1: Optional[CloudWatchLogGroupName] = Field(
        None, alias='CloudWatchLogGroupName'
    )
    CloudWatchOutputEnabled_1: Optional[CloudWatchOutputEnabled] = Field(
        None, alias='CloudWatchOutputEnabled'
    )


class CommandFilter(BaseModel):
    key: CommandFilterKey
    value: CommandFilterValue


class CommandFilterList(RootModel[List[CommandFilter]]):
    root: List[CommandFilter] = Field(..., max_length=5, min_length=1)


class CommandPlugin(BaseModel):
    Name: Optional[CommandPluginName] = None
    Output: Optional[CommandPluginOutput] = None
    OutputS3BucketName: Optional[S3BucketName] = None
    OutputS3KeyPrefix: Optional[S3KeyPrefix] = None
    OutputS3Region: Optional[S3Region] = None
    ResponseCode_1: Optional[ResponseCode] = Field(None, alias='ResponseCode')
    ResponseFinishDateTime: Optional[DateTime] = None
    ResponseStartDateTime: Optional[DateTime] = None
    StandardErrorUrl: Optional[Url] = None
    StandardOutputUrl: Optional[Url] = None
    Status: Optional[CommandPluginStatus] = None
    StatusDetails_1: Optional[StatusDetails] = Field(None, alias='StatusDetails')


class CommandPluginList(RootModel[List[CommandPlugin]]):
    root: List[CommandPlugin]


class ComplianceExecutionSummary(BaseModel):
    ExecutionId: Optional[ComplianceExecutionId] = None
    ExecutionTime: DateTime
    ExecutionType: Optional[ComplianceExecutionType] = None


class ComplianceItem(BaseModel):
    ComplianceType: Optional[ComplianceTypeName] = None
    Details: Optional[ComplianceItemDetails] = None
    ExecutionSummary: Optional[ComplianceExecutionSummary] = None
    Id: Optional[ComplianceItemId] = None
    ResourceId: Optional[ComplianceResourceId] = None
    ResourceType: Optional[ComplianceResourceType] = None
    Severity: Optional[ComplianceSeverity] = None
    Status: Optional[ComplianceStatus] = None
    Title: Optional[ComplianceItemTitle] = None


class ComplianceItemEntry(BaseModel):
    Details: Optional[ComplianceItemDetails] = None
    Id: Optional[ComplianceItemId] = None
    Severity: ComplianceSeverity
    Status: ComplianceStatus
    Title: Optional[ComplianceItemTitle] = None


class ComplianceItemEntryList(RootModel[List[ComplianceItemEntry]]):
    root: List[ComplianceItemEntry] = Field(..., max_length=10000, min_length=0)


class ComplianceItemList(RootModel[List[ComplianceItem]]):
    root: List[ComplianceItem]


class ComplianceStringFilter(BaseModel):
    Key: Optional[ComplianceStringFilterKey] = None
    Type: Optional[ComplianceQueryOperatorType] = None
    Values: Optional[ComplianceStringFilterValueList] = None


class ComplianceStringFilterList(RootModel[List[ComplianceStringFilter]]):
    root: List[ComplianceStringFilter]


class CompliantSummary(BaseModel):
    CompliantCount: Optional[ComplianceSummaryCount] = None
    SeveritySummary_1: Optional[SeveritySummary] = Field(None, alias='SeveritySummary')


class CreateMaintenanceWindowResult(BaseModel):
    WindowId: Optional[MaintenanceWindowId] = None


class CreateOpsItemResponse(BaseModel):
    OpsItemArn_1: Optional[OpsItemArn] = Field(None, alias='OpsItemArn')
    OpsItemId: Optional[String] = None


class CreateOpsMetadataResult(BaseModel):
    OpsMetadataArn_1: Optional[OpsMetadataArn] = Field(None, alias='OpsMetadataArn')


class DeleteAssociationRequest(BaseModel):
    AssociationId_1: Optional[AssociationId] = Field(None, alias='AssociationId')
    InstanceId_1: Optional[InstanceId] = Field(None, alias='InstanceId')
    Name: Optional[DocumentARN] = None


class DeleteDocumentRequest(BaseModel):
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    Force: Optional[Boolean] = None
    Name: DocumentName
    VersionName: Optional[DocumentVersionName] = None


class DeleteInventoryRequest(BaseModel):
    ClientToken: Optional[UUID] = None
    DryRun_1: Optional[DryRun] = Field(None, alias='DryRun')
    SchemaDeleteOption: Optional[InventorySchemaDeleteOption] = None
    TypeName: InventoryItemTypeName


class DeleteMaintenanceWindowRequest(BaseModel):
    WindowId: MaintenanceWindowId


class DeleteMaintenanceWindowResult(BaseModel):
    WindowId: Optional[MaintenanceWindowId] = None


class DeleteOpsMetadataRequest(BaseModel):
    OpsMetadataArn_1: OpsMetadataArn = Field(..., alias='OpsMetadataArn')


class DeleteParameterRequest(BaseModel):
    Name: PSParameterName


class DeleteParametersRequest(BaseModel):
    Names: ParameterNameList


class DeleteParametersResult(BaseModel):
    DeletedParameters: Optional[ParameterNameList] = None
    InvalidParameters: Optional[ParameterNameList] = None


class DeleteResourceDataSyncRequest(BaseModel):
    SyncName: ResourceDataSyncName
    SyncType: Optional[ResourceDataSyncType] = None


class DeleteResourcePolicyRequest(BaseModel):
    PolicyHash_1: PolicyHash = Field(..., alias='PolicyHash')
    PolicyId_1: PolicyId = Field(..., alias='PolicyId')
    ResourceArn: ResourceArnString


class DeregisterManagedInstanceRequest(BaseModel):
    InstanceId: ManagedInstanceId


class DeregisterPatchBaselineForPatchGroupRequest(BaseModel):
    BaselineId_1: BaselineId = Field(..., alias='BaselineId')
    PatchGroup_1: PatchGroup = Field(..., alias='PatchGroup')


class DeregisterPatchBaselineForPatchGroupResult(BaseModel):
    BaselineId_1: Optional[BaselineId] = Field(None, alias='BaselineId')
    PatchGroup_1: Optional[PatchGroup] = Field(None, alias='PatchGroup')


class DeregisterTargetFromMaintenanceWindowRequest(BaseModel):
    Safe: Optional[Boolean] = None
    WindowId: MaintenanceWindowId
    WindowTargetId: MaintenanceWindowTargetId


class DeregisterTargetFromMaintenanceWindowResult(BaseModel):
    WindowId: Optional[MaintenanceWindowId] = None
    WindowTargetId: Optional[MaintenanceWindowTargetId] = None


class DeregisterTaskFromMaintenanceWindowRequest(BaseModel):
    WindowId: MaintenanceWindowId
    WindowTaskId: MaintenanceWindowTaskId


class DeregisterTaskFromMaintenanceWindowResult(BaseModel):
    WindowId: Optional[MaintenanceWindowId] = None
    WindowTaskId: Optional[MaintenanceWindowTaskId] = None


class DescribeActivationsFilter(BaseModel):
    FilterKey: Optional[DescribeActivationsFilterKeys] = None
    FilterValues: Optional[StringList] = None


class DescribeActivationsFilterList(RootModel[List[DescribeActivationsFilter]]):
    root: List[DescribeActivationsFilter]


class DescribeActivationsRequest(BaseModel):
    Filters: Optional[DescribeActivationsFilterList] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeAssociationExecutionTargetsRequest(BaseModel):
    AssociationId_1: AssociationId = Field(..., alias='AssociationId')
    ExecutionId: AssociationExecutionId
    Filters: Optional[AssociationExecutionTargetsFilterList] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeAssociationExecutionsRequest(BaseModel):
    AssociationId_1: AssociationId = Field(..., alias='AssociationId')
    Filters: Optional[AssociationExecutionFilterList] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeAssociationRequest(BaseModel):
    AssociationId_1: Optional[AssociationId] = Field(None, alias='AssociationId')
    AssociationVersion_1: Optional[AssociationVersion] = Field(
        None, alias='AssociationVersion'
    )
    InstanceId_1: Optional[InstanceId] = Field(None, alias='InstanceId')
    Name: Optional[DocumentARN] = None


class DescribeAutomationExecutionsRequest(BaseModel):
    Filters: Optional[AutomationExecutionFilterList] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeDocumentPermissionRequest(BaseModel):
    MaxResults: Optional[DocumentPermissionMaxResults] = None
    Name: DocumentName
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    PermissionType: DocumentPermissionType


class DescribeDocumentPermissionResponse(BaseModel):
    AccountIds: Optional[AccountIdList] = None
    AccountSharingInfoList_1: Optional[AccountSharingInfoList] = Field(
        None, alias='AccountSharingInfoList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeDocumentRequest(BaseModel):
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    Name: DocumentARN
    VersionName: Optional[DocumentVersionName] = None


class DescribeEffectiveInstanceAssociationsRequest(BaseModel):
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    MaxResults: Optional[EffectiveInstanceAssociationMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeEffectivePatchesForPatchBaselineRequest(BaseModel):
    BaselineId_1: BaselineId = Field(..., alias='BaselineId')
    MaxResults: Optional[PatchBaselineMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeInstanceAssociationsStatusRequest(BaseModel):
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeInstancePatchStatesRequest(BaseModel):
    InstanceIds: InstanceIdList
    MaxResults: Optional[PatchComplianceMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeInventoryDeletionsRequest(BaseModel):
    DeletionId: Optional[UUID] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeMaintenanceWindowScheduleResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ScheduledWindowExecutions: Optional[ScheduledWindowExecutionList] = None


class DescribePatchBaselinesResult(BaseModel):
    BaselineIdentities: Optional[PatchBaselineIdentityList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribePatchGroupStateRequest(BaseModel):
    PatchGroup_1: PatchGroup = Field(..., alias='PatchGroup')


class DescribePatchGroupStateResult(BaseModel):
    Instances: Optional[Integer] = None
    InstancesWithCriticalNonCompliantPatches: Optional[InstancesCount] = None
    InstancesWithFailedPatches: Optional[Integer] = None
    InstancesWithInstalledOtherPatches: Optional[Integer] = None
    InstancesWithInstalledPatches: Optional[Integer] = None
    InstancesWithInstalledPendingRebootPatches: Optional[InstancesCount] = None
    InstancesWithInstalledRejectedPatches: Optional[InstancesCount] = None
    InstancesWithMissingPatches: Optional[Integer] = None
    InstancesWithNotApplicablePatches: Optional[Integer] = None
    InstancesWithOtherNonCompliantPatches: Optional[InstancesCount] = None
    InstancesWithSecurityNonCompliantPatches: Optional[InstancesCount] = None
    InstancesWithUnreportedNotApplicablePatches: Optional[Integer] = None


class DescribePatchGroupsResult(BaseModel):
    Mappings: Optional[PatchGroupPatchBaselineMappingList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribePatchPropertiesRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    OperatingSystem_1: OperatingSystem = Field(..., alias='OperatingSystem')
    PatchSet_1: Optional[PatchSet] = Field(None, alias='PatchSet')
    Property: PatchProperty


class DisassociateOpsItemRelatedItemRequest(BaseModel):
    AssociationId: OpsItemRelatedItemAssociationId
    OpsItemId_1: OpsItemId = Field(..., alias='OpsItemId')


class DocumentDefaultVersionDescription(BaseModel):
    DefaultVersion: Optional[DocumentVersion] = None
    DefaultVersionName: Optional[DocumentVersionName] = None
    Name: Optional[DocumentName] = None


class DocumentFilter(BaseModel):
    key: DocumentFilterKey
    value: DocumentFilterValue


class DocumentFilterList(RootModel[List[DocumentFilter]]):
    root: List[DocumentFilter] = Field(..., min_length=1)


class DocumentKeyValuesFilter(BaseModel):
    Key: Optional[DocumentKeyValuesFilterKey] = None
    Values: Optional[DocumentKeyValuesFilterValues] = None


class DocumentKeyValuesFilterList(RootModel[List[DocumentKeyValuesFilter]]):
    root: List[DocumentKeyValuesFilter] = Field(..., max_length=6, min_length=0)


class DocumentParameter(BaseModel):
    DefaultValue: Optional[DocumentParameterDefaultValue] = None
    Description: Optional[DocumentParameterDescrption] = None
    Name: Optional[DocumentParameterName] = None
    Type: Optional[DocumentParameterType] = None


class DocumentParameterList(RootModel[List[DocumentParameter]]):
    root: List[DocumentParameter]


class DocumentRequires(BaseModel):
    Name: DocumentARN
    RequireType_1: Optional[RequireType] = Field(None, alias='RequireType')
    Version: Optional[DocumentVersion] = None
    VersionName: Optional[DocumentVersionName] = None


class DocumentRequiresList(RootModel[List[DocumentRequires]]):
    root: List[DocumentRequires] = Field(..., min_length=1)


class DocumentReviewCommentSource(BaseModel):
    Content: Optional[DocumentReviewComment] = None
    Type: Optional[DocumentReviewCommentType] = None


class DocumentVersionInfo(BaseModel):
    CreatedDate: Optional[DateTime] = None
    DisplayName: Optional[DocumentDisplayName] = None
    DocumentFormat_1: Optional[DocumentFormat] = Field(None, alias='DocumentFormat')
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    IsDefaultVersion: Optional[Boolean] = None
    Name: Optional[DocumentName] = None
    ReviewStatus_1: Optional[ReviewStatus] = Field(None, alias='ReviewStatus')
    Status: Optional[DocumentStatus] = None
    StatusInformation: Optional[DocumentStatusInformation] = None
    VersionName: Optional[DocumentVersionName] = None


class DocumentVersionList(RootModel[List[DocumentVersionInfo]]):
    root: List[DocumentVersionInfo] = Field(..., min_length=1)


class FailureDetails(BaseModel):
    Details: Optional[AutomationParameterMap] = None
    FailureStage: Optional[String] = None
    FailureType: Optional[String] = None


class GetCalendarStateRequest(BaseModel):
    AtTime: Optional[ISO8601String] = None
    CalendarNames: CalendarNameOrARNList


class GetCalendarStateResponse(BaseModel):
    AtTime: Optional[ISO8601String] = None
    NextTransitionTime: Optional[ISO8601String] = None
    State: Optional[CalendarState] = None


class GetCommandInvocationRequest(BaseModel):
    CommandId_1: CommandId = Field(..., alias='CommandId')
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    PluginName: Optional[CommandPluginName] = None


class GetCommandInvocationResult(BaseModel):
    CloudWatchOutputConfig_1: Optional[CloudWatchOutputConfig] = Field(
        None, alias='CloudWatchOutputConfig'
    )
    CommandId_1: Optional[CommandId] = Field(None, alias='CommandId')
    Comment_1: Optional[Comment] = Field(None, alias='Comment')
    DocumentName_1: Optional[DocumentName] = Field(None, alias='DocumentName')
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    ExecutionElapsedTime: Optional[StringDateTime] = None
    ExecutionEndDateTime: Optional[StringDateTime] = None
    ExecutionStartDateTime: Optional[StringDateTime] = None
    InstanceId_1: Optional[InstanceId] = Field(None, alias='InstanceId')
    PluginName: Optional[CommandPluginName] = None
    ResponseCode_1: Optional[ResponseCode] = Field(None, alias='ResponseCode')
    StandardErrorContent_1: Optional[StandardErrorContent] = Field(
        None, alias='StandardErrorContent'
    )
    StandardErrorUrl: Optional[Url] = None
    StandardOutputContent_1: Optional[StandardOutputContent] = Field(
        None, alias='StandardOutputContent'
    )
    StandardOutputUrl: Optional[Url] = None
    Status: Optional[CommandInvocationStatus] = None
    StatusDetails_1: Optional[StatusDetails] = Field(None, alias='StatusDetails')


class GetConnectionStatusRequest(BaseModel):
    Target: SessionTarget


class GetConnectionStatusResponse(BaseModel):
    Status: Optional[ConnectionStatus] = None
    Target: Optional[SessionTarget] = None


class GetDefaultPatchBaselineRequest(BaseModel):
    OperatingSystem_1: Optional[OperatingSystem] = Field(None, alias='OperatingSystem')


class GetDefaultPatchBaselineResult(BaseModel):
    BaselineId_1: Optional[BaselineId] = Field(None, alias='BaselineId')
    OperatingSystem_1: Optional[OperatingSystem] = Field(None, alias='OperatingSystem')


class GetDeployablePatchSnapshotForInstanceResult(BaseModel):
    InstanceId_1: Optional[InstanceId] = Field(None, alias='InstanceId')
    Product_1: Optional[Product] = Field(None, alias='Product')
    SnapshotDownloadUrl_1: Optional[SnapshotDownloadUrl] = Field(
        None, alias='SnapshotDownloadUrl'
    )
    SnapshotId_1: Optional[SnapshotId] = Field(None, alias='SnapshotId')


class GetDocumentResult(BaseModel):
    AttachmentsContent: Optional[AttachmentContentList] = None
    Content: Optional[DocumentContent] = None
    CreatedDate: Optional[DateTime] = None
    DisplayName: Optional[DocumentDisplayName] = None
    DocumentFormat_1: Optional[DocumentFormat] = Field(None, alias='DocumentFormat')
    DocumentType_1: Optional[DocumentType] = Field(None, alias='DocumentType')
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    Name: Optional[DocumentARN] = None
    Requires: Optional[DocumentRequiresList] = None
    ReviewStatus_1: Optional[ReviewStatus] = Field(None, alias='ReviewStatus')
    Status: Optional[DocumentStatus] = None
    StatusInformation: Optional[DocumentStatusInformation] = None
    VersionName: Optional[DocumentVersionName] = None


class GetInventorySchemaRequest(BaseModel):
    Aggregator: Optional[AggregatorSchemaOnly] = None
    MaxResults: Optional[GetInventorySchemaMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SubType: Optional[IsSubTypeSchema] = None
    TypeName: Optional[InventoryItemTypeNameFilter] = None


class GetMaintenanceWindowExecutionRequest(BaseModel):
    WindowExecutionId: MaintenanceWindowExecutionId


class GetMaintenanceWindowExecutionResult(BaseModel):
    EndTime: Optional[DateTime] = None
    StartTime: Optional[DateTime] = None
    Status: Optional[MaintenanceWindowExecutionStatus] = None
    StatusDetails: Optional[MaintenanceWindowExecutionStatusDetails] = None
    TaskIds: Optional[MaintenanceWindowExecutionTaskIdList] = None
    WindowExecutionId: Optional[MaintenanceWindowExecutionId] = None


class GetMaintenanceWindowExecutionTaskInvocationRequest(BaseModel):
    InvocationId: MaintenanceWindowExecutionTaskInvocationId
    TaskId: MaintenanceWindowExecutionTaskId
    WindowExecutionId: MaintenanceWindowExecutionId


class GetMaintenanceWindowExecutionTaskInvocationResult(BaseModel):
    EndTime: Optional[DateTime] = None
    ExecutionId: Optional[MaintenanceWindowExecutionTaskExecutionId] = None
    InvocationId: Optional[MaintenanceWindowExecutionTaskInvocationId] = None
    OwnerInformation_1: Optional[OwnerInformation] = Field(
        None, alias='OwnerInformation'
    )
    Parameters: Optional[MaintenanceWindowExecutionTaskInvocationParameters] = None
    StartTime: Optional[DateTime] = None
    Status: Optional[MaintenanceWindowExecutionStatus] = None
    StatusDetails: Optional[MaintenanceWindowExecutionStatusDetails] = None
    TaskExecutionId: Optional[MaintenanceWindowExecutionTaskId] = None
    TaskType: Optional[MaintenanceWindowTaskType] = None
    WindowExecutionId: Optional[MaintenanceWindowExecutionId] = None
    WindowTargetId: Optional[MaintenanceWindowTaskTargetId] = None


class GetMaintenanceWindowExecutionTaskRequest(BaseModel):
    TaskId: MaintenanceWindowExecutionTaskId
    WindowExecutionId: MaintenanceWindowExecutionId


class GetMaintenanceWindowRequest(BaseModel):
    WindowId: MaintenanceWindowId


class GetMaintenanceWindowResult(BaseModel):
    AllowUnassociatedTargets: Optional[MaintenanceWindowAllowUnassociatedTargets] = None
    CreatedDate: Optional[DateTime] = None
    Cutoff: Optional[MaintenanceWindowCutoff] = None
    Description: Optional[MaintenanceWindowDescription] = None
    Duration: Optional[MaintenanceWindowDurationHours] = None
    Enabled: Optional[MaintenanceWindowEnabled] = None
    EndDate: Optional[MaintenanceWindowStringDateTime] = None
    ModifiedDate: Optional[DateTime] = None
    Name: Optional[MaintenanceWindowName] = None
    NextExecutionTime: Optional[MaintenanceWindowStringDateTime] = None
    Schedule: Optional[MaintenanceWindowSchedule] = None
    ScheduleOffset: Optional[MaintenanceWindowOffset] = None
    ScheduleTimezone: Optional[MaintenanceWindowTimezone] = None
    StartDate: Optional[MaintenanceWindowStringDateTime] = None
    WindowId: Optional[MaintenanceWindowId] = None


class GetMaintenanceWindowTaskRequest(BaseModel):
    WindowId: MaintenanceWindowId
    WindowTaskId: MaintenanceWindowTaskId


class GetOpsItemRequest(BaseModel):
    OpsItemArn_1: Optional[OpsItemArn] = Field(None, alias='OpsItemArn')
    OpsItemId_1: OpsItemId = Field(..., alias='OpsItemId')


class GetOpsMetadataRequest(BaseModel):
    MaxResults: Optional[GetOpsMetadataMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    OpsMetadataArn_1: OpsMetadataArn = Field(..., alias='OpsMetadataArn')


class GetParameterHistoryRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    Name: PSParameterName
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    WithDecryption: Optional[Boolean] = None


class GetParameterRequest(BaseModel):
    Name: PSParameterName
    WithDecryption: Optional[Boolean] = None


class GetParametersRequest(BaseModel):
    Names: ParameterNameList
    WithDecryption: Optional[Boolean] = None


class GetPatchBaselineForPatchGroupRequest(BaseModel):
    OperatingSystem_1: Optional[OperatingSystem] = Field(None, alias='OperatingSystem')
    PatchGroup_1: PatchGroup = Field(..., alias='PatchGroup')


class GetPatchBaselineForPatchGroupResult(BaseModel):
    BaselineId_1: Optional[BaselineId] = Field(None, alias='BaselineId')
    OperatingSystem_1: Optional[OperatingSystem] = Field(None, alias='OperatingSystem')
    PatchGroup_1: Optional[PatchGroup] = Field(None, alias='PatchGroup')


class GetResourcePoliciesRequest(BaseModel):
    MaxResults: Optional[ResourcePolicyMaxResults] = None
    NextToken: Optional[String] = None
    ResourceArn: ResourceArnString


class GetResourcePoliciesResponseEntry(BaseModel):
    Policy_1: Optional[Policy] = Field(None, alias='Policy')
    PolicyHash_1: Optional[PolicyHash] = Field(None, alias='PolicyHash')
    PolicyId_1: Optional[PolicyId] = Field(None, alias='PolicyId')


class GetServiceSettingRequest(BaseModel):
    SettingId: ServiceSettingId


class InstanceAssociation(BaseModel):
    AssociationId_1: Optional[AssociationId] = Field(None, alias='AssociationId')
    AssociationVersion_1: Optional[AssociationVersion] = Field(
        None, alias='AssociationVersion'
    )
    Content: Optional[DocumentContent] = None
    InstanceId_1: Optional[InstanceId] = Field(None, alias='InstanceId')


class InstanceAssociationList(RootModel[List[InstanceAssociation]]):
    root: List[InstanceAssociation]


class InstanceAssociationStatusAggregatedCount(
    RootModel[Optional[Dict[str, InstanceCount]]]
):
    root: Optional[Dict[str, InstanceCount]] = None


class InstanceInformationFilter(BaseModel):
    key: InstanceInformationFilterKey
    valueSet: InstanceInformationFilterValueSet


class InstanceInformationFilterList(RootModel[List[InstanceInformationFilter]]):
    root: List[InstanceInformationFilter] = Field(..., min_length=0)


class InstanceInformationStringFilter(BaseModel):
    Key: InstanceInformationStringFilterKey
    Values: InstanceInformationFilterValueSet


class InstanceInformationStringFilterList(
    RootModel[List[InstanceInformationStringFilter]]
):
    root: List[InstanceInformationStringFilter] = Field(..., min_length=0)


class InstancePatchState(BaseModel):
    BaselineId_1: BaselineId = Field(..., alias='BaselineId')
    CriticalNonCompliantCount: Optional[PatchCriticalNonCompliantCount] = None
    FailedCount: Optional[PatchFailedCount] = None
    InstallOverrideList_1: Optional[InstallOverrideList] = Field(
        None, alias='InstallOverrideList'
    )
    InstalledCount: Optional[PatchInstalledCount] = None
    InstalledOtherCount: Optional[PatchInstalledOtherCount] = None
    InstalledPendingRebootCount: Optional[PatchInstalledPendingRebootCount] = None
    InstalledRejectedCount: Optional[PatchInstalledRejectedCount] = None
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    LastNoRebootInstallOperationTime: Optional[DateTime] = None
    MissingCount: Optional[PatchMissingCount] = None
    NotApplicableCount: Optional[PatchNotApplicableCount] = None
    Operation: PatchOperationType
    OperationEndTime: DateTime
    OperationStartTime: DateTime
    OtherNonCompliantCount: Optional[PatchOtherNonCompliantCount] = None
    OwnerInformation_1: Optional[OwnerInformation] = Field(
        None, alias='OwnerInformation'
    )
    PatchGroup_1: PatchGroup = Field(..., alias='PatchGroup')
    RebootOption_1: Optional[RebootOption] = Field(None, alias='RebootOption')
    SecurityNonCompliantCount: Optional[PatchSecurityNonCompliantCount] = None
    SnapshotId_1: Optional[SnapshotId] = Field(None, alias='SnapshotId')
    UnreportedNotApplicableCount: Optional[PatchUnreportedNotApplicableCount] = None


class InstancePatchStateFilter(BaseModel):
    Key: InstancePatchStateFilterKey
    Type: InstancePatchStateOperatorType
    Values: InstancePatchStateFilterValues


class InstancePatchStateFilterList(RootModel[List[InstancePatchStateFilter]]):
    root: List[InstancePatchStateFilter] = Field(..., max_length=4, min_length=0)


class InstancePatchStateList(RootModel[List[InstancePatchState]]):
    root: List[InstancePatchState]


class InstancePatchStatesList(RootModel[List[InstancePatchState]]):
    root: List[InstancePatchState] = Field(..., max_length=5, min_length=1)


class InventoryDeletionSummaryItem(BaseModel):
    Count: Optional[ResourceCount] = None
    RemainingCount_1: Optional[RemainingCount] = Field(None, alias='RemainingCount')
    Version: Optional[InventoryItemSchemaVersion] = None


class InventoryDeletionSummaryItems(RootModel[List[InventoryDeletionSummaryItem]]):
    root: List[InventoryDeletionSummaryItem]


class InventoryFilter(BaseModel):
    Key: InventoryFilterKey
    Type: Optional[InventoryQueryOperatorType] = None
    Values: InventoryFilterValueList


class InventoryFilterList(RootModel[List[InventoryFilter]]):
    root: List[InventoryFilter] = Field(..., max_length=5, min_length=1)


class InventoryGroup(BaseModel):
    Filters: InventoryFilterList
    Name: InventoryGroupName


class InventoryGroupList(RootModel[List[InventoryGroup]]):
    root: List[InventoryGroup] = Field(..., max_length=15, min_length=1)


class InventoryItem(BaseModel):
    CaptureTime: InventoryItemCaptureTime
    Content: Optional[InventoryItemEntryList] = None
    ContentHash: Optional[InventoryItemContentHash] = None
    Context: Optional[InventoryItemContentContext] = None
    SchemaVersion: InventoryItemSchemaVersion
    TypeName: InventoryItemTypeName


class InventoryItemAttribute(BaseModel):
    DataType: InventoryAttributeDataType
    Name: InventoryItemAttributeName


class InventoryItemAttributeList(RootModel[List[InventoryItemAttribute]]):
    root: List[InventoryItemAttribute] = Field(..., max_length=50, min_length=1)


class InventoryItemList(RootModel[List[InventoryItem]]):
    root: List[InventoryItem] = Field(..., max_length=30, min_length=1)


class InventoryItemSchema(BaseModel):
    Attributes: InventoryItemAttributeList
    DisplayName: Optional[InventoryTypeDisplayName] = None
    TypeName: InventoryItemTypeName
    Version: Optional[InventoryItemSchemaVersion] = None


class InventoryItemSchemaResultList(RootModel[List[InventoryItemSchema]]):
    root: List[InventoryItemSchema]


class InventoryResultEntity(BaseModel):
    Data: Optional[InventoryResultItemMap] = None
    Id: Optional[InventoryResultEntityId] = None


class InventoryResultEntityList(RootModel[List[InventoryResultEntity]]):
    root: List[InventoryResultEntity]


class KeyList(RootModel[List[TagKey]]):
    root: List[TagKey]


class LabelParameterVersionRequest(BaseModel):
    Labels: ParameterLabelList
    Name: PSParameterName
    ParameterVersion: Optional[PSParameterVersion] = None


class LabelParameterVersionResult(BaseModel):
    InvalidLabels: Optional[ParameterLabelList] = None
    ParameterVersion: Optional[PSParameterVersion] = None


class ListAssociationVersionsRequest(BaseModel):
    AssociationId_1: AssociationId = Field(..., alias='AssociationId')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListAssociationsRequest(BaseModel):
    AssociationFilterList_1: Optional[AssociationFilterList] = Field(
        None, alias='AssociationFilterList'
    )
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListCommandInvocationsRequest(BaseModel):
    CommandId_1: Optional[CommandId] = Field(None, alias='CommandId')
    Details: Optional[Boolean] = None
    Filters: Optional[CommandFilterList] = None
    InstanceId_1: Optional[InstanceId] = Field(None, alias='InstanceId')
    MaxResults: Optional[CommandMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListCommandsRequest(BaseModel):
    CommandId_1: Optional[CommandId] = Field(None, alias='CommandId')
    Filters: Optional[CommandFilterList] = None
    InstanceId_1: Optional[InstanceId] = Field(None, alias='InstanceId')
    MaxResults: Optional[CommandMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListComplianceItemsRequest(BaseModel):
    Filters: Optional[ComplianceStringFilterList] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResourceIds: Optional[ComplianceResourceIdList] = None
    ResourceTypes: Optional[ComplianceResourceTypeList] = None


class ListComplianceItemsResult(BaseModel):
    ComplianceItems: Optional[ComplianceItemList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListComplianceSummariesRequest(BaseModel):
    Filters: Optional[ComplianceStringFilterList] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDocumentMetadataHistoryRequest(BaseModel):
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    Metadata: DocumentMetadataEnum
    Name: DocumentName
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDocumentVersionsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    Name: DocumentARN
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDocumentVersionsResult(BaseModel):
    DocumentVersions: Optional[DocumentVersionList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDocumentsRequest(BaseModel):
    DocumentFilterList_1: Optional[DocumentFilterList] = Field(
        None, alias='DocumentFilterList'
    )
    Filters: Optional[DocumentKeyValuesFilterList] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListInventoryEntriesRequest(BaseModel):
    Filters: Optional[InventoryFilterList] = None
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TypeName: InventoryItemTypeName


class ListInventoryEntriesResult(BaseModel):
    CaptureTime: Optional[InventoryItemCaptureTime] = None
    Entries: Optional[InventoryItemEntryList] = None
    InstanceId_1: Optional[InstanceId] = Field(None, alias='InstanceId')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SchemaVersion: Optional[InventoryItemSchemaVersion] = None
    TypeName: Optional[InventoryItemTypeName] = None


class ListResourceComplianceSummariesRequest(BaseModel):
    Filters: Optional[ComplianceStringFilterList] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListResourceDataSyncRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SyncType: Optional[ResourceDataSyncType] = None


class ListTagsForResourceRequest(BaseModel):
    ResourceId_1: ResourceId = Field(..., alias='ResourceId')
    ResourceType: ResourceTypeForTagging


class LoggingInfo(BaseModel):
    S3BucketName_1: S3BucketName = Field(..., alias='S3BucketName')
    S3KeyPrefix_1: Optional[S3KeyPrefix] = Field(None, alias='S3KeyPrefix')
    S3Region_1: S3Region = Field(..., alias='S3Region')


class MaintenanceWindowAutomationParameters(BaseModel):
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    Parameters: Optional[AutomationParameterMap] = None


class MaintenanceWindowExecution(BaseModel):
    EndTime: Optional[DateTime] = None
    StartTime: Optional[DateTime] = None
    Status: Optional[MaintenanceWindowExecutionStatus] = None
    StatusDetails: Optional[MaintenanceWindowExecutionStatusDetails] = None
    WindowExecutionId: Optional[MaintenanceWindowExecutionId] = None
    WindowId: Optional[MaintenanceWindowId] = None


class MaintenanceWindowExecutionList(RootModel[List[MaintenanceWindowExecution]]):
    root: List[MaintenanceWindowExecution]


class MaintenanceWindowExecutionTaskInvocationIdentity(BaseModel):
    EndTime: Optional[DateTime] = None
    ExecutionId: Optional[MaintenanceWindowExecutionTaskExecutionId] = None
    InvocationId: Optional[MaintenanceWindowExecutionTaskInvocationId] = None
    OwnerInformation_1: Optional[OwnerInformation] = Field(
        None, alias='OwnerInformation'
    )
    Parameters: Optional[MaintenanceWindowExecutionTaskInvocationParameters] = None
    StartTime: Optional[DateTime] = None
    Status: Optional[MaintenanceWindowExecutionStatus] = None
    StatusDetails: Optional[MaintenanceWindowExecutionStatusDetails] = None
    TaskExecutionId: Optional[MaintenanceWindowExecutionTaskId] = None
    TaskType: Optional[MaintenanceWindowTaskType] = None
    WindowExecutionId: Optional[MaintenanceWindowExecutionId] = None
    WindowTargetId: Optional[MaintenanceWindowTaskTargetId] = None


class MaintenanceWindowExecutionTaskInvocationIdentityList(
    RootModel[List[MaintenanceWindowExecutionTaskInvocationIdentity]]
):
    root: List[MaintenanceWindowExecutionTaskInvocationIdentity]


class MaintenanceWindowFilter(BaseModel):
    Key: Optional[MaintenanceWindowFilterKey] = None
    Values: Optional[MaintenanceWindowFilterValues] = None


class MaintenanceWindowFilterList(RootModel[List[MaintenanceWindowFilter]]):
    root: List[MaintenanceWindowFilter] = Field(..., max_length=5, min_length=0)


class MaintenanceWindowIdentity(BaseModel):
    Cutoff: Optional[MaintenanceWindowCutoff] = None
    Description: Optional[MaintenanceWindowDescription] = None
    Duration: Optional[MaintenanceWindowDurationHours] = None
    Enabled: Optional[MaintenanceWindowEnabled] = None
    EndDate: Optional[MaintenanceWindowStringDateTime] = None
    Name: Optional[MaintenanceWindowName] = None
    NextExecutionTime: Optional[MaintenanceWindowStringDateTime] = None
    Schedule: Optional[MaintenanceWindowSchedule] = None
    ScheduleOffset: Optional[MaintenanceWindowOffset] = None
    ScheduleTimezone: Optional[MaintenanceWindowTimezone] = None
    StartDate: Optional[MaintenanceWindowStringDateTime] = None
    WindowId: Optional[MaintenanceWindowId] = None


class MaintenanceWindowIdentityForTarget(BaseModel):
    Name: Optional[MaintenanceWindowName] = None
    WindowId: Optional[MaintenanceWindowId] = None


class MaintenanceWindowIdentityList(RootModel[List[MaintenanceWindowIdentity]]):
    root: List[MaintenanceWindowIdentity]


class MaintenanceWindowLambdaParameters(BaseModel):
    ClientContext: Optional[MaintenanceWindowLambdaClientContext] = None
    Payload: Optional[MaintenanceWindowLambdaPayload] = None
    Qualifier: Optional[MaintenanceWindowLambdaQualifier] = None


class MaintenanceWindowTaskParameterValueExpression(BaseModel):
    Values: Optional[MaintenanceWindowTaskParameterValueList] = None


class MaintenanceWindowTaskParameters(
    RootModel[Optional[Dict[str, MaintenanceWindowTaskParameterValueExpression]]]
):
    root: Optional[Dict[str, MaintenanceWindowTaskParameterValueExpression]] = None


class MaintenanceWindowTaskParametersList(
    RootModel[List[MaintenanceWindowTaskParameters]]
):
    root: List[MaintenanceWindowTaskParameters]


class MaintenanceWindowsForTargetList(
    RootModel[List[MaintenanceWindowIdentityForTarget]]
):
    root: List[MaintenanceWindowIdentityForTarget]


class MetadataValue(BaseModel):
    Value: Optional[MetadataValueString] = None


class ModifyDocumentPermissionRequest(BaseModel):
    AccountIdsToAdd: Optional[AccountIdList] = None
    AccountIdsToRemove: Optional[AccountIdList] = None
    Name: DocumentName
    PermissionType: DocumentPermissionType
    SharedDocumentVersion_1: Optional[SharedDocumentVersion] = Field(
        None, alias='SharedDocumentVersion'
    )


class NonCompliantSummary(BaseModel):
    NonCompliantCount: Optional[ComplianceSummaryCount] = None
    SeveritySummary_1: Optional[SeveritySummary] = Field(None, alias='SeveritySummary')


class NormalStringMap(RootModel[Optional[Dict[str, String]]]):
    root: Optional[Dict[str, String]] = None


class NotificationConfig(BaseModel):
    NotificationArn_1: Optional[NotificationArn] = Field(None, alias='NotificationArn')
    NotificationEvents: Optional[NotificationEventList] = None
    NotificationType_1: Optional[NotificationType] = Field(
        None, alias='NotificationType'
    )


class OpsEntityItem(BaseModel):
    CaptureTime: Optional[OpsEntityItemCaptureTime] = None
    Content: Optional[OpsEntityItemEntryList] = None


class OpsEntityItemMap(RootModel[Optional[Dict[str, OpsEntityItem]]]):
    root: Optional[Dict[str, OpsEntityItem]] = None


class OpsFilter(BaseModel):
    Key: OpsFilterKey
    Type: Optional[OpsFilterOperatorType] = None
    Values: OpsFilterValueList


class OpsFilterList(RootModel[List[OpsFilter]]):
    root: List[OpsFilter] = Field(..., max_length=5, min_length=1)


class OpsItemDataValue(BaseModel):
    Type: Optional[OpsItemDataType] = None
    Value: Optional[OpsItemDataValueString] = None


class OpsItemEventFilter(BaseModel):
    Key: OpsItemEventFilterKey
    Operator: OpsItemEventFilterOperator
    Values: OpsItemEventFilterValues


class OpsItemEventFilters(RootModel[List[OpsItemEventFilter]]):
    root: List[OpsItemEventFilter]


class OpsItemFilter(BaseModel):
    Key: OpsItemFilterKey
    Operator: OpsItemFilterOperator
    Values: OpsItemFilterValues


class OpsItemFilters(RootModel[List[OpsItemFilter]]):
    root: List[OpsItemFilter]


class OpsItemIdentity(BaseModel):
    Arn: Optional[String] = None


class OpsItemNotification(BaseModel):
    Arn: Optional[String] = None


class OpsItemNotifications(RootModel[List[OpsItemNotification]]):
    root: List[OpsItemNotification]


class OpsItemOperationalData(RootModel[Optional[Dict[str, OpsItemDataValue]]]):
    root: Optional[Dict[str, OpsItemDataValue]] = None


class OpsItemOpsDataKeysList(RootModel[List[String]]):
    root: List[String]


class OpsItemRelatedItemSummary(BaseModel):
    AssociationId: Optional[OpsItemRelatedItemAssociationId] = None
    AssociationType: Optional[OpsItemRelatedItemAssociationType] = None
    CreatedBy: Optional[OpsItemIdentity] = None
    CreatedTime: Optional[DateTime] = None
    LastModifiedBy: Optional[OpsItemIdentity] = None
    LastModifiedTime: Optional[DateTime] = None
    OpsItemId_1: Optional[OpsItemId] = Field(None, alias='OpsItemId')
    ResourceType: Optional[OpsItemRelatedItemAssociationResourceType] = None
    ResourceUri: Optional[OpsItemRelatedItemAssociationResourceUri] = None


class OpsItemRelatedItemsFilter(BaseModel):
    Key: OpsItemRelatedItemsFilterKey
    Operator: OpsItemRelatedItemsFilterOperator
    Values: OpsItemRelatedItemsFilterValues


class OpsItemRelatedItemsFilters(RootModel[List[OpsItemRelatedItemsFilter]]):
    root: List[OpsItemRelatedItemsFilter]


class OpsItemSummary(BaseModel):
    ActualEndTime: Optional[DateTime] = None
    ActualStartTime: Optional[DateTime] = None
    Category: Optional[OpsItemCategory] = None
    CreatedBy: Optional[String] = None
    CreatedTime: Optional[DateTime] = None
    LastModifiedBy: Optional[String] = None
    LastModifiedTime: Optional[DateTime] = None
    OperationalData: Optional[OpsItemOperationalData] = None
    OpsItemId_1: Optional[OpsItemId] = Field(None, alias='OpsItemId')
    OpsItemType_1: Optional[OpsItemType] = Field(None, alias='OpsItemType')
    PlannedEndTime: Optional[DateTime] = None
    PlannedStartTime: Optional[DateTime] = None
    Priority: Optional[OpsItemPriority] = None
    Severity: Optional[OpsItemSeverity] = None
    Source: Optional[OpsItemSource] = None
    Status: Optional[OpsItemStatus] = None
    Title: Optional[OpsItemTitle] = None


class OpsMetadata(BaseModel):
    CreationDate: Optional[DateTime] = None
    LastModifiedDate: Optional[DateTime] = None
    LastModifiedUser: Optional[String] = None
    OpsMetadataArn_1: Optional[OpsMetadataArn] = Field(None, alias='OpsMetadataArn')
    ResourceId: Optional[OpsMetadataResourceId] = None


class OpsMetadataFilter(BaseModel):
    Key: OpsMetadataFilterKey
    Values: OpsMetadataFilterValueList


class OpsMetadataFilterList(RootModel[List[OpsMetadataFilter]]):
    root: List[OpsMetadataFilter] = Field(..., max_length=10, min_length=0)


class OpsMetadataList(RootModel[List[OpsMetadata]]):
    root: List[OpsMetadata] = Field(..., max_length=50, min_length=1)


class OutputSource(BaseModel):
    OutputSourceId_1: Optional[OutputSourceId] = Field(None, alias='OutputSourceId')
    OutputSourceType_1: Optional[OutputSourceType] = Field(
        None, alias='OutputSourceType'
    )


class Parameter(BaseModel):
    ARN: Optional[String] = None
    DataType: Optional[ParameterDataType] = None
    LastModifiedDate: Optional[DateTime] = None
    Name: Optional[PSParameterName] = None
    Selector: Optional[PSParameterSelector] = None
    SourceResult: Optional[String] = None
    Type: Optional[ParameterType] = None
    Value: Optional[PSParameterValue] = None
    Version: Optional[PSParameterVersion] = None


class ParameterInlinePolicy(BaseModel):
    PolicyStatus: Optional[String] = None
    PolicyText: Optional[String] = None
    PolicyType: Optional[String] = None


class ParameterList(RootModel[List[Parameter]]):
    root: List[Parameter]


class ParameterPolicyList(RootModel[List[ParameterInlinePolicy]]):
    root: List[ParameterInlinePolicy]


class ParameterStringFilter(BaseModel):
    Key: ParameterStringFilterKey
    Option: Optional[ParameterStringQueryOption] = None
    Values: Optional[ParameterStringFilterValueList] = None


class ParameterStringFilterList(RootModel[List[ParameterStringFilter]]):
    root: List[ParameterStringFilter]


class ParametersFilter(BaseModel):
    Key: ParametersFilterKey
    Values: ParametersFilterValueList


class ParametersFilterList(RootModel[List[ParametersFilter]]):
    root: List[ParametersFilter]


class Patch(BaseModel):
    AdvisoryIds: Optional[PatchAdvisoryIdList] = None
    Arch: Optional[PatchArch] = None
    BugzillaIds: Optional[PatchBugzillaIdList] = None
    CVEIds: Optional[PatchCVEIdList] = None
    Classification: Optional[PatchClassification] = None
    ContentUrl: Optional[PatchContentUrl] = None
    Description: Optional[PatchDescription] = None
    Epoch: Optional[PatchEpoch] = None
    Id: Optional[PatchId] = None
    KbNumber: Optional[PatchKbNumber] = None
    Language: Optional[PatchLanguage] = None
    MsrcNumber: Optional[PatchMsrcNumber] = None
    MsrcSeverity: Optional[PatchMsrcSeverity] = None
    Name: Optional[PatchName] = None
    Product: Optional[PatchProduct] = None
    ProductFamily: Optional[PatchProductFamily] = None
    Release: Optional[PatchRelease] = None
    ReleaseDate: Optional[DateTime] = None
    Repository: Optional[PatchRepository] = None
    Severity: Optional[PatchSeverity] = None
    Title: Optional[PatchTitle] = None
    Vendor: Optional[PatchVendor] = None
    Version: Optional[PatchVersion] = None


class PatchComplianceData(BaseModel):
    CVEIds: Optional[PatchCVEIds] = None
    Classification: PatchClassification
    InstalledTime: DateTime
    KBId: PatchKbNumber
    Severity: PatchSeverity
    State: PatchComplianceDataState
    Title: PatchTitle


class PatchComplianceDataList(RootModel[List[PatchComplianceData]]):
    root: List[PatchComplianceData]


class PatchFilter(BaseModel):
    Key: PatchFilterKey
    Values: PatchFilterValueList


class PatchFilterList(RootModel[List[PatchFilter]]):
    root: List[PatchFilter] = Field(..., max_length=4, min_length=0)


class PatchList(RootModel[List[Patch]]):
    root: List[Patch]


class PatchOrchestratorFilter(BaseModel):
    Key: Optional[PatchOrchestratorFilterKey] = None
    Values: Optional[PatchOrchestratorFilterValues] = None


class PatchOrchestratorFilterList(RootModel[List[PatchOrchestratorFilter]]):
    root: List[PatchOrchestratorFilter] = Field(..., max_length=5, min_length=0)


class PatchPropertiesList(RootModel[List[PatchPropertyEntry]]):
    root: List[PatchPropertyEntry]


class PatchSource(BaseModel):
    Configuration: PatchSourceConfiguration
    Name: PatchSourceName
    Products: PatchSourceProductList


class PatchSourceList(RootModel[List[PatchSource]]):
    root: List[PatchSource] = Field(..., max_length=20, min_length=0)


class PutComplianceItemsRequest(BaseModel):
    ComplianceType: ComplianceTypeName
    ExecutionSummary: ComplianceExecutionSummary
    ItemContentHash: Optional[ComplianceItemContentHash] = None
    Items: ComplianceItemEntryList
    ResourceId: ComplianceResourceId
    ResourceType: ComplianceResourceType
    UploadType: Optional[ComplianceUploadType] = None


class PutInventoryRequest(BaseModel):
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    Items: InventoryItemList


class PutResourcePolicyRequest(BaseModel):
    Policy_1: Policy = Field(..., alias='Policy')
    PolicyHash_1: Optional[PolicyHash] = Field(None, alias='PolicyHash')
    PolicyId_1: Optional[PolicyId] = Field(None, alias='PolicyId')
    ResourceArn: ResourceArnString


class RegistrationMetadataItem(BaseModel):
    Key: RegistrationMetadataKey
    Value: RegistrationMetadataValue


class RegistrationMetadataList(RootModel[List[RegistrationMetadataItem]]):
    root: List[RegistrationMetadataItem]


class RelatedOpsItem(BaseModel):
    OpsItemId: String


class RelatedOpsItems(RootModel[List[RelatedOpsItem]]):
    root: List[RelatedOpsItem]


class RemoveTagsFromResourceRequest(BaseModel):
    ResourceId_1: ResourceId = Field(..., alias='ResourceId')
    ResourceType: ResourceTypeForTagging
    TagKeys: KeyList


class ResetServiceSettingRequest(BaseModel):
    SettingId: ServiceSettingId


class ResolvedTargets(BaseModel):
    ParameterValues: Optional[TargetParameterList] = None
    Truncated: Optional[Boolean] = None


class ResourceComplianceSummaryItem(BaseModel):
    ComplianceType: Optional[ComplianceTypeName] = None
    CompliantSummary_1: Optional[CompliantSummary] = Field(
        None, alias='CompliantSummary'
    )
    ExecutionSummary: Optional[ComplianceExecutionSummary] = None
    NonCompliantSummary_1: Optional[NonCompliantSummary] = Field(
        None, alias='NonCompliantSummary'
    )
    OverallSeverity: Optional[ComplianceSeverity] = None
    ResourceId: Optional[ComplianceResourceId] = None
    ResourceType: Optional[ComplianceResourceType] = None
    Status: Optional[ComplianceStatus] = None


class ResourceComplianceSummaryItemList(RootModel[List[ResourceComplianceSummaryItem]]):
    root: List[ResourceComplianceSummaryItem]


class ResourceDataSyncDestinationDataSharing(BaseModel):
    DestinationDataSharingType: Optional[ResourceDataSyncDestinationDataSharingType] = (
        None
    )


class ResourceDataSyncOrganizationalUnit(BaseModel):
    OrganizationalUnitId: Optional[ResourceDataSyncOrganizationalUnitId] = None


class ResourceDataSyncOrganizationalUnitList(
    RootModel[List[ResourceDataSyncOrganizationalUnit]]
):
    root: List[ResourceDataSyncOrganizationalUnit] = Field(
        ..., max_length=1000, min_length=1
    )


class ResourceDataSyncS3Destination(BaseModel):
    AWSKMSKeyARN: Optional[ResourceDataSyncAWSKMSKeyARN] = None
    BucketName: ResourceDataSyncS3BucketName
    DestinationDataSharing: Optional[ResourceDataSyncDestinationDataSharing] = None
    Prefix: Optional[ResourceDataSyncS3Prefix] = None
    Region: ResourceDataSyncS3Region
    SyncFormat: ResourceDataSyncS3Format


class ResumeSessionRequest(BaseModel):
    SessionId_1: SessionId = Field(..., alias='SessionId')


class ResumeSessionResponse(BaseModel):
    SessionId_1: Optional[SessionId] = Field(None, alias='SessionId')
    StreamUrl_1: Optional[StreamUrl] = Field(None, alias='StreamUrl')
    TokenValue_1: Optional[TokenValue] = Field(None, alias='TokenValue')


class ReviewInformation(BaseModel):
    ReviewedTime: Optional[DateTime] = None
    Reviewer_1: Optional[Reviewer] = Field(None, alias='Reviewer')
    Status: Optional[ReviewStatus] = None


class ReviewInformationList(RootModel[List[ReviewInformation]]):
    root: List[ReviewInformation] = Field(..., min_length=1)


class S3OutputLocation(BaseModel):
    OutputS3BucketName: Optional[S3BucketName] = None
    OutputS3KeyPrefix: Optional[S3KeyPrefix] = None
    OutputS3Region: Optional[S3Region] = None


class S3OutputUrl(BaseModel):
    OutputUrl: Optional[Url] = None


class SendAutomationSignalRequest(BaseModel):
    AutomationExecutionId_1: AutomationExecutionId = Field(
        ..., alias='AutomationExecutionId'
    )
    Payload: Optional[AutomationParameterMap] = None
    SignalType_1: SignalType = Field(..., alias='SignalType')


class ServiceSetting(BaseModel):
    ARN: Optional[String] = None
    LastModifiedDate: Optional[DateTime] = None
    LastModifiedUser: Optional[String] = None
    SettingId: Optional[ServiceSettingId] = None
    SettingValue: Optional[ServiceSettingValue] = None
    Status: Optional[String] = None


class SessionFilter(BaseModel):
    key: SessionFilterKey
    value: SessionFilterValue


class SessionFilterList(RootModel[List[SessionFilter]]):
    root: List[SessionFilter] = Field(..., max_length=6, min_length=1)


class SessionManagerOutputUrl(BaseModel):
    CloudWatchOutputUrl: Optional[SessionManagerCloudWatchOutputUrl] = None
    S3OutputUrl: Optional[SessionManagerS3OutputUrl] = None


class StartSessionResponse(BaseModel):
    SessionId_1: Optional[SessionId] = Field(None, alias='SessionId')
    StreamUrl_1: Optional[StreamUrl] = Field(None, alias='StreamUrl')
    TokenValue_1: Optional[TokenValue] = Field(None, alias='TokenValue')


class StepExecutionFilter(BaseModel):
    Key: StepExecutionFilterKey
    Values: StepExecutionFilterValueList


class StepExecutionFilterList(RootModel[List[StepExecutionFilter]]):
    root: List[StepExecutionFilter] = Field(..., max_length=6, min_length=1)


class StopAutomationExecutionRequest(BaseModel):
    AutomationExecutionId_1: AutomationExecutionId = Field(
        ..., alias='AutomationExecutionId'
    )
    Type: Optional[StopType] = None


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=1000)


class Target(BaseModel):
    Key: Optional[TargetKey] = None
    Values: Optional[TargetValues] = None


class TargetMap(RootModel[Optional[Dict[str, TargetMapValueList]]]):
    root: Optional[Dict[str, TargetMapValueList]] = None


class TargetMaps(RootModel[List[TargetMap]]):
    root: List[TargetMap] = Field(..., max_length=300, min_length=0)


class Targets(RootModel[List[Target]]):
    root: List[Target] = Field(..., max_length=5, min_length=0)


class UpdateAssociationStatusRequest(BaseModel):
    AssociationStatus_1: AssociationStatus = Field(..., alias='AssociationStatus')
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    Name: DocumentARN


class UpdateDocumentDefaultVersionResult(BaseModel):
    Description: Optional[DocumentDefaultVersionDescription] = None


class UpdateDocumentRequest(BaseModel):
    Attachments: Optional[AttachmentsSourceList] = None
    Content: DocumentContent
    DisplayName: Optional[DocumentDisplayName] = None
    DocumentFormat_1: Optional[DocumentFormat] = Field(None, alias='DocumentFormat')
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    Name: DocumentName
    TargetType_1: Optional[TargetType] = Field(None, alias='TargetType')
    VersionName: Optional[DocumentVersionName] = None


class UpdateMaintenanceWindowTargetRequest(BaseModel):
    Description: Optional[MaintenanceWindowDescription] = None
    Name: Optional[MaintenanceWindowName] = None
    OwnerInformation_1: Optional[OwnerInformation] = Field(
        None, alias='OwnerInformation'
    )
    Replace: Optional[Boolean] = None
    Targets_1: Optional[Targets] = Field(None, alias='Targets')
    WindowId: MaintenanceWindowId
    WindowTargetId: MaintenanceWindowTargetId


class UpdateMaintenanceWindowTargetResult(BaseModel):
    Description: Optional[MaintenanceWindowDescription] = None
    Name: Optional[MaintenanceWindowName] = None
    OwnerInformation_1: Optional[OwnerInformation] = Field(
        None, alias='OwnerInformation'
    )
    Targets_1: Optional[Targets] = Field(None, alias='Targets')
    WindowId: Optional[MaintenanceWindowId] = None
    WindowTargetId: Optional[MaintenanceWindowTargetId] = None


class UpdateOpsItemRequest(BaseModel):
    ActualEndTime: Optional[DateTime] = None
    ActualStartTime: Optional[DateTime] = None
    Category: Optional[OpsItemCategory] = None
    Description: Optional[OpsItemDescription] = None
    Notifications: Optional[OpsItemNotifications] = None
    OperationalData: Optional[OpsItemOperationalData] = None
    OperationalDataToDelete: Optional[OpsItemOpsDataKeysList] = None
    OpsItemArn_1: Optional[OpsItemArn] = Field(None, alias='OpsItemArn')
    OpsItemId_1: OpsItemId = Field(..., alias='OpsItemId')
    PlannedEndTime: Optional[DateTime] = None
    PlannedStartTime: Optional[DateTime] = None
    Priority: Optional[OpsItemPriority] = None
    RelatedOpsItems_1: Optional[RelatedOpsItems] = Field(None, alias='RelatedOpsItems')
    Severity: Optional[OpsItemSeverity] = None
    Status: Optional[OpsItemStatus] = None
    Title: Optional[OpsItemTitle] = None


class Activation(BaseModel):
    ActivationId_1: Optional[ActivationId] = Field(None, alias='ActivationId')
    CreatedDate_1: Optional[CreatedDate] = Field(None, alias='CreatedDate')
    DefaultInstanceName_1: Optional[DefaultInstanceName] = Field(
        None, alias='DefaultInstanceName'
    )
    Description: Optional[ActivationDescription] = None
    ExpirationDate_1: Optional[ExpirationDate] = Field(None, alias='ExpirationDate')
    Expired: Optional[Boolean] = None
    IamRole_1: Optional[IamRole] = Field(None, alias='IamRole')
    RegistrationLimit_1: Optional[RegistrationLimit] = Field(
        None, alias='RegistrationLimit'
    )
    RegistrationsCount_1: Optional[RegistrationsCount] = Field(
        None, alias='RegistrationsCount'
    )
    Tags: Optional[TagList] = None


class ActivationList(RootModel[List[Activation]]):
    root: List[Activation]


class AddTagsToResourceRequest(BaseModel):
    ResourceId_1: ResourceId = Field(..., alias='ResourceId')
    ResourceType: ResourceTypeForTagging
    Tags: TagList


class AlarmConfiguration(BaseModel):
    Alarms: AlarmList
    IgnorePollAlarmFailure: Optional[Boolean] = None


class AssociationExecution(BaseModel):
    AlarmConfiguration_1: Optional[AlarmConfiguration] = Field(
        None, alias='AlarmConfiguration'
    )
    AssociationId_1: Optional[AssociationId] = Field(None, alias='AssociationId')
    AssociationVersion_1: Optional[AssociationVersion] = Field(
        None, alias='AssociationVersion'
    )
    CreatedTime: Optional[DateTime] = None
    DetailedStatus: Optional[StatusName] = None
    ExecutionId: Optional[AssociationExecutionId] = None
    LastExecutionDate: Optional[DateTime] = None
    ResourceCountByStatus_1: Optional[ResourceCountByStatus] = Field(
        None, alias='ResourceCountByStatus'
    )
    Status: Optional[StatusName] = None
    TriggeredAlarms: Optional[AlarmStateInformationList] = None


class AssociationExecutionTarget(BaseModel):
    AssociationId_1: Optional[AssociationId] = Field(None, alias='AssociationId')
    AssociationVersion_1: Optional[AssociationVersion] = Field(
        None, alias='AssociationVersion'
    )
    DetailedStatus: Optional[StatusName] = None
    ExecutionId: Optional[AssociationExecutionId] = None
    LastExecutionDate: Optional[DateTime] = None
    OutputSource_1: Optional[OutputSource] = Field(None, alias='OutputSource')
    ResourceId: Optional[AssociationResourceId] = None
    ResourceType: Optional[AssociationResourceType] = None
    Status: Optional[StatusName] = None


class AssociationExecutionTargetsList(RootModel[List[AssociationExecutionTarget]]):
    root: List[AssociationExecutionTarget]


class AssociationExecutionsList(RootModel[List[AssociationExecution]]):
    root: List[AssociationExecution]


class AssociationOverview(BaseModel):
    AssociationStatusAggregatedCount_1: Optional[AssociationStatusAggregatedCount] = (
        Field(None, alias='AssociationStatusAggregatedCount')
    )
    DetailedStatus: Optional[StatusName] = None
    Status: Optional[StatusName] = None


class Command(BaseModel):
    AlarmConfiguration_1: Optional[AlarmConfiguration] = Field(
        None, alias='AlarmConfiguration'
    )
    CloudWatchOutputConfig_1: Optional[CloudWatchOutputConfig] = Field(
        None, alias='CloudWatchOutputConfig'
    )
    CommandId_1: Optional[CommandId] = Field(None, alias='CommandId')
    Comment_1: Optional[Comment] = Field(None, alias='Comment')
    CompletedCount_1: Optional[CompletedCount] = Field(None, alias='CompletedCount')
    DeliveryTimedOutCount_1: Optional[DeliveryTimedOutCount] = Field(
        None, alias='DeliveryTimedOutCount'
    )
    DocumentName_1: Optional[DocumentName] = Field(None, alias='DocumentName')
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    ErrorCount_1: Optional[ErrorCount] = Field(None, alias='ErrorCount')
    ExpiresAfter: Optional[DateTime] = None
    InstanceIds: Optional[InstanceIdList] = None
    MaxConcurrency_1: Optional[MaxConcurrency] = Field(None, alias='MaxConcurrency')
    MaxErrors_1: Optional[MaxErrors] = Field(None, alias='MaxErrors')
    NotificationConfig_1: Optional[NotificationConfig] = Field(
        None, alias='NotificationConfig'
    )
    OutputS3BucketName: Optional[S3BucketName] = None
    OutputS3KeyPrefix: Optional[S3KeyPrefix] = None
    OutputS3Region: Optional[S3Region] = None
    Parameters_1: Optional[Parameters] = Field(None, alias='Parameters')
    RequestedDateTime: Optional[DateTime] = None
    ServiceRole_1: Optional[ServiceRole] = Field(None, alias='ServiceRole')
    Status: Optional[CommandStatus] = None
    StatusDetails_1: Optional[StatusDetails] = Field(None, alias='StatusDetails')
    TargetCount_1: Optional[TargetCount] = Field(None, alias='TargetCount')
    Targets_1: Optional[Targets] = Field(None, alias='Targets')
    TimeoutSeconds_1: Optional[TimeoutSeconds] = Field(None, alias='TimeoutSeconds')
    TriggeredAlarms: Optional[AlarmStateInformationList] = None


class CommandInvocation(BaseModel):
    CloudWatchOutputConfig_1: Optional[CloudWatchOutputConfig] = Field(
        None, alias='CloudWatchOutputConfig'
    )
    CommandId_1: Optional[CommandId] = Field(None, alias='CommandId')
    CommandPlugins: Optional[CommandPluginList] = None
    Comment_1: Optional[Comment] = Field(None, alias='Comment')
    DocumentName_1: Optional[DocumentName] = Field(None, alias='DocumentName')
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    InstanceId_1: Optional[InstanceId] = Field(None, alias='InstanceId')
    InstanceName: Optional[InstanceTagName] = None
    NotificationConfig_1: Optional[NotificationConfig] = Field(
        None, alias='NotificationConfig'
    )
    RequestedDateTime: Optional[DateTime] = None
    ServiceRole_1: Optional[ServiceRole] = Field(None, alias='ServiceRole')
    StandardErrorUrl: Optional[Url] = None
    StandardOutputUrl: Optional[Url] = None
    Status: Optional[CommandInvocationStatus] = None
    StatusDetails_1: Optional[StatusDetails] = Field(None, alias='StatusDetails')
    TraceOutput: Optional[InvocationTraceOutput] = None


class CommandInvocationList(RootModel[List[CommandInvocation]]):
    root: List[CommandInvocation]


class CommandList(RootModel[List[Command]]):
    root: List[Command]


class ComplianceSummaryItem(BaseModel):
    ComplianceType: Optional[ComplianceTypeName] = None
    CompliantSummary_1: Optional[CompliantSummary] = Field(
        None, alias='CompliantSummary'
    )
    NonCompliantSummary_1: Optional[NonCompliantSummary] = Field(
        None, alias='NonCompliantSummary'
    )


class ComplianceSummaryItemList(RootModel[List[ComplianceSummaryItem]]):
    root: List[ComplianceSummaryItem]


class CreateActivationRequest(BaseModel):
    DefaultInstanceName_1: Optional[DefaultInstanceName] = Field(
        None, alias='DefaultInstanceName'
    )
    Description: Optional[ActivationDescription] = None
    ExpirationDate_1: Optional[ExpirationDate] = Field(None, alias='ExpirationDate')
    IamRole_1: IamRole = Field(..., alias='IamRole')
    RegistrationLimit_1: Optional[RegistrationLimit] = Field(
        None, alias='RegistrationLimit'
    )
    RegistrationMetadata: Optional[RegistrationMetadataList] = None
    Tags: Optional[TagList] = None


class CreateDocumentRequest(BaseModel):
    Attachments: Optional[AttachmentsSourceList] = None
    Content: DocumentContent
    DisplayName: Optional[DocumentDisplayName] = None
    DocumentFormat_1: Optional[DocumentFormat] = Field(None, alias='DocumentFormat')
    DocumentType_1: Optional[DocumentType] = Field(None, alias='DocumentType')
    Name: DocumentName
    Requires: Optional[DocumentRequiresList] = None
    Tags: Optional[TagList] = None
    TargetType_1: Optional[TargetType] = Field(None, alias='TargetType')
    VersionName: Optional[DocumentVersionName] = None


class CreateMaintenanceWindowRequest(BaseModel):
    AllowUnassociatedTargets: MaintenanceWindowAllowUnassociatedTargets
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    Cutoff: MaintenanceWindowCutoff
    Description: Optional[MaintenanceWindowDescription] = None
    Duration: MaintenanceWindowDurationHours
    EndDate: Optional[MaintenanceWindowStringDateTime] = None
    Name: MaintenanceWindowName
    Schedule: MaintenanceWindowSchedule
    ScheduleOffset: Optional[MaintenanceWindowOffset] = None
    ScheduleTimezone: Optional[MaintenanceWindowTimezone] = None
    StartDate: Optional[MaintenanceWindowStringDateTime] = None
    Tags: Optional[TagList] = None


class CreateOpsItemRequest(BaseModel):
    AccountId: Optional[OpsItemAccountId] = None
    ActualEndTime: Optional[DateTime] = None
    ActualStartTime: Optional[DateTime] = None
    Category: Optional[OpsItemCategory] = None
    Description: OpsItemDescription
    Notifications: Optional[OpsItemNotifications] = None
    OperationalData: Optional[OpsItemOperationalData] = None
    OpsItemType_1: Optional[OpsItemType] = Field(None, alias='OpsItemType')
    PlannedEndTime: Optional[DateTime] = None
    PlannedStartTime: Optional[DateTime] = None
    Priority: Optional[OpsItemPriority] = None
    RelatedOpsItems_1: Optional[RelatedOpsItems] = Field(None, alias='RelatedOpsItems')
    Severity: Optional[OpsItemSeverity] = None
    Source: OpsItemSource
    Tags: Optional[TagList] = None
    Title: OpsItemTitle


class DescribeActivationsResult(BaseModel):
    ActivationList_1: Optional[ActivationList] = Field(None, alias='ActivationList')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeAssociationExecutionTargetsResult(BaseModel):
    AssociationExecutionTargets: Optional[AssociationExecutionTargetsList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeAssociationExecutionsResult(BaseModel):
    AssociationExecutions: Optional[AssociationExecutionsList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeAutomationStepExecutionsRequest(BaseModel):
    AutomationExecutionId_1: AutomationExecutionId = Field(
        ..., alias='AutomationExecutionId'
    )
    Filters: Optional[StepExecutionFilterList] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ReverseOrder: Optional[Boolean] = None


class DescribeAvailablePatchesRequest(BaseModel):
    Filters: Optional[PatchOrchestratorFilterList] = None
    MaxResults: Optional[PatchBaselineMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeAvailablePatchesResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Patches: Optional[PatchList] = None


class DescribeEffectiveInstanceAssociationsResult(BaseModel):
    Associations: Optional[InstanceAssociationList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeInstanceInformationRequest(BaseModel):
    Filters: Optional[InstanceInformationStringFilterList] = None
    InstanceInformationFilterList_1: Optional[InstanceInformationFilterList] = Field(
        None, alias='InstanceInformationFilterList'
    )
    MaxResults: Optional[MaxResultsEC2Compatible] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeInstancePatchStatesForPatchGroupRequest(BaseModel):
    Filters: Optional[InstancePatchStateFilterList] = None
    MaxResults: Optional[PatchComplianceMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    PatchGroup_1: PatchGroup = Field(..., alias='PatchGroup')


class DescribeInstancePatchStatesForPatchGroupResult(BaseModel):
    InstancePatchStates: Optional[InstancePatchStatesList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeInstancePatchStatesResult(BaseModel):
    InstancePatchStates: Optional[InstancePatchStateList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeInstancePatchesRequest(BaseModel):
    Filters: Optional[PatchOrchestratorFilterList] = None
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    MaxResults: Optional[PatchComplianceMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeInstancePatchesResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Patches: Optional[PatchComplianceDataList] = None


class DescribeMaintenanceWindowExecutionTaskInvocationsRequest(BaseModel):
    Filters: Optional[MaintenanceWindowFilterList] = None
    MaxResults: Optional[MaintenanceWindowMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TaskId: MaintenanceWindowExecutionTaskId
    WindowExecutionId: MaintenanceWindowExecutionId


class DescribeMaintenanceWindowExecutionTaskInvocationsResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    WindowExecutionTaskInvocationIdentities: Optional[
        MaintenanceWindowExecutionTaskInvocationIdentityList
    ] = None


class DescribeMaintenanceWindowExecutionTasksRequest(BaseModel):
    Filters: Optional[MaintenanceWindowFilterList] = None
    MaxResults: Optional[MaintenanceWindowMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    WindowExecutionId: MaintenanceWindowExecutionId


class DescribeMaintenanceWindowExecutionsRequest(BaseModel):
    Filters: Optional[MaintenanceWindowFilterList] = None
    MaxResults: Optional[MaintenanceWindowMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    WindowId: MaintenanceWindowId


class DescribeMaintenanceWindowExecutionsResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    WindowExecutions: Optional[MaintenanceWindowExecutionList] = None


class DescribeMaintenanceWindowScheduleRequest(BaseModel):
    Filters: Optional[PatchOrchestratorFilterList] = None
    MaxResults: Optional[MaintenanceWindowSearchMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResourceType: Optional[MaintenanceWindowResourceType] = None
    Targets_1: Optional[Targets] = Field(None, alias='Targets')
    WindowId: Optional[MaintenanceWindowId] = None


class DescribeMaintenanceWindowTargetsRequest(BaseModel):
    Filters: Optional[MaintenanceWindowFilterList] = None
    MaxResults: Optional[MaintenanceWindowMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    WindowId: MaintenanceWindowId


class DescribeMaintenanceWindowTasksRequest(BaseModel):
    Filters: Optional[MaintenanceWindowFilterList] = None
    MaxResults: Optional[MaintenanceWindowMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    WindowId: MaintenanceWindowId


class DescribeMaintenanceWindowsForTargetRequest(BaseModel):
    MaxResults: Optional[MaintenanceWindowSearchMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResourceType: MaintenanceWindowResourceType
    Targets_1: Targets = Field(..., alias='Targets')


class DescribeMaintenanceWindowsForTargetResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    WindowIdentities: Optional[MaintenanceWindowsForTargetList] = None


class DescribeMaintenanceWindowsRequest(BaseModel):
    Filters: Optional[MaintenanceWindowFilterList] = None
    MaxResults: Optional[MaintenanceWindowMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeMaintenanceWindowsResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    WindowIdentities: Optional[MaintenanceWindowIdentityList] = None


class DescribeOpsItemsRequest(BaseModel):
    MaxResults: Optional[OpsItemMaxResults] = None
    NextToken: Optional[String] = None
    OpsItemFilters_1: Optional[OpsItemFilters] = Field(None, alias='OpsItemFilters')


class DescribeParametersRequest(BaseModel):
    Filters: Optional[ParametersFilterList] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ParameterFilters: Optional[ParameterStringFilterList] = None


class DescribePatchBaselinesRequest(BaseModel):
    Filters: Optional[PatchOrchestratorFilterList] = None
    MaxResults: Optional[PatchBaselineMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribePatchGroupsRequest(BaseModel):
    Filters: Optional[PatchOrchestratorFilterList] = None
    MaxResults: Optional[PatchBaselineMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribePatchPropertiesResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Properties: Optional[PatchPropertiesList] = None


class DescribeSessionsRequest(BaseModel):
    Filters: Optional[SessionFilterList] = None
    MaxResults: Optional[SessionMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    State: SessionState


class DocumentDescription(BaseModel):
    ApprovedVersion: Optional[DocumentVersion] = None
    AttachmentsInformation: Optional[AttachmentInformationList] = None
    Author: Optional[DocumentAuthor] = None
    Category: Optional[CategoryList] = None
    CategoryEnum: Optional[CategoryEnumList] = None
    CreatedDate: Optional[DateTime] = None
    DefaultVersion: Optional[DocumentVersion] = None
    Description: Optional[DescriptionInDocument] = None
    DisplayName: Optional[DocumentDisplayName] = None
    DocumentFormat_1: Optional[DocumentFormat] = Field(None, alias='DocumentFormat')
    DocumentType_1: Optional[DocumentType] = Field(None, alias='DocumentType')
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    Hash: Optional[DocumentHash] = None
    HashType: Optional[DocumentHashType] = None
    LatestVersion: Optional[DocumentVersion] = None
    Name: Optional[DocumentARN] = None
    Owner: Optional[DocumentOwner] = None
    Parameters: Optional[DocumentParameterList] = None
    PendingReviewVersion: Optional[DocumentVersion] = None
    PlatformTypes: Optional[PlatformTypeList] = None
    Requires: Optional[DocumentRequiresList] = None
    ReviewInformation: Optional[ReviewInformationList] = None
    ReviewStatus_1: Optional[ReviewStatus] = Field(None, alias='ReviewStatus')
    SchemaVersion: Optional[DocumentSchemaVersion] = None
    Sha1: Optional[DocumentSha1] = None
    Status: Optional[DocumentStatus] = None
    StatusInformation: Optional[DocumentStatusInformation] = None
    Tags: Optional[TagList] = None
    TargetType_1: Optional[TargetType] = Field(None, alias='TargetType')
    VersionName: Optional[DocumentVersionName] = None


class DocumentIdentifier(BaseModel):
    Author: Optional[DocumentAuthor] = None
    CreatedDate: Optional[DateTime] = None
    DisplayName: Optional[DocumentDisplayName] = None
    DocumentFormat_1: Optional[DocumentFormat] = Field(None, alias='DocumentFormat')
    DocumentType_1: Optional[DocumentType] = Field(None, alias='DocumentType')
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    Name: Optional[DocumentARN] = None
    Owner: Optional[DocumentOwner] = None
    PlatformTypes: Optional[PlatformTypeList] = None
    Requires: Optional[DocumentRequiresList] = None
    ReviewStatus_1: Optional[ReviewStatus] = Field(None, alias='ReviewStatus')
    SchemaVersion: Optional[DocumentSchemaVersion] = None
    Tags: Optional[TagList] = None
    TargetType_1: Optional[TargetType] = Field(None, alias='TargetType')
    VersionName: Optional[DocumentVersionName] = None


class DocumentIdentifierList(RootModel[List[DocumentIdentifier]]):
    root: List[DocumentIdentifier]


class DocumentReviewCommentList(RootModel[List[DocumentReviewCommentSource]]):
    root: List[DocumentReviewCommentSource] = Field(..., max_length=1, min_length=0)


class DocumentReviewerResponseSource(BaseModel):
    Comment: Optional[DocumentReviewCommentList] = None
    CreateTime: Optional[DateTime] = None
    ReviewStatus_1: Optional[ReviewStatus] = Field(None, alias='ReviewStatus')
    Reviewer_1: Optional[Reviewer] = Field(None, alias='Reviewer')
    UpdatedTime: Optional[DateTime] = None


class DocumentReviews(BaseModel):
    Action: DocumentReviewAction
    Comment: Optional[DocumentReviewCommentList] = None


class EffectivePatch(BaseModel):
    Patch_1: Optional[Patch] = Field(None, alias='Patch')
    PatchStatus_1: Optional[PatchStatus] = Field(None, alias='PatchStatus')


class EffectivePatchList(RootModel[List[EffectivePatch]]):
    root: List[EffectivePatch]


class GetInventoryResult(BaseModel):
    Entities: Optional[InventoryResultEntityList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetInventorySchemaResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Schemas: Optional[InventoryItemSchemaResultList] = None


class GetMaintenanceWindowExecutionTaskResult(BaseModel):
    AlarmConfiguration_1: Optional[AlarmConfiguration] = Field(
        None, alias='AlarmConfiguration'
    )
    EndTime: Optional[DateTime] = None
    MaxConcurrency_1: Optional[MaxConcurrency] = Field(None, alias='MaxConcurrency')
    MaxErrors_1: Optional[MaxErrors] = Field(None, alias='MaxErrors')
    Priority: Optional[MaintenanceWindowTaskPriority] = None
    ServiceRole_1: Optional[ServiceRole] = Field(None, alias='ServiceRole')
    StartTime: Optional[DateTime] = None
    Status: Optional[MaintenanceWindowExecutionStatus] = None
    StatusDetails: Optional[MaintenanceWindowExecutionStatusDetails] = None
    TaskArn: Optional[MaintenanceWindowTaskArn] = None
    TaskExecutionId: Optional[MaintenanceWindowExecutionTaskId] = None
    TaskParameters: Optional[MaintenanceWindowTaskParametersList] = None
    TriggeredAlarms: Optional[AlarmStateInformationList] = None
    Type: Optional[MaintenanceWindowTaskType] = None
    WindowExecutionId: Optional[MaintenanceWindowExecutionId] = None


class GetParameterResult(BaseModel):
    Parameter_1: Optional[Parameter] = Field(None, alias='Parameter')


class GetParametersByPathRequest(BaseModel):
    MaxResults: Optional[GetParametersByPathMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ParameterFilters: Optional[ParameterStringFilterList] = None
    Path: PSParameterName
    Recursive: Optional[Boolean] = None
    WithDecryption: Optional[Boolean] = None


class GetParametersByPathResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Parameters: Optional[ParameterList] = None


class GetParametersResult(BaseModel):
    InvalidParameters: Optional[ParameterNameList] = None
    Parameters: Optional[ParameterList] = None


class GetResourcePoliciesResponseEntries(
    RootModel[List[GetResourcePoliciesResponseEntry]]
):
    root: List[GetResourcePoliciesResponseEntry]


class GetServiceSettingResult(BaseModel):
    ServiceSetting_1: Optional[ServiceSetting] = Field(None, alias='ServiceSetting')


class InstanceAggregatedAssociationOverview(BaseModel):
    DetailedStatus: Optional[StatusName] = None
    InstanceAssociationStatusAggregatedCount_1: Optional[
        InstanceAssociationStatusAggregatedCount
    ] = Field(None, alias='InstanceAssociationStatusAggregatedCount')


class InstanceAssociationOutputLocation(BaseModel):
    S3Location: Optional[S3OutputLocation] = None


class InstanceAssociationOutputUrl(BaseModel):
    S3OutputUrl_1: Optional[S3OutputUrl] = Field(None, alias='S3OutputUrl')


class InstanceAssociationStatusInfo(BaseModel):
    AssociationId_1: Optional[AssociationId] = Field(None, alias='AssociationId')
    AssociationName_1: Optional[AssociationName] = Field(None, alias='AssociationName')
    AssociationVersion_1: Optional[AssociationVersion] = Field(
        None, alias='AssociationVersion'
    )
    DetailedStatus: Optional[StatusName] = None
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    ErrorCode: Optional[AgentErrorCode] = None
    ExecutionDate: Optional[DateTime] = None
    ExecutionSummary: Optional[InstanceAssociationExecutionSummary] = None
    InstanceId_1: Optional[InstanceId] = Field(None, alias='InstanceId')
    Name: Optional[DocumentARN] = None
    OutputUrl: Optional[InstanceAssociationOutputUrl] = None
    Status: Optional[StatusName] = None


class InstanceAssociationStatusInfos(RootModel[List[InstanceAssociationStatusInfo]]):
    root: List[InstanceAssociationStatusInfo]


class InstanceInformation(BaseModel):
    ActivationId_1: Optional[ActivationId] = Field(None, alias='ActivationId')
    AgentVersion: Optional[Version] = None
    AssociationOverview: Optional[InstanceAggregatedAssociationOverview] = None
    AssociationStatus: Optional[StatusName] = None
    ComputerName_1: Optional[ComputerName] = Field(None, alias='ComputerName')
    IPAddress_1: Optional[IPAddress] = Field(None, alias='IPAddress')
    IamRole_1: Optional[IamRole] = Field(None, alias='IamRole')
    InstanceId_1: Optional[InstanceId] = Field(None, alias='InstanceId')
    IsLatestVersion: Optional[Boolean] = None
    LastAssociationExecutionDate: Optional[DateTime] = None
    LastPingDateTime: Optional[DateTime] = None
    LastSuccessfulAssociationExecutionDate: Optional[DateTime] = None
    Name: Optional[String] = None
    PingStatus_1: Optional[PingStatus] = Field(None, alias='PingStatus')
    PlatformName: Optional[String] = None
    PlatformType_1: Optional[PlatformType] = Field(None, alias='PlatformType')
    PlatformVersion: Optional[String] = None
    RegistrationDate: Optional[DateTime] = None
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')
    SourceId_1: Optional[SourceId] = Field(None, alias='SourceId')
    SourceType_1: Optional[SourceType] = Field(None, alias='SourceType')


class InstanceInformationList(RootModel[List[InstanceInformation]]):
    root: List[InstanceInformation]


class InventoryDeletionSummary(BaseModel):
    RemainingCount_1: Optional[RemainingCount] = Field(None, alias='RemainingCount')
    SummaryItems: Optional[InventoryDeletionSummaryItems] = None
    TotalCount_1: Optional[TotalCount] = Field(None, alias='TotalCount')


class ListCommandInvocationsResult(BaseModel):
    CommandInvocations: Optional[CommandInvocationList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListCommandsResult(BaseModel):
    Commands: Optional[CommandList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListComplianceSummariesResult(BaseModel):
    ComplianceSummaryItems: Optional[ComplianceSummaryItemList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDocumentsResult(BaseModel):
    DocumentIdentifiers: Optional[DocumentIdentifierList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListOpsItemEventsRequest(BaseModel):
    Filters: Optional[OpsItemEventFilters] = None
    MaxResults: Optional[OpsItemEventMaxResults] = None
    NextToken: Optional[String] = None


class ListOpsItemRelatedItemsRequest(BaseModel):
    Filters: Optional[OpsItemRelatedItemsFilters] = None
    MaxResults: Optional[OpsItemRelatedItemsMaxResults] = None
    NextToken: Optional[String] = None
    OpsItemId_1: Optional[OpsItemId] = Field(None, alias='OpsItemId')


class ListOpsMetadataRequest(BaseModel):
    Filters: Optional[OpsMetadataFilterList] = None
    MaxResults: Optional[ListOpsMetadataMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListOpsMetadataResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    OpsMetadataList_1: Optional[OpsMetadataList] = Field(None, alias='OpsMetadataList')


class ListResourceComplianceSummariesResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResourceComplianceSummaryItems: Optional[ResourceComplianceSummaryItemList] = None


class ListTagsForResourceResult(BaseModel):
    TagList_1: Optional[TagList] = Field(None, alias='TagList')


class MaintenanceWindowExecutionTaskIdentity(BaseModel):
    AlarmConfiguration_1: Optional[AlarmConfiguration] = Field(
        None, alias='AlarmConfiguration'
    )
    EndTime: Optional[DateTime] = None
    StartTime: Optional[DateTime] = None
    Status: Optional[MaintenanceWindowExecutionStatus] = None
    StatusDetails: Optional[MaintenanceWindowExecutionStatusDetails] = None
    TaskArn: Optional[MaintenanceWindowTaskArn] = None
    TaskExecutionId: Optional[MaintenanceWindowExecutionTaskId] = None
    TaskType: Optional[MaintenanceWindowTaskType] = None
    TriggeredAlarms: Optional[AlarmStateInformationList] = None
    WindowExecutionId: Optional[MaintenanceWindowExecutionId] = None


class MaintenanceWindowExecutionTaskIdentityList(
    RootModel[List[MaintenanceWindowExecutionTaskIdentity]]
):
    root: List[MaintenanceWindowExecutionTaskIdentity]


class MaintenanceWindowRunCommandParameters(BaseModel):
    CloudWatchOutputConfig_1: Optional[CloudWatchOutputConfig] = Field(
        None, alias='CloudWatchOutputConfig'
    )
    Comment_1: Optional[Comment] = Field(None, alias='Comment')
    DocumentHash_1: Optional[DocumentHash] = Field(None, alias='DocumentHash')
    DocumentHashType_1: Optional[DocumentHashType] = Field(
        None, alias='DocumentHashType'
    )
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    NotificationConfig_1: Optional[NotificationConfig] = Field(
        None, alias='NotificationConfig'
    )
    OutputS3BucketName: Optional[S3BucketName] = None
    OutputS3KeyPrefix: Optional[S3KeyPrefix] = None
    Parameters_1: Optional[Parameters] = Field(None, alias='Parameters')
    ServiceRoleArn: Optional[ServiceRole] = None
    TimeoutSeconds_1: Optional[TimeoutSeconds] = Field(None, alias='TimeoutSeconds')


class MaintenanceWindowTarget(BaseModel):
    Description: Optional[MaintenanceWindowDescription] = None
    Name: Optional[MaintenanceWindowName] = None
    OwnerInformation_1: Optional[OwnerInformation] = Field(
        None, alias='OwnerInformation'
    )
    ResourceType: Optional[MaintenanceWindowResourceType] = None
    Targets_1: Optional[Targets] = Field(None, alias='Targets')
    WindowId: Optional[MaintenanceWindowId] = None
    WindowTargetId: Optional[MaintenanceWindowTargetId] = None


class MaintenanceWindowTargetList(RootModel[List[MaintenanceWindowTarget]]):
    root: List[MaintenanceWindowTarget]


class MaintenanceWindowTask(BaseModel):
    AlarmConfiguration_1: Optional[AlarmConfiguration] = Field(
        None, alias='AlarmConfiguration'
    )
    CutoffBehavior: Optional[MaintenanceWindowTaskCutoffBehavior] = None
    Description: Optional[MaintenanceWindowDescription] = None
    LoggingInfo_1: Optional[LoggingInfo] = Field(None, alias='LoggingInfo')
    MaxConcurrency_1: Optional[MaxConcurrency] = Field(None, alias='MaxConcurrency')
    MaxErrors_1: Optional[MaxErrors] = Field(None, alias='MaxErrors')
    Name: Optional[MaintenanceWindowName] = None
    Priority: Optional[MaintenanceWindowTaskPriority] = None
    ServiceRoleArn: Optional[ServiceRole] = None
    Targets_1: Optional[Targets] = Field(None, alias='Targets')
    TaskArn: Optional[MaintenanceWindowTaskArn] = None
    TaskParameters: Optional[MaintenanceWindowTaskParameters] = None
    Type: Optional[MaintenanceWindowTaskType] = None
    WindowId: Optional[MaintenanceWindowId] = None
    WindowTaskId: Optional[MaintenanceWindowTaskId] = None


class MaintenanceWindowTaskInvocationParameters(BaseModel):
    Automation: Optional[MaintenanceWindowAutomationParameters] = None
    Lambda: Optional[MaintenanceWindowLambdaParameters] = None
    RunCommand: Optional[MaintenanceWindowRunCommandParameters] = None
    StepFunctions: Optional[MaintenanceWindowStepFunctionsParameters] = None


class MaintenanceWindowTaskList(RootModel[List[MaintenanceWindowTask]]):
    root: List[MaintenanceWindowTask]


class MetadataMap(RootModel[Optional[Dict[str, MetadataValue]]]):
    root: Optional[Dict[str, MetadataValue]] = None


class OpsEntity(BaseModel):
    Data: Optional[OpsEntityItemMap] = None
    Id: Optional[OpsEntityId] = None


class OpsEntityList(RootModel[List[OpsEntity]]):
    root: List[OpsEntity]


class OpsItem(BaseModel):
    ActualEndTime: Optional[DateTime] = None
    ActualStartTime: Optional[DateTime] = None
    Category: Optional[OpsItemCategory] = None
    CreatedBy: Optional[String] = None
    CreatedTime: Optional[DateTime] = None
    Description: Optional[OpsItemDescription] = None
    LastModifiedBy: Optional[String] = None
    LastModifiedTime: Optional[DateTime] = None
    Notifications: Optional[OpsItemNotifications] = None
    OperationalData: Optional[OpsItemOperationalData] = None
    OpsItemArn_1: Optional[OpsItemArn] = Field(None, alias='OpsItemArn')
    OpsItemId_1: Optional[OpsItemId] = Field(None, alias='OpsItemId')
    OpsItemType_1: Optional[OpsItemType] = Field(None, alias='OpsItemType')
    PlannedEndTime: Optional[DateTime] = None
    PlannedStartTime: Optional[DateTime] = None
    Priority: Optional[OpsItemPriority] = None
    RelatedOpsItems_1: Optional[RelatedOpsItems] = Field(None, alias='RelatedOpsItems')
    Severity: Optional[OpsItemSeverity] = None
    Source: Optional[OpsItemSource] = None
    Status: Optional[OpsItemStatus] = None
    Title: Optional[OpsItemTitle] = None
    Version: Optional[String] = None


class OpsItemEventSummary(BaseModel):
    CreatedBy: Optional[OpsItemIdentity] = None
    CreatedTime: Optional[DateTime] = None
    Detail: Optional[String] = None
    DetailType: Optional[String] = None
    EventId: Optional[String] = None
    OpsItemId: Optional[String] = None
    Source: Optional[String] = None


class OpsItemRelatedItemSummaries(RootModel[List[OpsItemRelatedItemSummary]]):
    root: List[OpsItemRelatedItemSummary]


class OpsItemSummaries(RootModel[List[OpsItemSummary]]):
    root: List[OpsItemSummary]


class ParameterHistory(BaseModel):
    AllowedPattern_1: Optional[AllowedPattern] = Field(None, alias='AllowedPattern')
    DataType: Optional[ParameterDataType] = None
    Description: Optional[ParameterDescription] = None
    KeyId: Optional[ParameterKeyId] = None
    Labels: Optional[ParameterLabelList] = None
    LastModifiedDate: Optional[DateTime] = None
    LastModifiedUser: Optional[String] = None
    Name: Optional[PSParameterName] = None
    Policies: Optional[ParameterPolicyList] = None
    Tier: Optional[ParameterTier] = None
    Type: Optional[ParameterType] = None
    Value: Optional[PSParameterValue] = None
    Version: Optional[PSParameterVersion] = None


class ParameterHistoryList(RootModel[List[ParameterHistory]]):
    root: List[ParameterHistory]


class ParameterMetadata(BaseModel):
    AllowedPattern_1: Optional[AllowedPattern] = Field(None, alias='AllowedPattern')
    DataType: Optional[ParameterDataType] = None
    Description: Optional[ParameterDescription] = None
    KeyId: Optional[ParameterKeyId] = None
    LastModifiedDate: Optional[DateTime] = None
    LastModifiedUser: Optional[String] = None
    Name: Optional[PSParameterName] = None
    Policies: Optional[ParameterPolicyList] = None
    Tier: Optional[ParameterTier] = None
    Type: Optional[ParameterType] = None
    Version: Optional[PSParameterVersion] = None


class ParameterMetadataList(RootModel[List[ParameterMetadata]]):
    root: List[ParameterMetadata]


class PatchFilterGroup(BaseModel):
    PatchFilters: PatchFilterList


class PatchRule(BaseModel):
    ApproveAfterDays_1: Optional[ApproveAfterDays] = Field(
        None, alias='ApproveAfterDays'
    )
    ApproveUntilDate: Optional[PatchStringDateTime] = None
    ComplianceLevel: Optional[PatchComplianceLevel] = None
    EnableNonSecurity: Optional[Boolean] = None
    PatchFilterGroup_1: PatchFilterGroup = Field(..., alias='PatchFilterGroup')


class PatchRuleList(RootModel[List[PatchRule]]):
    root: List[PatchRule] = Field(..., max_length=10, min_length=0)


class PutParameterRequest(BaseModel):
    AllowedPattern_1: Optional[AllowedPattern] = Field(None, alias='AllowedPattern')
    DataType: Optional[ParameterDataType] = None
    Description: Optional[ParameterDescription] = None
    KeyId: Optional[ParameterKeyId] = None
    Name: PSParameterName
    Overwrite: Optional[Boolean] = None
    Policies: Optional[ParameterPolicies] = None
    Tags: Optional[TagList] = None
    Tier: Optional[ParameterTier] = None
    Type: Optional[ParameterType] = None
    Value: PSParameterValue


class RegisterTargetWithMaintenanceWindowRequest(BaseModel):
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    Description: Optional[MaintenanceWindowDescription] = None
    Name: Optional[MaintenanceWindowName] = None
    OwnerInformation_1: Optional[OwnerInformation] = Field(
        None, alias='OwnerInformation'
    )
    ResourceType: MaintenanceWindowResourceType
    Targets_1: Targets = Field(..., alias='Targets')
    WindowId: MaintenanceWindowId


class RegisterTaskWithMaintenanceWindowRequest(BaseModel):
    AlarmConfiguration_1: Optional[AlarmConfiguration] = Field(
        None, alias='AlarmConfiguration'
    )
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    CutoffBehavior: Optional[MaintenanceWindowTaskCutoffBehavior] = None
    Description: Optional[MaintenanceWindowDescription] = None
    LoggingInfo_1: Optional[LoggingInfo] = Field(None, alias='LoggingInfo')
    MaxConcurrency_1: Optional[MaxConcurrency] = Field(None, alias='MaxConcurrency')
    MaxErrors_1: Optional[MaxErrors] = Field(None, alias='MaxErrors')
    Name: Optional[MaintenanceWindowName] = None
    Priority: Optional[MaintenanceWindowTaskPriority] = None
    ServiceRoleArn: Optional[ServiceRole] = None
    Targets_1: Optional[Targets] = Field(None, alias='Targets')
    TaskArn: MaintenanceWindowTaskArn
    TaskInvocationParameters: Optional[MaintenanceWindowTaskInvocationParameters] = None
    TaskParameters: Optional[MaintenanceWindowTaskParameters] = None
    TaskType: MaintenanceWindowTaskType
    WindowId: MaintenanceWindowId


class ResetServiceSettingResult(BaseModel):
    ServiceSetting_1: Optional[ServiceSetting] = Field(None, alias='ServiceSetting')


class ResourceDataSyncAwsOrganizationsSource(BaseModel):
    OrganizationSourceType: ResourceDataSyncOrganizationSourceType
    OrganizationalUnits: Optional[ResourceDataSyncOrganizationalUnitList] = None


class ResourceDataSyncSource(BaseModel):
    AwsOrganizationsSource: Optional[ResourceDataSyncAwsOrganizationsSource] = None
    EnableAllOpsDataSources: Optional[ResourceDataSyncEnableAllOpsDataSources] = None
    IncludeFutureRegions: Optional[ResourceDataSyncIncludeFutureRegions] = None
    SourceRegions: ResourceDataSyncSourceRegionList
    SourceType: ResourceDataSyncSourceType


class ResourceDataSyncSourceWithState(BaseModel):
    AwsOrganizationsSource: Optional[ResourceDataSyncAwsOrganizationsSource] = None
    EnableAllOpsDataSources: Optional[ResourceDataSyncEnableAllOpsDataSources] = None
    IncludeFutureRegions: Optional[ResourceDataSyncIncludeFutureRegions] = None
    SourceRegions: Optional[ResourceDataSyncSourceRegionList] = None
    SourceType: Optional[ResourceDataSyncSourceType] = None
    State: Optional[ResourceDataSyncState] = None


class SendCommandRequest(BaseModel):
    AlarmConfiguration_1: Optional[AlarmConfiguration] = Field(
        None, alias='AlarmConfiguration'
    )
    CloudWatchOutputConfig_1: Optional[CloudWatchOutputConfig] = Field(
        None, alias='CloudWatchOutputConfig'
    )
    Comment_1: Optional[Comment] = Field(None, alias='Comment')
    DocumentHash_1: Optional[DocumentHash] = Field(None, alias='DocumentHash')
    DocumentHashType_1: Optional[DocumentHashType] = Field(
        None, alias='DocumentHashType'
    )
    DocumentName: DocumentARN
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    InstanceIds: Optional[InstanceIdList] = None
    MaxConcurrency_1: Optional[MaxConcurrency] = Field(None, alias='MaxConcurrency')
    MaxErrors_1: Optional[MaxErrors] = Field(None, alias='MaxErrors')
    NotificationConfig_1: Optional[NotificationConfig] = Field(
        None, alias='NotificationConfig'
    )
    OutputS3BucketName: Optional[S3BucketName] = None
    OutputS3KeyPrefix: Optional[S3KeyPrefix] = None
    OutputS3Region: Optional[S3Region] = None
    Parameters_1: Optional[Parameters] = Field(None, alias='Parameters')
    ServiceRoleArn: Optional[ServiceRole] = None
    Targets_1: Optional[Targets] = Field(None, alias='Targets')
    TimeoutSeconds_1: Optional[TimeoutSeconds] = Field(None, alias='TimeoutSeconds')


class SendCommandResult(BaseModel):
    Command_1: Optional[Command] = Field(None, alias='Command')


class Session(BaseModel):
    Details: Optional[SessionDetails] = None
    DocumentName_1: Optional[DocumentName] = Field(None, alias='DocumentName')
    EndDate: Optional[DateTime] = None
    MaxSessionDuration_1: Optional[MaxSessionDuration] = Field(
        None, alias='MaxSessionDuration'
    )
    OutputUrl: Optional[SessionManagerOutputUrl] = None
    Owner: Optional[SessionOwner] = None
    Reason: Optional[SessionReason] = None
    SessionId_1: Optional[SessionId] = Field(None, alias='SessionId')
    StartDate: Optional[DateTime] = None
    Status: Optional[SessionStatus] = None
    Target: Optional[SessionTarget] = None


class SessionList(RootModel[List[Session]]):
    root: List[Session]


class TargetLocation(BaseModel):
    Accounts_1: Optional[Accounts] = Field(None, alias='Accounts')
    ExecutionRoleName_1: Optional[ExecutionRoleName] = Field(
        None, alias='ExecutionRoleName'
    )
    Regions_1: Optional[Regions] = Field(None, alias='Regions')
    TargetLocationAlarmConfiguration: Optional[AlarmConfiguration] = None
    TargetLocationMaxConcurrency: Optional[MaxConcurrency] = None
    TargetLocationMaxErrors: Optional[MaxErrors] = None


class TargetLocations(RootModel[List[TargetLocation]]):
    root: List[TargetLocation] = Field(..., max_length=100, min_length=1)


class UpdateAssociationRequest(BaseModel):
    AlarmConfiguration_1: Optional[AlarmConfiguration] = Field(
        None, alias='AlarmConfiguration'
    )
    ApplyOnlyAtCronInterval_1: Optional[ApplyOnlyAtCronInterval] = Field(
        None, alias='ApplyOnlyAtCronInterval'
    )
    AssociationId_1: AssociationId = Field(..., alias='AssociationId')
    AssociationName_1: Optional[AssociationName] = Field(None, alias='AssociationName')
    AssociationVersion_1: Optional[AssociationVersion] = Field(
        None, alias='AssociationVersion'
    )
    AutomationTargetParameterName_1: Optional[AutomationTargetParameterName] = Field(
        None, alias='AutomationTargetParameterName'
    )
    CalendarNames: Optional[CalendarNameOrARNList] = None
    ComplianceSeverity: Optional[AssociationComplianceSeverity] = None
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    MaxConcurrency_1: Optional[MaxConcurrency] = Field(None, alias='MaxConcurrency')
    MaxErrors_1: Optional[MaxErrors] = Field(None, alias='MaxErrors')
    Name: Optional[DocumentARN] = None
    OutputLocation: Optional[InstanceAssociationOutputLocation] = None
    Parameters_1: Optional[Parameters] = Field(None, alias='Parameters')
    ScheduleExpression_1: Optional[ScheduleExpression] = Field(
        None, alias='ScheduleExpression'
    )
    ScheduleOffset_1: Optional[ScheduleOffset] = Field(None, alias='ScheduleOffset')
    SyncCompliance: Optional[AssociationSyncCompliance] = None
    TargetLocations_1: Optional[TargetLocations] = Field(None, alias='TargetLocations')
    TargetMaps_1: Optional[TargetMaps] = Field(None, alias='TargetMaps')
    Targets_1: Optional[Targets] = Field(None, alias='Targets')


class UpdateDocumentMetadataRequest(BaseModel):
    DocumentReviews_1: DocumentReviews = Field(..., alias='DocumentReviews')
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    Name: DocumentName


class UpdateDocumentResult(BaseModel):
    DocumentDescription_1: Optional[DocumentDescription] = Field(
        None, alias='DocumentDescription'
    )


class UpdateMaintenanceWindowTaskRequest(BaseModel):
    AlarmConfiguration_1: Optional[AlarmConfiguration] = Field(
        None, alias='AlarmConfiguration'
    )
    CutoffBehavior: Optional[MaintenanceWindowTaskCutoffBehavior] = None
    Description: Optional[MaintenanceWindowDescription] = None
    LoggingInfo_1: Optional[LoggingInfo] = Field(None, alias='LoggingInfo')
    MaxConcurrency_1: Optional[MaxConcurrency] = Field(None, alias='MaxConcurrency')
    MaxErrors_1: Optional[MaxErrors] = Field(None, alias='MaxErrors')
    Name: Optional[MaintenanceWindowName] = None
    Priority: Optional[MaintenanceWindowTaskPriority] = None
    Replace: Optional[Boolean] = None
    ServiceRoleArn: Optional[ServiceRole] = None
    Targets_1: Optional[Targets] = Field(None, alias='Targets')
    TaskArn: Optional[MaintenanceWindowTaskArn] = None
    TaskInvocationParameters: Optional[MaintenanceWindowTaskInvocationParameters] = None
    TaskParameters: Optional[MaintenanceWindowTaskParameters] = None
    WindowId: MaintenanceWindowId
    WindowTaskId: MaintenanceWindowTaskId


class UpdateMaintenanceWindowTaskResult(BaseModel):
    AlarmConfiguration_1: Optional[AlarmConfiguration] = Field(
        None, alias='AlarmConfiguration'
    )
    CutoffBehavior: Optional[MaintenanceWindowTaskCutoffBehavior] = None
    Description: Optional[MaintenanceWindowDescription] = None
    LoggingInfo_1: Optional[LoggingInfo] = Field(None, alias='LoggingInfo')
    MaxConcurrency_1: Optional[MaxConcurrency] = Field(None, alias='MaxConcurrency')
    MaxErrors_1: Optional[MaxErrors] = Field(None, alias='MaxErrors')
    Name: Optional[MaintenanceWindowName] = None
    Priority: Optional[MaintenanceWindowTaskPriority] = None
    ServiceRoleArn: Optional[ServiceRole] = None
    Targets_1: Optional[Targets] = Field(None, alias='Targets')
    TaskArn: Optional[MaintenanceWindowTaskArn] = None
    TaskInvocationParameters: Optional[MaintenanceWindowTaskInvocationParameters] = None
    TaskParameters: Optional[MaintenanceWindowTaskParameters] = None
    WindowId: Optional[MaintenanceWindowId] = None
    WindowTaskId: Optional[MaintenanceWindowTaskId] = None


class UpdateOpsMetadataRequest(BaseModel):
    KeysToDelete: Optional[MetadataKeysToDeleteList] = None
    MetadataToUpdate: Optional[MetadataMap] = None
    OpsMetadataArn_1: OpsMetadataArn = Field(..., alias='OpsMetadataArn')


class UpdateResourceDataSyncRequest(BaseModel):
    SyncName: ResourceDataSyncName
    SyncSource: ResourceDataSyncSource
    SyncType: ResourceDataSyncType


class Association(BaseModel):
    AssociationId_1: Optional[AssociationId] = Field(None, alias='AssociationId')
    AssociationName_1: Optional[AssociationName] = Field(None, alias='AssociationName')
    AssociationVersion_1: Optional[AssociationVersion] = Field(
        None, alias='AssociationVersion'
    )
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    InstanceId_1: Optional[InstanceId] = Field(None, alias='InstanceId')
    LastExecutionDate: Optional[DateTime] = None
    Name: Optional[DocumentARN] = None
    Overview: Optional[AssociationOverview] = None
    ScheduleExpression_1: Optional[ScheduleExpression] = Field(
        None, alias='ScheduleExpression'
    )
    ScheduleOffset_1: Optional[ScheduleOffset] = Field(None, alias='ScheduleOffset')
    TargetMaps_1: Optional[TargetMaps] = Field(None, alias='TargetMaps')
    Targets_1: Optional[Targets] = Field(None, alias='Targets')


class AssociationDescription(BaseModel):
    AlarmConfiguration_1: Optional[AlarmConfiguration] = Field(
        None, alias='AlarmConfiguration'
    )
    ApplyOnlyAtCronInterval_1: Optional[ApplyOnlyAtCronInterval] = Field(
        None, alias='ApplyOnlyAtCronInterval'
    )
    AssociationId_1: Optional[AssociationId] = Field(None, alias='AssociationId')
    AssociationName_1: Optional[AssociationName] = Field(None, alias='AssociationName')
    AssociationVersion_1: Optional[AssociationVersion] = Field(
        None, alias='AssociationVersion'
    )
    AutomationTargetParameterName_1: Optional[AutomationTargetParameterName] = Field(
        None, alias='AutomationTargetParameterName'
    )
    CalendarNames: Optional[CalendarNameOrARNList] = None
    ComplianceSeverity: Optional[AssociationComplianceSeverity] = None
    Date: Optional[DateTime] = None
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    InstanceId_1: Optional[InstanceId] = Field(None, alias='InstanceId')
    LastExecutionDate: Optional[DateTime] = None
    LastSuccessfulExecutionDate: Optional[DateTime] = None
    LastUpdateAssociationDate: Optional[DateTime] = None
    MaxConcurrency_1: Optional[MaxConcurrency] = Field(None, alias='MaxConcurrency')
    MaxErrors_1: Optional[MaxErrors] = Field(None, alias='MaxErrors')
    Name: Optional[DocumentARN] = None
    OutputLocation: Optional[InstanceAssociationOutputLocation] = None
    Overview: Optional[AssociationOverview] = None
    Parameters_1: Optional[Parameters] = Field(None, alias='Parameters')
    ScheduleExpression_1: Optional[ScheduleExpression] = Field(
        None, alias='ScheduleExpression'
    )
    ScheduleOffset_1: Optional[ScheduleOffset] = Field(None, alias='ScheduleOffset')
    Status: Optional[AssociationStatus] = None
    SyncCompliance: Optional[AssociationSyncCompliance] = None
    TargetLocations_1: Optional[TargetLocations] = Field(None, alias='TargetLocations')
    TargetMaps_1: Optional[TargetMaps] = Field(None, alias='TargetMaps')
    Targets_1: Optional[Targets] = Field(None, alias='Targets')
    TriggeredAlarms: Optional[AlarmStateInformationList] = None


class AssociationDescriptionList(RootModel[List[AssociationDescription]]):
    root: List[AssociationDescription]


class AssociationList(RootModel[List[Association]]):
    root: List[Association]


class AssociationVersionInfo(BaseModel):
    ApplyOnlyAtCronInterval_1: Optional[ApplyOnlyAtCronInterval] = Field(
        None, alias='ApplyOnlyAtCronInterval'
    )
    AssociationId_1: Optional[AssociationId] = Field(None, alias='AssociationId')
    AssociationName_1: Optional[AssociationName] = Field(None, alias='AssociationName')
    AssociationVersion_1: Optional[AssociationVersion] = Field(
        None, alias='AssociationVersion'
    )
    CalendarNames: Optional[CalendarNameOrARNList] = None
    ComplianceSeverity: Optional[AssociationComplianceSeverity] = None
    CreatedDate: Optional[DateTime] = None
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    MaxConcurrency_1: Optional[MaxConcurrency] = Field(None, alias='MaxConcurrency')
    MaxErrors_1: Optional[MaxErrors] = Field(None, alias='MaxErrors')
    Name: Optional[DocumentARN] = None
    OutputLocation: Optional[InstanceAssociationOutputLocation] = None
    Parameters_1: Optional[Parameters] = Field(None, alias='Parameters')
    ScheduleExpression_1: Optional[ScheduleExpression] = Field(
        None, alias='ScheduleExpression'
    )
    ScheduleOffset_1: Optional[ScheduleOffset] = Field(None, alias='ScheduleOffset')
    SyncCompliance: Optional[AssociationSyncCompliance] = None
    TargetLocations_1: Optional[TargetLocations] = Field(None, alias='TargetLocations')
    TargetMaps_1: Optional[TargetMaps] = Field(None, alias='TargetMaps')
    Targets_1: Optional[Targets] = Field(None, alias='Targets')


class AssociationVersionList(RootModel[List[AssociationVersionInfo]]):
    root: List[AssociationVersionInfo] = Field(..., min_length=1)


class CreateAssociationBatchRequestEntry(BaseModel):
    AlarmConfiguration_1: Optional[AlarmConfiguration] = Field(
        None, alias='AlarmConfiguration'
    )
    ApplyOnlyAtCronInterval_1: Optional[ApplyOnlyAtCronInterval] = Field(
        None, alias='ApplyOnlyAtCronInterval'
    )
    AssociationName_1: Optional[AssociationName] = Field(None, alias='AssociationName')
    AutomationTargetParameterName_1: Optional[AutomationTargetParameterName] = Field(
        None, alias='AutomationTargetParameterName'
    )
    CalendarNames: Optional[CalendarNameOrARNList] = None
    ComplianceSeverity: Optional[AssociationComplianceSeverity] = None
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    InstanceId_1: Optional[InstanceId] = Field(None, alias='InstanceId')
    MaxConcurrency_1: Optional[MaxConcurrency] = Field(None, alias='MaxConcurrency')
    MaxErrors_1: Optional[MaxErrors] = Field(None, alias='MaxErrors')
    Name: DocumentARN
    OutputLocation: Optional[InstanceAssociationOutputLocation] = None
    Parameters_1: Optional[Parameters] = Field(None, alias='Parameters')
    ScheduleExpression_1: Optional[ScheduleExpression] = Field(
        None, alias='ScheduleExpression'
    )
    ScheduleOffset_1: Optional[ScheduleOffset] = Field(None, alias='ScheduleOffset')
    SyncCompliance: Optional[AssociationSyncCompliance] = None
    TargetLocations_1: Optional[TargetLocations] = Field(None, alias='TargetLocations')
    TargetMaps_1: Optional[TargetMaps] = Field(None, alias='TargetMaps')
    Targets_1: Optional[Targets] = Field(None, alias='Targets')


class CreateAssociationRequest(BaseModel):
    AlarmConfiguration_1: Optional[AlarmConfiguration] = Field(
        None, alias='AlarmConfiguration'
    )
    ApplyOnlyAtCronInterval_1: Optional[ApplyOnlyAtCronInterval] = Field(
        None, alias='ApplyOnlyAtCronInterval'
    )
    AssociationName_1: Optional[AssociationName] = Field(None, alias='AssociationName')
    AutomationTargetParameterName_1: Optional[AutomationTargetParameterName] = Field(
        None, alias='AutomationTargetParameterName'
    )
    CalendarNames: Optional[CalendarNameOrARNList] = None
    ComplianceSeverity: Optional[AssociationComplianceSeverity] = None
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    InstanceId_1: Optional[InstanceId] = Field(None, alias='InstanceId')
    MaxConcurrency_1: Optional[MaxConcurrency] = Field(None, alias='MaxConcurrency')
    MaxErrors_1: Optional[MaxErrors] = Field(None, alias='MaxErrors')
    Name: DocumentARN
    OutputLocation: Optional[InstanceAssociationOutputLocation] = None
    Parameters_1: Optional[Parameters] = Field(None, alias='Parameters')
    ScheduleExpression_1: Optional[ScheduleExpression] = Field(
        None, alias='ScheduleExpression'
    )
    ScheduleOffset_1: Optional[ScheduleOffset] = Field(None, alias='ScheduleOffset')
    SyncCompliance: Optional[AssociationSyncCompliance] = None
    Tags: Optional[TagList] = None
    TargetLocations_1: Optional[TargetLocations] = Field(None, alias='TargetLocations')
    TargetMaps_1: Optional[TargetMaps] = Field(None, alias='TargetMaps')
    Targets_1: Optional[Targets] = Field(None, alias='Targets')


class CreateAssociationResult(BaseModel):
    AssociationDescription_1: Optional[AssociationDescription] = Field(
        None, alias='AssociationDescription'
    )


class CreateDocumentResult(BaseModel):
    DocumentDescription_1: Optional[DocumentDescription] = Field(
        None, alias='DocumentDescription'
    )


class CreateOpsMetadataRequest(BaseModel):
    Metadata: Optional[MetadataMap] = None
    ResourceId: OpsMetadataResourceId
    Tags: Optional[TagList] = None


class CreateResourceDataSyncRequest(BaseModel):
    S3Destination: Optional[ResourceDataSyncS3Destination] = None
    SyncName: ResourceDataSyncName
    SyncSource: Optional[ResourceDataSyncSource] = None
    SyncType: Optional[ResourceDataSyncType] = None


class DeleteInventoryResult(BaseModel):
    DeletionId: Optional[UUID] = None
    DeletionSummary: Optional[InventoryDeletionSummary] = None
    TypeName: Optional[InventoryItemTypeName] = None


class DescribeAssociationResult(BaseModel):
    AssociationDescription_1: Optional[AssociationDescription] = Field(
        None, alias='AssociationDescription'
    )


class DescribeDocumentResult(BaseModel):
    Document: Optional[DocumentDescription] = None


class DescribeEffectivePatchesForPatchBaselineResult(BaseModel):
    EffectivePatches: Optional[EffectivePatchList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeInstanceAssociationsStatusResult(BaseModel):
    InstanceAssociationStatusInfos_1: Optional[InstanceAssociationStatusInfos] = Field(
        None, alias='InstanceAssociationStatusInfos'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeInstanceInformationResult(BaseModel):
    InstanceInformationList_1: Optional[InstanceInformationList] = Field(
        None, alias='InstanceInformationList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeMaintenanceWindowExecutionTasksResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    WindowExecutionTaskIdentities: Optional[
        MaintenanceWindowExecutionTaskIdentityList
    ] = None


class DescribeMaintenanceWindowTargetsResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Targets: Optional[MaintenanceWindowTargetList] = None


class DescribeMaintenanceWindowTasksResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Tasks: Optional[MaintenanceWindowTaskList] = None


class DescribeOpsItemsResponse(BaseModel):
    NextToken: Optional[String] = None
    OpsItemSummaries_1: Optional[OpsItemSummaries] = Field(
        None, alias='OpsItemSummaries'
    )


class DescribeParametersResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Parameters: Optional[ParameterMetadataList] = None


class DescribeSessionsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Sessions: Optional[SessionList] = None


class DocumentReviewerResponseList(RootModel[List[DocumentReviewerResponseSource]]):
    root: List[DocumentReviewerResponseSource]


class FailedCreateAssociation(BaseModel):
    Entry: Optional[CreateAssociationBatchRequestEntry] = None
    Fault_1: Optional[Fault] = Field(None, alias='Fault')
    Message: Optional[BatchErrorMessage] = None


class FailedCreateAssociationList(RootModel[List[FailedCreateAssociation]]):
    root: List[FailedCreateAssociation]


class GetMaintenanceWindowTaskResult(BaseModel):
    AlarmConfiguration_1: Optional[AlarmConfiguration] = Field(
        None, alias='AlarmConfiguration'
    )
    CutoffBehavior: Optional[MaintenanceWindowTaskCutoffBehavior] = None
    Description: Optional[MaintenanceWindowDescription] = None
    LoggingInfo_1: Optional[LoggingInfo] = Field(None, alias='LoggingInfo')
    MaxConcurrency_1: Optional[MaxConcurrency] = Field(None, alias='MaxConcurrency')
    MaxErrors_1: Optional[MaxErrors] = Field(None, alias='MaxErrors')
    Name: Optional[MaintenanceWindowName] = None
    Priority: Optional[MaintenanceWindowTaskPriority] = None
    ServiceRoleArn: Optional[ServiceRole] = None
    Targets_1: Optional[Targets] = Field(None, alias='Targets')
    TaskArn: Optional[MaintenanceWindowTaskArn] = None
    TaskInvocationParameters: Optional[MaintenanceWindowTaskInvocationParameters] = None
    TaskParameters: Optional[MaintenanceWindowTaskParameters] = None
    TaskType: Optional[MaintenanceWindowTaskType] = None
    WindowId: Optional[MaintenanceWindowId] = None
    WindowTaskId: Optional[MaintenanceWindowTaskId] = None


class GetOpsItemResponse(BaseModel):
    OpsItem_1: Optional[OpsItem] = Field(None, alias='OpsItem')


class GetOpsMetadataResult(BaseModel):
    Metadata: Optional[MetadataMap] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResourceId: Optional[OpsMetadataResourceId] = None


class GetOpsSummaryResult(BaseModel):
    Entities: Optional[OpsEntityList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetParameterHistoryResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Parameters: Optional[ParameterHistoryList] = None


class GetResourcePoliciesResponse(BaseModel):
    NextToken: Optional[String] = None
    Policies: Optional[GetResourcePoliciesResponseEntries] = None


class InventoryDeletionStatusItem(BaseModel):
    DeletionId: Optional[UUID] = None
    DeletionStartTime: Optional[InventoryDeletionStartTime] = None
    DeletionSummary: Optional[InventoryDeletionSummary] = None
    LastStatus: Optional[InventoryDeletionStatus] = None
    LastStatusMessage: Optional[InventoryDeletionLastStatusMessage] = None
    LastStatusUpdateTime: Optional[InventoryDeletionLastStatusUpdateTime] = None
    TypeName: Optional[InventoryItemTypeName] = None


class InventoryDeletionsList(RootModel[List[InventoryDeletionStatusItem]]):
    root: List[InventoryDeletionStatusItem]


class ListAssociationVersionsResult(BaseModel):
    AssociationVersions: Optional[AssociationVersionList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListAssociationsResult(BaseModel):
    Associations: Optional[AssociationList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListOpsItemRelatedItemsResponse(BaseModel):
    NextToken: Optional[String] = None
    Summaries: Optional[OpsItemRelatedItemSummaries] = None


class OpsItemEventSummaries(RootModel[List[OpsItemEventSummary]]):
    root: List[OpsItemEventSummary]


class PatchRuleGroup(BaseModel):
    PatchRules: PatchRuleList


class ResourceDataSyncItem(BaseModel):
    LastStatus: Optional[LastResourceDataSyncStatus] = None
    LastSuccessfulSyncTime: Optional[LastSuccessfulResourceDataSyncTime] = None
    LastSyncStatusMessage: Optional[LastResourceDataSyncMessage] = None
    LastSyncTime: Optional[LastResourceDataSyncTime] = None
    S3Destination: Optional[ResourceDataSyncS3Destination] = None
    SyncCreatedTime: Optional[ResourceDataSyncCreatedTime] = None
    SyncLastModifiedTime: Optional[ResourceDataSyncLastModifiedTime] = None
    SyncName: Optional[ResourceDataSyncName] = None
    SyncSource: Optional[ResourceDataSyncSourceWithState] = None
    SyncType: Optional[ResourceDataSyncType] = None


class ResourceDataSyncItemList(RootModel[List[ResourceDataSyncItem]]):
    root: List[ResourceDataSyncItem]


class Runbook(BaseModel):
    DocumentName: DocumentARN
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    MaxConcurrency_1: Optional[MaxConcurrency] = Field(None, alias='MaxConcurrency')
    MaxErrors_1: Optional[MaxErrors] = Field(None, alias='MaxErrors')
    Parameters: Optional[AutomationParameterMap] = None
    TargetLocations_1: Optional[TargetLocations] = Field(None, alias='TargetLocations')
    TargetMaps_1: Optional[TargetMaps] = Field(None, alias='TargetMaps')
    TargetParameterName: Optional[AutomationParameterKey] = None
    Targets_1: Optional[Targets] = Field(None, alias='Targets')


class Runbooks(RootModel[List[Runbook]]):
    root: List[Runbook] = Field(..., max_length=1, min_length=1)


class StartAutomationExecutionRequest(BaseModel):
    AlarmConfiguration_1: Optional[AlarmConfiguration] = Field(
        None, alias='AlarmConfiguration'
    )
    ClientToken: Optional[IdempotencyToken] = None
    DocumentName: DocumentARN
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    MaxConcurrency_1: Optional[MaxConcurrency] = Field(None, alias='MaxConcurrency')
    MaxErrors_1: Optional[MaxErrors] = Field(None, alias='MaxErrors')
    Mode: Optional[ExecutionMode] = None
    Parameters: Optional[AutomationParameterMap] = None
    Tags: Optional[TagList] = None
    TargetLocations_1: Optional[TargetLocations] = Field(None, alias='TargetLocations')
    TargetMaps_1: Optional[TargetMaps] = Field(None, alias='TargetMaps')
    TargetParameterName: Optional[AutomationParameterKey] = None
    Targets_1: Optional[Targets] = Field(None, alias='Targets')


class StartChangeRequestExecutionRequest(BaseModel):
    AutoApprove: Optional[Boolean] = None
    ChangeDetails: Optional[ChangeDetailsValue] = None
    ChangeRequestName_1: Optional[ChangeRequestName] = Field(
        None, alias='ChangeRequestName'
    )
    ClientToken: Optional[IdempotencyToken] = None
    DocumentName: DocumentARN
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    Parameters: Optional[AutomationParameterMap] = None
    Runbooks_1: Runbooks = Field(..., alias='Runbooks')
    ScheduledEndTime: Optional[DateTime] = None
    ScheduledTime: Optional[DateTime] = None
    Tags: Optional[TagList] = None


class StepExecution(BaseModel):
    Action: Optional[AutomationActionName] = None
    ExecutionEndTime: Optional[DateTime] = None
    ExecutionStartTime: Optional[DateTime] = None
    FailureDetails_1: Optional[FailureDetails] = Field(None, alias='FailureDetails')
    FailureMessage: Optional[String] = None
    Inputs: Optional[NormalStringMap] = None
    IsCritical: Optional[Boolean] = None
    IsEnd: Optional[Boolean] = None
    MaxAttempts: Optional[Integer] = None
    NextStep: Optional[String] = None
    OnFailure: Optional[String] = None
    Outputs: Optional[AutomationParameterMap] = None
    OverriddenParameters: Optional[AutomationParameterMap] = None
    Response: Optional[String] = None
    ResponseCode: Optional[String] = None
    StepExecutionId: Optional[String] = None
    StepName: Optional[String] = None
    StepStatus: Optional[AutomationExecutionStatus] = None
    TargetLocation_1: Optional[TargetLocation] = Field(None, alias='TargetLocation')
    Targets_1: Optional[Targets] = Field(None, alias='Targets')
    TimeoutSeconds: Optional[Long] = None
    TriggeredAlarms: Optional[AlarmStateInformationList] = None
    ValidNextSteps: Optional[ValidNextStepList] = None


class StepExecutionList(RootModel[List[StepExecution]]):
    root: List[StepExecution]


class UpdateAssociationResult(BaseModel):
    AssociationDescription_1: Optional[AssociationDescription] = Field(
        None, alias='AssociationDescription'
    )


class UpdateAssociationStatusResult(BaseModel):
    AssociationDescription_1: Optional[AssociationDescription] = Field(
        None, alias='AssociationDescription'
    )


class UpdatePatchBaselineRequest(BaseModel):
    ApprovalRules: Optional[PatchRuleGroup] = None
    ApprovedPatches: Optional[PatchIdList] = None
    ApprovedPatchesComplianceLevel: Optional[PatchComplianceLevel] = None
    ApprovedPatchesEnableNonSecurity: Optional[Boolean] = None
    BaselineId_1: BaselineId = Field(..., alias='BaselineId')
    Description: Optional[BaselineDescription] = None
    GlobalFilters: Optional[PatchFilterGroup] = None
    Name: Optional[BaselineName] = None
    RejectedPatches: Optional[PatchIdList] = None
    RejectedPatchesAction: Optional[PatchAction] = None
    Replace: Optional[Boolean] = None
    Sources: Optional[PatchSourceList] = None


class UpdatePatchBaselineResult(BaseModel):
    ApprovalRules: Optional[PatchRuleGroup] = None
    ApprovedPatches: Optional[PatchIdList] = None
    ApprovedPatchesComplianceLevel: Optional[PatchComplianceLevel] = None
    ApprovedPatchesEnableNonSecurity: Optional[Boolean] = None
    BaselineId_1: Optional[BaselineId] = Field(None, alias='BaselineId')
    CreatedDate: Optional[DateTime] = None
    Description: Optional[BaselineDescription] = None
    GlobalFilters: Optional[PatchFilterGroup] = None
    ModifiedDate: Optional[DateTime] = None
    Name: Optional[BaselineName] = None
    OperatingSystem_1: Optional[OperatingSystem] = Field(None, alias='OperatingSystem')
    RejectedPatches: Optional[PatchIdList] = None
    RejectedPatchesAction: Optional[PatchAction] = None
    Sources: Optional[PatchSourceList] = None


class AutomationExecution(BaseModel):
    AlarmConfiguration_1: Optional[AlarmConfiguration] = Field(
        None, alias='AlarmConfiguration'
    )
    AssociationId: Optional[String] = None
    AutomationExecutionId_1: Optional[AutomationExecutionId] = Field(
        None, alias='AutomationExecutionId'
    )
    AutomationExecutionStatus_1: Optional[AutomationExecutionStatus] = Field(
        None, alias='AutomationExecutionStatus'
    )
    AutomationSubtype_1: Optional[AutomationSubtype] = Field(
        None, alias='AutomationSubtype'
    )
    ChangeRequestName_1: Optional[ChangeRequestName] = Field(
        None, alias='ChangeRequestName'
    )
    CurrentAction: Optional[String] = None
    CurrentStepName: Optional[String] = None
    DocumentName_1: Optional[DocumentName] = Field(None, alias='DocumentName')
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    ExecutedBy: Optional[String] = None
    ExecutionEndTime: Optional[DateTime] = None
    ExecutionStartTime: Optional[DateTime] = None
    FailureMessage: Optional[String] = None
    MaxConcurrency_1: Optional[MaxConcurrency] = Field(None, alias='MaxConcurrency')
    MaxErrors_1: Optional[MaxErrors] = Field(None, alias='MaxErrors')
    Mode: Optional[ExecutionMode] = None
    OpsItemId: Optional[String] = None
    Outputs: Optional[AutomationParameterMap] = None
    Parameters: Optional[AutomationParameterMap] = None
    ParentAutomationExecutionId: Optional[AutomationExecutionId] = None
    ProgressCounters_1: Optional[ProgressCounters] = Field(
        None, alias='ProgressCounters'
    )
    ResolvedTargets_1: Optional[ResolvedTargets] = Field(None, alias='ResolvedTargets')
    Runbooks_1: Optional[Runbooks] = Field(None, alias='Runbooks')
    ScheduledTime: Optional[DateTime] = None
    StepExecutions: Optional[StepExecutionList] = None
    StepExecutionsTruncated: Optional[Boolean] = None
    Target: Optional[String] = None
    TargetLocations_1: Optional[TargetLocations] = Field(None, alias='TargetLocations')
    TargetMaps_1: Optional[TargetMaps] = Field(None, alias='TargetMaps')
    TargetParameterName: Optional[AutomationParameterKey] = None
    Targets_1: Optional[Targets] = Field(None, alias='Targets')
    TriggeredAlarms: Optional[AlarmStateInformationList] = None


class AutomationExecutionMetadata(BaseModel):
    AlarmConfiguration_1: Optional[AlarmConfiguration] = Field(
        None, alias='AlarmConfiguration'
    )
    AssociationId: Optional[String] = None
    AutomationExecutionId_1: Optional[AutomationExecutionId] = Field(
        None, alias='AutomationExecutionId'
    )
    AutomationExecutionStatus_1: Optional[AutomationExecutionStatus] = Field(
        None, alias='AutomationExecutionStatus'
    )
    AutomationSubtype_1: Optional[AutomationSubtype] = Field(
        None, alias='AutomationSubtype'
    )
    AutomationType_1: Optional[AutomationType] = Field(None, alias='AutomationType')
    ChangeRequestName_1: Optional[ChangeRequestName] = Field(
        None, alias='ChangeRequestName'
    )
    CurrentAction: Optional[String] = None
    CurrentStepName: Optional[String] = None
    DocumentName_1: Optional[DocumentName] = Field(None, alias='DocumentName')
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    ExecutedBy: Optional[String] = None
    ExecutionEndTime: Optional[DateTime] = None
    ExecutionStartTime: Optional[DateTime] = None
    FailureMessage: Optional[String] = None
    LogFile: Optional[String] = None
    MaxConcurrency_1: Optional[MaxConcurrency] = Field(None, alias='MaxConcurrency')
    MaxErrors_1: Optional[MaxErrors] = Field(None, alias='MaxErrors')
    Mode: Optional[ExecutionMode] = None
    OpsItemId: Optional[String] = None
    Outputs: Optional[AutomationParameterMap] = None
    ParentAutomationExecutionId: Optional[AutomationExecutionId] = None
    ResolvedTargets_1: Optional[ResolvedTargets] = Field(None, alias='ResolvedTargets')
    Runbooks_1: Optional[Runbooks] = Field(None, alias='Runbooks')
    ScheduledTime: Optional[DateTime] = None
    Target: Optional[String] = None
    TargetMaps_1: Optional[TargetMaps] = Field(None, alias='TargetMaps')
    TargetParameterName: Optional[AutomationParameterKey] = None
    Targets_1: Optional[Targets] = Field(None, alias='Targets')
    TriggeredAlarms: Optional[AlarmStateInformationList] = None


class AutomationExecutionMetadataList(RootModel[List[AutomationExecutionMetadata]]):
    root: List[AutomationExecutionMetadata]


class BaselineOverride(BaseModel):
    ApprovalRules: Optional[PatchRuleGroup] = None
    ApprovedPatches: Optional[PatchIdList] = None
    ApprovedPatchesComplianceLevel: Optional[PatchComplianceLevel] = None
    ApprovedPatchesEnableNonSecurity: Optional[Boolean] = None
    GlobalFilters: Optional[PatchFilterGroup] = None
    OperatingSystem_1: Optional[OperatingSystem] = Field(None, alias='OperatingSystem')
    RejectedPatches: Optional[PatchIdList] = None
    RejectedPatchesAction: Optional[PatchAction] = None
    Sources: Optional[PatchSourceList] = None


class CreateAssociationBatchRequestEntries(
    RootModel[List[CreateAssociationBatchRequestEntry]]
):
    root: List[CreateAssociationBatchRequestEntry] = Field(..., min_length=1)


class CreateAssociationBatchResult(BaseModel):
    Failed: Optional[FailedCreateAssociationList] = None
    Successful: Optional[AssociationDescriptionList] = None


class CreatePatchBaselineRequest(BaseModel):
    ApprovalRules: Optional[PatchRuleGroup] = None
    ApprovedPatches: Optional[PatchIdList] = None
    ApprovedPatchesComplianceLevel: Optional[PatchComplianceLevel] = None
    ApprovedPatchesEnableNonSecurity: Optional[Boolean] = None
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    Description: Optional[BaselineDescription] = None
    GlobalFilters: Optional[PatchFilterGroup] = None
    Name: BaselineName
    OperatingSystem_1: Optional[OperatingSystem] = Field(None, alias='OperatingSystem')
    RejectedPatches: Optional[PatchIdList] = None
    RejectedPatchesAction: Optional[PatchAction] = None
    Sources: Optional[PatchSourceList] = None
    Tags: Optional[TagList] = None


class DescribeAutomationExecutionsResult(BaseModel):
    AutomationExecutionMetadataList_1: Optional[AutomationExecutionMetadataList] = (
        Field(None, alias='AutomationExecutionMetadataList')
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeAutomationStepExecutionsResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StepExecutions: Optional[StepExecutionList] = None


class DescribeInventoryDeletionsResult(BaseModel):
    InventoryDeletions: Optional[InventoryDeletionsList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DocumentMetadataResponseInfo(BaseModel):
    ReviewerResponse: Optional[DocumentReviewerResponseList] = None


class GetAutomationExecutionResult(BaseModel):
    AutomationExecution_1: Optional[AutomationExecution] = Field(
        None, alias='AutomationExecution'
    )


class GetDeployablePatchSnapshotForInstanceRequest(BaseModel):
    BaselineOverride_1: Optional[BaselineOverride] = Field(
        None, alias='BaselineOverride'
    )
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    SnapshotId_1: SnapshotId = Field(..., alias='SnapshotId')


class GetPatchBaselineResult(BaseModel):
    ApprovalRules: Optional[PatchRuleGroup] = None
    ApprovedPatches: Optional[PatchIdList] = None
    ApprovedPatchesComplianceLevel: Optional[PatchComplianceLevel] = None
    ApprovedPatchesEnableNonSecurity: Optional[Boolean] = None
    BaselineId_1: Optional[BaselineId] = Field(None, alias='BaselineId')
    CreatedDate: Optional[DateTime] = None
    Description: Optional[BaselineDescription] = None
    GlobalFilters: Optional[PatchFilterGroup] = None
    ModifiedDate: Optional[DateTime] = None
    Name: Optional[BaselineName] = None
    OperatingSystem_1: Optional[OperatingSystem] = Field(None, alias='OperatingSystem')
    PatchGroups: Optional[PatchGroupList] = None
    RejectedPatches: Optional[PatchIdList] = None
    RejectedPatchesAction: Optional[PatchAction] = None
    Sources: Optional[PatchSourceList] = None


class ListDocumentMetadataHistoryResponse(BaseModel):
    Author: Optional[DocumentAuthor] = None
    DocumentVersion_1: Optional[DocumentVersion] = Field(None, alias='DocumentVersion')
    Metadata: Optional[DocumentMetadataResponseInfo] = None
    Name: Optional[DocumentName] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListOpsItemEventsResponse(BaseModel):
    NextToken: Optional[String] = None
    Summaries: Optional[OpsItemEventSummaries] = None


class ListResourceDataSyncResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResourceDataSyncItems: Optional[ResourceDataSyncItemList] = None


class CreateAssociationBatchRequest(BaseModel):
    Entries: CreateAssociationBatchRequestEntries


class GetInventoryRequest(BaseModel):
    Aggregators: Optional[InventoryAggregatorList] = None
    Filters: Optional[InventoryFilterList] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResultAttributes: Optional[ResultAttributeList] = None


class GetOpsSummaryRequest(BaseModel):
    Aggregators: Optional[OpsAggregatorList] = None
    Filters: Optional[OpsFilterList] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResultAttributes: Optional[OpsResultAttributeList] = None
    SyncName: Optional[ResourceDataSyncName] = None


class InventoryAggregator(BaseModel):
    Aggregators: Optional[InventoryAggregatorList] = None
    Expression: Optional[InventoryAggregatorExpression] = None
    Groups: Optional[InventoryGroupList] = None


class InventoryAggregatorList(RootModel[List[InventoryAggregator]]):
    root: List[InventoryAggregator] = Field(..., max_length=10, min_length=1)


class OpsAggregator(BaseModel):
    AggregatorType: Optional[OpsAggregatorType] = None
    Aggregators: Optional[OpsAggregatorList] = None
    AttributeName: Optional[OpsDataAttributeName] = None
    Filters: Optional[OpsFilterList] = None
    TypeName: Optional[OpsDataTypeName] = None
    Values: Optional[OpsAggregatorValueMap] = None


class OpsAggregatorList(RootModel[List[OpsAggregator]]):
    root: List[OpsAggregator] = Field(..., max_length=12, min_length=1)


GetInventoryRequest.model_rebuild()
GetOpsSummaryRequest.model_rebuild()
InventoryAggregator.model_rebuild()
OpsAggregator.model_rebuild()
